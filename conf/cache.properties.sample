#
# $Id: cache.properties.sample 20529 2015-01-12 14:12:04Z mikekushner $
#
# This is a sample file to override properties used
# during development (or deployment) of EJBCA
# 
# You should copy and rename this file to cache.properties
# and customize at will.
#


#------------------- Performance settings -------------

# Caches is used internally by EJBCA to optimize performance. 
# You can manually flush internal caches using the command line command "ejbca.sh clearcache".
# Run the command for more detailed documentation of this command.

# CryptoToken object caching gets updates from database when a CryptoToken object is stale.
# During this fetch, the currently cached CryptoToken object will continue to be used.
# This cache can never be completely disabled to ensure that an activated CryptoToken object
# is kept in the active state until removed or changed in the database.
# Setting this value will improve performance for very large volume installations (>50 cert/s). 
# For normal installations, where extreme speeds and response times are not required, leave as default.
# Default: 10000
# Possible values 0 (no caching, but keeps activated) to 9223372036854775807 (2^63-1 = Long.MAX_VALUE).
#  If you want caching for an infinite time then set something high for example 157680000000 (5years). 
#cryptotoken.cachetime=157680000000
#cryptotoken.cachetime=0

# CA object caching gets updates from database when a CA object is stale.
# During this fetch, the currently cached CA object will continue to be used.
# Setting this value will improve performance for very large volume installations (>100 cert/s). 
# For normal installations, where extreme speeds and response times are not required, leave as default.
# Value is milliseconds.
# Default: 10000
# Possible values -1 (no caching) to 9223372036854775807 (2^63-1 = Long.MAX_VALUE).
#  If you want caching for an infinite time then set something high for example 157680000000 (5years). 
#cainfo.cachetime=157680000000
#cainfo.cachetime=-1

# Set to a value for caching calls to getEndEntityProfile and getEndEntityProfileId/Name in EndEntityProfileSessionBean. This means that for EndEntity profiles to be updated
# the cache time expires, an "Edit profile" or server restart is done, or flushProfileCache is called on EndEntityProfileSessionBean. 
# This cache works fine in a single server environment. In a multi server (clustered) environment, 
# this can be used to disable the check if a profile has been edited on another node, so the profile must be edited on all nodes, 
# or nodes caches flushed after editing on one node.
# Setting this value will improve performance for very large volume installations (>100 cert/s). 
# For normal installations, where extreme speeds and response times are not required, leave as default.
# Value is milliseconds.
# Default: 1000 (1 second)
# Possible values -1 (no caching) to 9223372036854775807 (2^63-1 = Long.MAX_VALUE).
#  If you want caching for an infinite time then set something high for example 157680000000 (5years). 
#eeprofiles.cachetime=157680000000
#eeprofiles.cachetime=-1

# Set to a value for caching calls to getCertificateProfile and getCertificateProfileId/Name in StoreSession. This means that for Certificate profiles to be updated
# the cache time expires, an "Edit profile" or server restart is done, or flushProfileCache is called on StoreSession. 
# This cache works fine in a single server environment. In a multi server (clustered) environment, 
# this can be used to disable the check if a profile has been edited on another node, so the profile must be edited on all nodes, 
# or nodes caches flushed after editing on one node.
# Setting this value will improve performance for very large volume installations (>100 cert/s). 
# For normal installations, where extreme speeds and response times are not required, leave as default.
# Value is milliseconds.
# Default: 1000 (1 second)
# Possible values -1 (no caching) to 9223372036854775807 (2^63-1 = Long.MAX_VALUE).
#  If you want caching for an infinite time then set something high for example 157680000000 (5years). 
#certprofiles.cachetime=157680000000
#certprofiles.cachetime=-1

# Set to a value for caching calls to getPublisher and getPublisherId/Name in StoreSession. This means that for Publishers to be updated
# the cache time expires, an "Edit publisher" or server restart is done, or flushPublisherCache is called on StoreSession. 
# This cache works fine in a single server environment. In a multi server (clustered) environment, 
# this can be used to disable the check if a profile has been edited on another node, so the profile must be edited on all nodes, 
# or nodes caches flushed after editing on one node.
# Setting this value will improve performance when publishing a lot. 
# For normal installations, where extreme speeds and response times are not required, leave as default.
# Value is milliseconds.
# Default: 1000 (1 second)
# Possible values -1 (no caching) to 9223372036854775807 (2^63-1 = Long.MAX_VALUE).
#  If you want caching for an infinite time then set something high for example 157680000000 (5years). 
#publisher.cachetime=157680000000
#publisher.cachetime=-1

# Set to a value for caching calls to loadGlobalConfiguration. This means that for globalConfiguration to be updated
# the cache time expires, an "Edit configuration" or server restart is done, or flushGlobalConfigurationCache is called on RAAdminSession.
# This cache works fine in a single server environment. In a multi server (clustered) environment, 
# this can be used to disable the check if globalconfiguration has been edited on another node, so the configuration must be edited on all nodes, 
# or nodes caches flushed after editing on one node.
# Setting this value will improve performance for very large volume installations (>100 cert/s). 
# For normal installations, where extreme speeds and response times are not required, leave as default.
# Value is milliseconds.
# Default: 30000 (30 seconds)
# Possible values -1 (no caching) to 9223372036854775807 (2^63-1 = Long.MAX_VALUE).
#  If you want caching for an infinite time then set something high for example 157680000000 (5years). 
#globalconfiguration.cachetime=157680000000
#globalconfiguration.cachetime=-1

# Set to a value for caching calls to update authorization tree, i.e. load access rules and admin groups. This means that access rules will be cached until
# the cache time expires, cache is reset by modifying roles or server restart is done, or flushAuthorizationCache is called on AuthorizationSessionBean.
# This cache works fine in a single server environment. In a multi server (clustered) environment, 
# this can be used to disable the check if access rules has been edited on another node, so the configuration must be edited on all nodes, 
# or nodes caches flushed after editing on one node.
# Setting this value will improve performance for very large volume installations (>100 cert/s). 
# For normal installations, where extreme speeds and response times are not required, leave as default.
# Value is milliseconds.
# Default: 30000 (30 seconds)
# Possible values -1 (no caching) to 9223372036854775807 (2^63-1 = Long.MAX_VALUE).
#  If you want caching for an infinite time then set something high for example 157680000000 (5years). 
#authorization.cachetime=157680000000
#authorization.cachetime=-1

# InternalKeyBinding object caching gets updates from database when a InternalKeyBinding object is stale.
# During this fetch, the currently cached InternalKeyBinding object will continue to be used.
# This cache can never be completely disabled to ensure that an activated InternalKeyBinding object
# is kept in the active state until removed or changed in the database.
# Setting this value will improve performance for very large volume installations (>50 cert/s). 
# For normal installations, where extreme speeds and response times are not required, leave as default.
# Default: 10000
# Possible values 0 (no caching, but keeps activated) to 9223372036854775807 (2^63-1 = Long.MAX_VALUE).
#  If you want caching for an infinite time then set something high for example 157680000000 (5years). 
#internalkeybinding.cachetime=157680000000
#internalkeybinding.cachetime=0
