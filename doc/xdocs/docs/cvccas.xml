<?xml version="1.0"?>
<document>

  <properties>
    <title>CVC CAs</title>
  </properties>

<body>
  <section name="Features">
    <p>
    Using EJBCA you can set up a complete infrastructure for CVC CAs with:
    <ul>
      <li>Country CVCCA</li>
      <li>Domestic DVs (document verifier)</li>
      <li>Foreign DVs</li>
      <li>Inspection systems (IS)</li>
      <li>Authentication Terminals (AT)</li>
      <li>Signature Terminals (ST)</li>
    </ul> 
    </p>
    You can also set up a Country Signing CA, which is a regular X.509 CA. 
    <p>
    EJBCA supports RSA and ECC keys in CV certificates with the following algorithms:
    <ul>
      <li>SHA1WithRSA - id-TA-RSA-v1-5-SHA-1</li>
      <li>SHA256WithRSA - id-TA-RSA-v1-5-SHA-256</li>
      <li>SHA1WithRSAAndMGF1 - id-TA-RSA-PSS-SHA-1</li>
      <li>SHA256WithRSAAndMGF1 - id-TA-RSA-PSS-SHA-256</li>
      <li>SHA1WithECDSA - id-TA-ECDSA_SHA_1</li>
      <li>SHA224WithECDSA - id-TA-ECDSA_SHA_224</li>
      <li>SHA256WithECDSA - id-TA-ECDSA_SHA_256</li>
    </ul>
    </p>
    <p>
    Using the complementary project <a href="http://www.signserver.org/">SignServer</a> you can set up a clustered Document Signer.
    </p> 
  </section>
  
  <section name="Creating CVCAs and DVs">
  <p>When creating a CVC CA there are three CA Reference fields in the standard. In EJBCA these are mapped to a DN structure to
  have common handling in EJBCA. The mapping is:
  <ul>
    <li>Country = C</li>
    <li>Mnemonic = CN</li>
  </ul>
  For example when creating a country CVCA you select type CVC in the create CA page and enter a 'Subject DN' like: C=SE,CN=TESTCVCA.
  For the CVCA you select 'Signed by=Self Signed' and 'Certificate Profile=ROOTCA'.
  </p>
  <p><i>Note that EJBCA only validates that country codes consist of two characters with value A-Z to facilitate testing with &quot;fake&quot; countries!</i></p>
  <p>To create a DV you select 'Signed by=Name of CVCCA' and 'Certificate Profile=SUBCA'.</p>
  <p>You can import a CVCA certificate from another country as an 'External CA' using 'Edit Certificate Authorities->Import CA certificate'. 
  When a CA has been imported, this CA certificate can authenticate CVC requests from foreign DVs.</p>
  </section>

  <section name="CVC Sequence">
  <p>The sequence in the holder reference of EAC CVC certificates should identify a public key. For CAs created and managed by EJBCA this sequence is
  normally an automatic property in the CA token. It starts with 00001 and is increased when new keys are generated (renew CA with checkbox to renew keys checked).
  <br/>
  You can also set a specific value for the initial sequence, which will then be increased when renewing keys, or you can change the sequence at any time. 
  See section about Key sequence in User guide for more information. 
  </p>
  <p>For entity (IS, DV, AT and ST) requests that are received, the sequence in the issued certificates are taken from the request. The entity knows best 
  how to index it's keys.
  </p>
  </section>
  
  <section name="Terminal Types">
  <p>EJBCA supports certificate hierarchies for Authentication (AT) and Signature Terminal (ST) end-entities, in addition to those with Inspection Systems (IS). Those roles are new in EAC 2.10.
  To use AT or ST certificates please create certificate profiles with the "<code>Terminal Type</code>" appropriately configured for your CAs and end-entities.
  The default mode is IS, so if there are no ATs or STs then you do not need to configure the Terminal Type setting.</p>
  </section>
  
  <section name="EAC roles">
  <p>
  <ul>
  <li>When issuing a CV certificate using a Root CA profile the EAC role will be CVCA.</li>
  <li>When issuing a CV certificate using a Sub CA profile the EAC role will be DV-D if the country is the same as the country of the CVCA and DV-F if the country is not the same as the CVCA.</li>
  <li>When issuing a CV certificate using an End Entity profile the EAC role will be IS (or AT or ST if one of those terminal types is being used).</li>
  </ul>
  </p>
  <p>In a certificate hierarchy with the ST terminal type, the role of the DV is controlled by the "Signature Terminal DV role" setting in the profile. It can be either "Accreditation Body" or "Certification Service Provider".</p>
  </section>
  
  <section name="EAC access rights">
  <p>
  You can configure in the certificate profile which EAC access rights will be used for issued certificates. There are two configurable access rights, read access to DG3 and to DG4. Combinations can be selected by holding down <code>Ctrl</code> while clicking the items.
  </p>
  <p>Since EAC 2.10 there are additional access rights which are used by Authentication Terminals and Signature Terminals. These are shown instead when selecting one of those terminal types.</p>
  </section>
  
  <section name="Document verifiers (DV)">
  <p>
  You create domestic DVs as simply as creating a SubCA to your CVCA, using a SubCA certificate profile.
  </p>
  <p>
  You can sign foreign DVs by treating them as regular End Entities. Simply create an end entity and choose a SubCA certificate profiles when adding the end entity.
  You can then process the certificate requests received by the foreign DV as a regular end entity certificate request: 
  </p>
  <ul>
  <li>Using the public web GUI</li>
  <li>Using the WS cli, clientToolBox CvcWsRaCli</li>
  <li>Using the WS-API cvcRequest method from your own client</li>
  </ul>
  <p>
  You can also create foreign DVs as external SubCAs, but a benefit of handling foreign DVs as end entities is that you can process and renew them using the same WS-API as you can use for inspection systems. 
  </p>
  <p>You can create a DV to be signed by a foreign CVCA by creating a new CA and selecting 'Signed By=External CA'.
  You need the CVCA certificate of the foreign CVCA to create the request to be sent.
  When creating this CA a self-signed CV certificate request is created.
  </p>
  <p>You can at any time create a CV certificate request from a DV by going into 'Edit Certificate Authorities' and click 'Make Certificate Request'. 
  This generates a CSR created by the CAs keystore. When receiving the signed certificate back, you can feed that to your IS-system. There is no need (or way)
  to import it into EJBCA.
  </p>
  <p>
  You can renew a DV by going into 'Edit Certificate Authorities' and click 'Renew CA'. By uploading the CA certificate supposed to sign the 
  certificate, you can get a new CSR created. You can import the received certificate by clicking 'Receive Certificate Response'. 
  You only have to (or can) import one issued certificate to make your DV operational. If you get a DV signed by multiple CVCAs you can distribute the other, than the 'main', DV certificate to the IS's (or AT or ST) by other means. 
  <br/>
  By filling in the CA tokens password and checking the box 'Renew Keys' the DV will generate new keys.
  This works for both soft CA tokens and PKCS#11 CA tokens. The renewal CSR is not signed with the old keys, but that can be done manually. 
  </p>
  <p>DVs have short validity periods, and it may be good to have them automatically renewed. There is a service 'Renew CA Service' to 
  automatically renew CAs. The User's Guide contain more information about this service.
  </p>
  </section>
  
  <section name="Creating authenticated requests and link certificates">
  <p>You can sign CV certificate requests by your CVCA or DV by going to 'Edit Certificate Authorities', typing the name of your CA in the
  text field (same name as appears in the list above the text field) and then clicking on 'Sign Certificate Request'. You will be a chance to upload the
  CV certificate request to the CVCA, and you will get an Authenticated request back.
  This is required when sending certificate requests from your DVs to other member states and when creating CVCA link certificates.
  </p>
  <p>
  The renewing a DV and sending a request to another member state you can get the request automatically authenticated by signing the request with the DVs old keys.
  You can do this by first renewing the DV to create a new certificate request. Then you go into 'Sign Certificate Request' for the same DV and sign the request checking the
  checkbox 'Use previous key'. An authenticated request, authenticated with the DVs previous key will be returned.
  </p>
  <p>
  To create CVCA link certificates the same approach is done. First renew the CVCA (generating new keys), which creates a new self-signed CVCA certificate internally. 
  Download the new self-signed CVCA certificate (for example from Basic Functions). After this you can create a link certificate by typing the CVCAs name in the text field 
  in 'Edit Certificate Authorities' and clicking 'Sign Certificate Request'. Upload the new CVCA certificate and  
  select 'Use previous key' and 'Create link certificate'.
  </p>
  <p>
  The reason for this cumbersome and a bit clumsy way to create link certificates is that issuing a link certificate can actually be made to
  switch CA completely, new keys, new algorithms and new Country/Mnemonic. Therefore you can use this approach to create a link certificate from you
  old CVCA to a completely new one.
  </p>
  </section>
  
  <section name="Inspection Systems">
  <p>
  The best interface for enrolling IS's is the Web service API. There is a method cvcRequest that implements initial issuance and automatic renewal 
  of IS cvc requests.
  </p>
  <p>
  Enrollment processing logic using WS API is:
  <ul>
    <li>A new IS with no old certificate issued must be pre-registered, be in status NEW and use a password.</li>
    <li>An IS with status REVOKED or HISTORICAL can not be enrolled.</li>
    <li>If the request is an authenticated request and the IS have an old valid (in time) certificate (in the EJBCA database) that can verify the outer signature, a new IS certificate is automatically allowed to be enrolled.</li>
    <li>If the authenticated request can not be verified because the outer signature can not be verified at all (invalid signature or no verifying certificate in the EJBCA database), the request is rejected.</li>
    <li>If the authenticated request can not be verified because the outer signature can be verified but the verifying certificate is not valid, the user must be in status NEW and use a password.</li>
  </ul>
  The complete certificate chain is always returned, with the IS certificate in the first position, DV certificate in the second and CVCA certificate last.
  </p>
  <p>
  Revocation of an IS prohibits further issuance of certificates to that IS using the WS API.
  </p>
  <p>
  There is a simple command line client for testing which is under dist/ejbca-ws-cli/cvcwscli.sh. This can be used to make requests and to parse, print and verify requests and certificates.
  </p>
  </section>
  
  <section name="Authentication and Signature Terminals">
  <p>Please follow the same steps as in the previous section for Inspection Systems.</p>
  </section>

  <section name="Web Service API">
  <p>In the regular EJBCA WS-API there is a method for enrolling and renewing DVs and ISs:
  <a href="ws/org/ejbca/core/protocol/ws/client/gen/EjbcaWS.html#cvcRequest(java.lang.String, java.lang.String, java.lang.String)">cvcRequest</a>
  </p>
  <p>The process when a CVC request is received through the WS-API call is:
  <ul>
  <li>Look up if there exists a user with the specified username.</li>
  <li>If the user exists:</li>
	  <ul>
	  <li>If the user's status is revoked, the request is denied (AuthorizationDeniedException).</li>
	  <li>See if the user have old certificates.</li>
	  <li>If there are old certificates and the request is an authenticated request (with outer signature):</li>
	  	<ul>
	  	<li>If the request uses the same public key as the old certificate the request is denied (AuthorizationDeniedException).</li>
	  	<li>If the old certificate can verify the request but the certificate is not valid we throw a CertificateExpiredException (in EJBCA 3.7.4 and earlier we tried to process the request as a non-authenticated request instead).</li>
	  	<li>If the request can be verified using one of the old <strong>valid</strong> certificates the request is automatically granted and users status is set to new and the password set to the given password.</li>
	  	<li>If the request can not be verified at all the request is denied (AuthorizationDeniedException).</li>
	  	</ul>
	  <li>If there are no old certificates we try to process the request as a non-authenticated request.</li>
  	  </ul>
  <li>If the user does not exist we try to process the request as a non-authenticated request.</li>
  <li>Processing the request as a non-authenticated request means that we try to authenticate using the password given, and that only works if the users status is NEW.</li>
  </ul>
  </p>
  <p>
  There are two more useful Web Service APIs that can be used from for example a SPoC in order to renew DVs:  
  <a href="ws/org/ejbca/core/protocol/ws/client/gen/EjbcaWS.html#caRenewCertRequest(java.lang.String, java.util.List, boolean, boolean, boolean, java.lang.String)">caRenewCertRequest</a>
  and
  <a href="ws/org/ejbca/core/protocol/ws/client/gen/EjbcaWS.html#caCertResponse(java.lang.String, byte[], java.util.List, java.lang.String)">caCertResponse</a>
  </p>
  </section>

  <section name="Command line client">
  <p>there is a command line client using the WS-API. You can use this for reference and sample how to use the WS-API.
  </p>
  <p>The command line client have two functions:
  <ul>
  <li>cvcrequest - adds a new user and requests a CV Certificate.</li>
  <li>cvcgetchain - retrieves the last certificate chain for a user.</li>
  <li>cvcprint - used to parse and print CV Certificate and requests.</li>
  </ul>
  Type the command on the command line to get usage information. 
  </p>
  <source>
ejbca> cd dist/clientToolBox
ejbca/dist/clientToolBox> ./ejbcaClientToolBox.sh CvcWsRaCli
Usage: cvcrequest cvcgetchain cvcprint cvcpem
  
ejbca/dist/clientToolBox> ./ejbcaClientToolBox.sh CvcWsRaCli cvcrequest
Usage : cvcrequest &lt;username&gt; &lt;password&gt; &lt;subjectdn&gt; &lt;sequence&gt; &lt;caname&gt; &lt;signatureAlg&gt; ...
...
  
ejbca/dist/clientToolBox> ./ejbcaClientToolBox.sh CvcWsRaCli cvcprint
Usage : cvcprint &lt;filename&gt; [verifycert]
...
  </source>
  
  <subsection name="CLI authentication and privileges"> 
  <p>
  The CLI uses client certificate authentication, and as such is allowed to perform administrative tasks in EJBCA as long as your
  client certificate has the correct RA administrator privileges in EJBCA.<br/>
  To issue certificates for a request, an end entity must first be added in EJBCA. Unauthenticated requests entered using the CLI is authenticated using a one-time password set during entity registration.
  <br/>
  Authenticated requests however are verified and granted or rejected based on the verification of the outer signature on the request. 
  If an end entity already exists, and have a previously issued certificate, the previous certificate can authenticate the request and automatically grant it.
  <br/>For DV requests, authenticated with a CVCA certificate, the CVCA certificate instead of a previously issued certificate can authenticate the request. 
  </p>
  </subsection>
  
  <subsection name="CLI examples"> 
  <p>
  The command line interface is part of the client tool box. First you have to build the client tool box (that can be used from any remote computer):
  </p>
  <source>
ant clientToolBox
cd dist/clientToolBox  
  </source>  
  <p>
  <strong>1.</strong><br/>
  Example command to receive a request from a foreign DV could look like:
  </p>
  <source>
./ejbcaClientToolBox.sh EjbcaWsRaCli edituser dv-de foo123 false "CN=dvca,C=DE" NULL NULL CVCAPK 1 USERGENERATED NEW DV DV  
  </source>  
  <source>
./ejbcaClientToolBox.sh CvcWsRaCli cvcrequest dv-de foo123 "CN=dvca,C=DE" SE001 SHA256WithRSA 2048 false dedv
  </source>
  <p>
  Where your CVCA is called CVCAPK in EJBCA and uses algorithm SHA256WithRSA with 2048 bit keys.<br/>
  Where an End entity profile, DV, is created with CN and C as required DN fields, and DV as available certificate profiles.<br/>
  Where a Certificate profile, DV, is created of type SubCA.<br/>
  Where the received request is stored in a file 'dedv.cvreq'.
  </p>
  <p>The first command adds the end entity in EJBCA and only has to be made the first time. foo123 is the one-time password set to authenticate the request.
  </p> 
  <p>
  If the request is an authenticated request signed by a CVCA and that CVCA has been imported in EJBCA (Edit Certificate Authorities->Import CA certificate), the request will be verified and granted.
  For authenticated request the one-time password is not used. 
  </p>
  <p>
  <strong>2.</strong><br/>
  An example command to generate keys and a request for an IS using SHA256WithECDSA and secp256r1 curve:
  </p>
  <source>
./ejbcaClientToolBox.sh EjbcaWsRaCli edituser issecp foo123 false "CN=ISSECP,C=SE" NULL NULL DVCA 1 USERGENERATED NEW IS IS
  </source>
  <p>This command adds the IS as end end entity in EJBCA. It only has to be done the first time, or if the IS previous certificates expire.
  When using authenticated requests these are used instead of the one-time password, but if the previous certificate expires, a new one-time password is
  needed to authenticate the request.
  </p> 
  <source>
./ejbcaClientToolBox.sh CvcWsRaCli cvcrequest issecp foo123 "C=SE,CN=ISSECP" 00005 SHA256WithECDSA secp256r1 true issecp
  </source>
  <p>
  Where your DV is called DVCA in EJBCA and uses algorithm SHA256WithECDSA with secp256r1 curve.
  Where an End entity profile, IS, is created with CN and C as required DN fields, and IS as available certificate profiles.<br/>
  Where a Certificate profile, IS, is created of type EndEntity.<br/>
  Where the generated request is stored in a file 'issecp.cvreq', the generated private key in 'issecp.pkcs8'.<br/>
  The issued IS certificate is stored in file 'issecp.cvcert'.
  </p> 
  <p>
  If the request is an authenticated request signed by a CVCA and that CVCA has been imported in EJBCA, the request will be verified and granted. 
  </p>
  <p>
  To create an authenticated request for this user you can issue the following command, which authenticates the new request with the old key and certificate. 
  </p>  
  <source>
./ejbcaClientToolBox.sh CvcWsRaCli cvcrequest issecp foo123 "C=SE,CN=ISSECP" 00006 SHA256WithECDSA secp256r1 true issecpnew issecp.pkcs8 issecp.cvcert
  </source>
  <p>
  The request will be automatically granted (the password passed will be ignored) and the new certificate will be written to 'issecpnew.cvcert'.
  </p>  
  </subsection>
  
  </section>
    
  <section name="Importing CAs">
  <p>For test purposes you may receive a private key and a CV certificate for the CVCA trust point used by the passport manufacturer when creating 
  specimen passports. To test your process and inspection systems you can import a CVCA (with soft keystore) in EJBCA if you have a PKCS#8 private key and a CV certificate with the public key.
  </p>
  <p>bin/ejbca.sh ca importcvca
  </p>
  <p>
  Example import command using the given CV Certificate:
  </p>
  <source>
bin/ejbca.sh ca importcvca importcvca1 GO_CVCA_RSA2008.pkcs8 GO_CVCA_RSA2008.cvcert C=SE,CN=IMPCA1
  </source>
  <p>
  Example import command using the same private/public keys but generating a new certificate:
  </p>
  <source>
bin/ejbca.sh ca importcvca importcvca1 GO_CVCA_RSA2008.pkcs8 GO_CVCA_RSA2008.cvcert C=SE,CN=IMPCA1 SHA1WithRSA 365
  </source>
  </section>
  
  <section name="Using HSMs">
  <p>
  The EU policy surely requires that you use an HSM to protect the CAs signature keys. 
  Depending on the algorithms you choose you have different options and difficulties. Using PKCS#11 the Sun PKCS#11 provider only supports
  RSA with PKCS1 padding (SHA256WithRSA), and not PSS (SHA256WIthRSAAndMGF1). If you want to use the PSS algorithms you need to use the IAIK PKCS#11 provider.
  See the User's Guide for instructions how to use the IAIK PKCS#11 provider. 
  <br/>
  The same goes for ECC, check with your HSM vendor about support for ECC. 
  </p>
  <p>
  Currently tested HSMs are:
  <ul>
  <li>Utimaco</li>
  <li>SafeNet</li>
  <li>nCipher</li>
  </ul>
  </p>
  <p>There are four additional key properties (filled in the CAs token properties) when using a HSM controlling the use of the previous keys.
  <ul>
  <li>previousCertSignKey - this is the alias of the previous signature key, as opposed to 'certSignKey' which is the current signature key.</li>
  <li>previousSequence - this is the sequence identifying the previous signature key, as opposed to the current sequence that is held in the CA token.
  This sequence will replace the current sequence in the caRef field when signing a request with the CAs previous key.</li>
  <li>nextCertSigningKey - this is the alias of a new generated key on the HSM. When updating a CA signed by an external CA this is used to send a request, 
  but the CA is still active using the old key. When the certificate response is received this key is activate and moved to certSignKey/crlSignKey.</li>
  <li>nextSequence - this is the sequence identifying the next signature key.</li>
  </ul>
  Normally these properties are set completely automatically when you generate new keys from the Admin GUI. If keys are generated manually, or if there is 
  a problem these properties can be modified or set manually.
  </p>
  
  <subsection name="Generating keys">
  <p>
  Generating keys on an HSM can be done with the tool <i>ejbcaClientToolBox.sh PKCS11HSMKeyTool</i>.
  </p>
<source>
cd dist/clientToolBox
./ejbcaClientToolBox.sh PKCS11HSMKeyTool generate /etc/utimaco/libcs2_pkcs11.so secp256r1 signKey 1  
</source>
  <p>See User Guide for more general information about generating keys.
  For supported curves, see your HSM documentation. For example for Utimaco it can be found in chapter 8 of CS_AdminGuide.pdf.</p>
  <p>Note that the Java PKCS#11 provider may not support all curves that your HSM supports.</p>
  <p>To generate EC keys using the ejbcaClientToolBox.sh tool, a patch for JDK is needed due to a bug in JDK (see below).</p>
  <p>Note that generation command may be different for different HSMs, see the HSM section in the User Guide for more details. 
  For example on the SafeNet ProtectServer Gold you should use:</p>
<source>
./ejbcaClientToolBox.sh PKCS11HSMKeyTool generate /slot1.cfg secp256r1 signKey  
</source>
  
  </subsection>
  
  <subsubsection name="Generating keys using HSM tools">
  <p>Depending on your HSM you may be able to generate keys, and the needed self signed certificate associated with it using HSM tools. For example for the
  SafeNet ProtectServer you can see the HSM documentation in the EJBCA User Guide for an example how to generate ECC keys for EJBCA using the HSM tools.</p>
  </subsubsection>
  
  <subsection name="Using EC keys">
  <p>
  See <a href="adminguide.html#Using%20ECDSA%20with%20an%20HSM">Using ECDSA with an HSM</a> in the Admin Guide for some details and issues with HSMs and ECDSA. 
  </p>  
  </subsection>
   
  </section>

  <section name="PEM requests">
  <p>
  Processing certificate requests in the Admin-GUI of EJBCA can use wither binary or PEM format certificate requests.
  If you receive a binary request and want to convert it to PEM it is easy:
  <ol>
  <li>Base64 encode the request, for example with openssl base64 -in MY.cvreq -a -out MY.cvreq.pem.</li>
  <li>Add -----BEGIN CERTIFICATE REQUEST----- in the beginning of the file. </li>
  <li>Add -----END CERTIFICATE REQUEST----- in the end of the file. </li>
  </ol>
  Example:
  </p>
  <source>
-----BEGIN CERTIFICATE REQUEST-----
fyGCAkd/ToIBPV8pAQBCDVNFQ1ZDQVBLMDAwMDF/SYIBFQYKBAB/AAcCAgIBAoGC
AQDJuBLa1iFXD7WWK6614RvtmiZpgFXiTWkznp5MfusJuNqBuz46zeFAIJcerEtK
xcHtbOppA5U2FwOtqit0yhkg2XLTEf9zh5ewchSGWujG9yY77BPXfLg3a3iwVyBW
sED4z4L71hfvByTtkBpz90BFjwMUsiSzkuRwM/2PeThJNm5yDZVjLNFfN7Vdibi6
7PRh77oQkofk/FvMNVa60u6RsT1urJdM7+5mCvGOs0KoWzFMCdm3rZrIIvWmQBSx
MPRL42AVDgY/G7df27YMHJZ6psnEYC6n30yw91BFnzhqmDem4xugRnpzq1z0RqFM
YabWe8NsIBk/k6bFXcheCiqDggMBAAFfIA1DWkRWVEVTVFNFMDAwXzeCAQBqi1o4
HexB3Mfx5cnjCaRw8qPsC3zxw+bRXB3t1Y1pzA/Ely0HL8/y/SYpXKIs4DtZpCDI
R4zKDSK3jkv914oVMpM3DqlFdLqY4aAHV4FN5+6BKvbGYZEfips1ba8rPZETLzci
vKljIrXbf0fVSNhhnCAfM9DxKrlxZP10mLb0cWs5JSGjA2i0DlH18zKKteAOd8gy
htgSjlz2FnisHnIUlHS1dlLIFABDfbvNS9+WTzNN8JlFi37QpSC+C5Xt8Y4NnGiX
dMDaR1l15Vn6mNsw9lYaAcIj/EOlZcGocnVXAlhy3MkWk0ue85VbvwgPAfDP1AEF
8JcqQ6xN7ULMh8xW
-----END CERTIFICATE REQUEST-----
  </source>
  </section>

  <section name="SPOC PKI">
  <p>The SPOC CA is a regular X.509 CA and is configured as such, following the profiles of the SPOC specification (CSN 369791:2009).</p>
  <p>The only thing in the specification of the SPOC CA that requires configuration is two private <i>Extended Key Usages</i> that are defined in the standard.
  </p>
  <subsection name="EJBCA 4.0 and later">
  <p>From EJBCA 4.0 these key usages are standard and can be selected in certificate profiles. 
  </p>
  </subsection>
  <subsection name="EJBCA 3.11 and earlier">
  <p>
	For EJBCA 3.11 and earlier you need to configure <strong>conf/extendedkeyusage.properties</strong> and add the two new key usage OIDs.</p>
  <source>
extendedkeyusage.oid.23 = 1.2.203.7064.1.1.369791.1
extendedkeyusage.name.23 = CSN369791-TLS-CLIENT 
extendedkeyusage.oid.24 = 1.2.203.7064.1.1.369791.2
extendedkeyusage.name.24 = CSN369791-TLS-SERVER</source>

  <p>If the numbering have changed (i.e. other standard extended key usages have been added) since the publication of this sample, just make sure the numbers (23 and 24)
  are changed to follow consecutive numbering in the file.</p>
  <p>After this change you simply have to re-deploy ejbca (ant clean; ant deploy) and they will show up as selectable values in <i>Certificate Profiles</i> in the EJCBA admin GUI.</p>
  <p>A SPOC client should use "Client Authentication, CSN369791-TLS-CLIENT" and a SPOC server should use "Server Authentication, CSN369791-TLS-SERVER".</p>
  </subsection>
  </section>
  
</body>
</document>

