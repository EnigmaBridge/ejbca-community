<?xml version="1.0"?>
<document>

  <properties>
    <title>OCSP Installation</title>
  </properties>

<body>
  <section name="OCSP Installation">
  <p>
  This section contains installation instructions for running EJBCA as an external OCSP responder where a separate key pair
  and certificate is used to sign OCSP responses on behalf of a CA.
  By default, each CA can sign OCSP responses out of the box using the CA key pair.
  See 'OCSP Architecture' to determine if you also need an external OCSP responder.
  </p><p>
  If you are not using the responder with EJBCA you can skip the section about building and configuring EJBCA.
  </p>
  <subsection name="Building and configuring the Responder">
<p>
After finishing installing the VA as instructed in <a href="installation-va.html">Standalone VA installation</a>, continue with the following steps to complete the installations:
</p>
<p><b>5. On the EJBCA VA</b> - Accessing the Admin GUI</p>
<p>
The OCSP responder has the same Admin GUI as the CA, so you can manage all your Crypto Tokens and Key Bindings using the Admin GUI (or the CLI see below).
In an OCSP responder you normally only use a few functions of the Admin GUI, although all of them are available.
The important functions for an OCSP responder are:
</p>
<ul>
<li>Crypto Tokens</li>
<li>Internal Key Bindings</li>
</ul>
<p>In order to access the Admin GUI there are a few pre-requisites:</p>
<ol>
<li>TLS keystores available as p12/tomcat.jks and p12/truststore.jks (copies from the EJBCA CA), to be deployed with deploy-keystore and web-configure (may require configuration 
of keystore password in conf/web.properties).</li>
<li>A Management CA certificate imported (the certificate of the CA that issues administrator certificates).</li>
<li>Administrators configured with access rules.</li>
</ol>
<p>
If you only want to set up a super administrator, the initial super administrator access rule is automatically set up during initial startup (see database tables AdminGroupData and AccessRulesData).
You can run the following commands to import a Management CA certificate and add a SuperAdmin, that has a certificate with "CN=SuperAdmin" issued from this CA (this will create a record in database table AdminEntityData).
</p>
<source>
bin/ejbca.sh ca importcacert ManagementCA /home/user/adminca1.pem
bin/ejbca.sh roles addadmin "Super Administrator Role" ManagementCA WITH_COMMONNAME TYPE_EQUALCASE SuperAdmin
</source>
<note>
If you do not want to import the administrator certificate into EJBCA you can configure "web.reqcertindb=false" in conf/web.properties, otherwise the administrator certificate must be present in the database
(can be imported using the CLI). 
</note>

<p><b>6. On the EJBCA CA</b> - Create the OCSP responder CA</p>
<p>
If the CA that is meant to be the OCSP responder  does not already exist, create it now. All certificate profiles for certificates that should 
be available to the OCSP responder should reference this publisher. To configure this you must be a super administrator.
</p>
<p><b>7. On the EJBCA VA</b> - Set up the responder signing keys</p>
<p>
If you haven't done that already, import the CA that is meant to be the OCSP responder from the EJBCA CA.
</p>
<p>
The keys used to sign the OCSP response are referenced through Crypto Tokens (that could be either soft or HSM/PKCS#11 based).
There should be one key for each CA, and the each CA the responder answers for an OCSP signing certificate must be issued.
<br/>
The certificate profile could be the same for all issued OCSP signing certificates.
</p><p>
To issue OCSP signer certificate from EJBCA you define a new certificate profile and use 'OCSPSIGNER (FIXED)' as template
(clone). This certificate profile is like a normal end entity profile but with the following key usages:
</p>
<source>
- Key Usage: Digital Signature
- Extended Key Usage: OCSPSigner
</source>
<p>
Configure the newly created certificate profile to use the OCSP publisher defined above.
You also need to create a new End Entity Profile to use the new Certificate Profile.
You should then create a user for each CA using this certificate profile. Use the token type "User generated".
</p><p>
</p>
<note>
The OCSP responders certificate(s) AND the CA certificate(s) need to be published from the CA to the 
OCSP responder. For the CA you do this by setting the CRL publisher to the OCSP publisher.
</note>
</subsection>
<subsection name="Workflow for setting up a new OCSP signer">
<p>This section requires the previous one to be completed first.</p>
<subsubsection name="Using VA Publisher (Enterprise feature only)">
<ol>
<li>Go to AdminGUI of OCSP -> Crypto Tokens and create a new Crypto Token (unless you want to reuse an existing).</li>
<li>Go to AdminGUI of OCSP -> Crypto Tokens -> <i>Your created Crypto Token</i> and generate a new key pair.</li>
<li>Go to AdminGUI of OCSP -> Internal Key Bindings -> OcspKeyBindings tab and create a new OcspKeyBinding the references the Crypto Token and key pair.</li>
<li>Go to AdminGUI of OCSP -> Internal Key Bindings and create a Certificate Signing Request for your new OcspKeyBinding. Save this file.</li>
<li>Go to PublicWeb of CA -> Create Certificate from CSR -> Use the credentials for issuing an OCSP signing certificate and upload the CSR.</li>
<li>...(CA publishes new OCSP signing certificate to OCSP instance)...</li>
<li>Go to AdminGUI of OCSP -> Internal Key Bindings and click "Update" for your new OcspKeyBinding. This will find the published certificate
by matching the key pair with the certificate.</li>
<li>Go to AdminGUI of OCSP -> Internal Key Bindings and click "Enable" for your new OcspKeyBinding to start processing OCSP responses with it.</li>
</ol>
</subsubsection>
<subsubsection name="Using EJBCA Peer System (Enterprise feature only)">
<p>These instructions assume that there already is a Peer System connecting the CA and the VA machines, that the connection is already tested 
and that there is already a remote identity representing the CA among the "Incoming Connections" in the VA's Peer Systems. For setup of Peer Systems see 
<a href="userguide.html#Managing EJBCA Peer Systems">Managing EJBCA Peer Systems</a>.</p>
<ol>
<li>Go to AdminGUI of OCSP -> Crypto Tokens and create a new Crypto Token (unless you want to reuse an existing).</li>
<li>Go to AdminGUI of OCSP -> Crypto Tokens -> <i>Your created Crypto Token</i> and generate a new key pair.</li>
<li>Go to AdminGUI of OCSP -> Internal Key Bindings -> OcspKeyBindings tab and create a new OcspKeyBinding that references the Crypto Token and key pair.</li>
<li>Go to AdminGUI of OCSP -> Peer Systems -> Click on "Modify Authorization" for the peer connector representing the CA and set access rules for the newly 
created OcspKeyBinding ("view only" or "Renew certificate").</li>
<li>Go to AdminGUI of OCSP -> Peer Systems -> Click "Manage" for the peer connector representing the CA -> Remote Key Bindings, fill in the credentials for 
an OCSP signing certificate in the newly created OcspKeyBinding and click "Issue Signing Certificate".</li>  
</ol>
</subsubsection>
</subsection>
<subsection name="Workflow for renewal of an OCSP signer">
<subsubsection name="Using VA Publisher (Enterprise feature only)">
<ol>
<li>[Optional] Go to AdminGUI of OCSP -> Internal Key Bindings and create "New keys" for your OcspKeyBinding.</li>
<li>Go to AdminGUI of OCSP -> Internal Key Bindings and create a Certificate Signing Request for your OcspKeyBinding. Save this file.</li>
<li>Go to PublicWeb of CA -> Create Certificate from CSR -> Use the credentials for issuing an OCSP signing certificate and upload the CSR.</li>
<li>...(CA publishes new OCSP signing certificate to OCSP instance)...</li>
<li>Go to AdminGUI of OCSP -> Internal Key Bindings and click "Update" for your new OcspKeyBinding. This will find the published certificate
by matching the key pair with the certificate.</li>
<li>Go to AdminGUI of OCSP -> Internal Key Bindings and click "Enable" for your new OcspKeyBinding to start processing OCSP responses with it.</li>
</ol>
</subsubsection>
<subsubsection name="Using EJBCA Peer System (Enterprise feature only)">
<ol>
<li>Go to AdminGUI of OCSP -> Peer Systems -> Click "Manage" for the peer connector representing the CA -> Remote Key Bindings -> Click "Renew" 
for your OcspKeyBinding.</li>
</ol>
</subsubsection>
</subsection>
<subsection name="Using the CLI">
<p>
You can also use the local CLI to do the operations described above. The CLI contains on-line help when you run commands without parameters.
</p>
<source>
bin/ejbca.sh cryptotoken
</source>
<source>
bin/ejbca.sh keybind
</source>
</subsection>
<subsection name="No Password in Memory">
<p>
To avoid that passwords are kept in memory, use manual activation of your referenced Crypto Tokens.
</p>
</subsection>
<subsection name="Database Index">
<p>
As your OCSP database grows with revoked, and active, certificates you will need database indexes to maintain good performance.
See the file doc/sql-scripts/create-index-ejbca.sql (section for certificatedata) for indexes needed for CA and OCSP operations.
</p>
</subsection>
<subsection name="Setting the Default Responder">
<p>
The default responder is the valid CA or OCSP Keybinding set to sign responses to requests that come in for unknown issuers.
</p>
<p>
For all unknown issuers the default responder will reply with an 'UNKNOWN' response. For external CAs without dedicated OCSP keybindings the default responder will perform standard OCSP lookups. 
Be aware that this may cause unexpected behavior in the case of where an inactivated (due to responder certificate being 
revoked or expiring) keybinding exists, and that keybinding has a different behavior in regards to unknown certificates than the default responder. 
</p>
<p>
If no default responder is defined, is defined incorrectly, or the chosen responder doesn't have a certificate, the responder will reply
"Unauthorized" (as per RFC2560) with a null payload.  
</p>
<h5>Setting the Default Responder from the GUI</h5>
<p>
You can choose the default responder from the dropdown menu in the OCSP Internal Keybindings page in the GUI, which will show all valid CAs and keybindings. It will also provide the option to 
choose none and allow retaining an old but unmatched value imported via migration from configurations earlier than version 6.2.4</p>

<h5>Setting the Default Responder from the CLI</h5>
<p>The default responder can also be chosen from the CLI with the following command. </p>
<source>
bin/ejbca.sh ocsp setdefaultresponder &lt;DN&gt;
</source>
<p>To see a list of valid responders, run the command with the <i>--help</i> switch. This will also show the current chosen responder.</p>
</subsection>
<subsection name="A CLI example for setting up a responder">
<p>In this sample scenario we have a CA (can be off line), and we will set up an OCSP responder using the CLI that answers for this CA. This example starts when you have a basic installed EJBCA instance that you can use CLI commands on (no CA needed).</p>
<p>The order of events are as the workflow above, with an extra step of importing the CA certificate:
<ol>
<li>Import the CA certificate (of OCSP_CA) as an 'External CA' in the OCSP responder.</li>
<li>Create a Crypto Token and generate the OCSP responders signing key.</li>
<li>Create an OCSP Key Binding, which is the configuration of the OCSP responder answering queries.</li>
<li>Generate a CSR for the OCSP Key Binding, sending the CSR to the External CA and getting a signed OCSP signer certificate back.</li>
<li>Import the OCSP signer certificate and activate the OCSP Key Binding.</li>
</ol>
</p>
<p>Lets start the commands...our External CA is this example we call OCSP_CA and it has DN 'CN=OCSP_CA'.</p>
<source>
bin/ejbca.sh ca importcacert OCSP_CA /home/tomas/tmp/OCSP_CA.pem
bin/ejbca.sh cryptotoken create OCSPCryptoToken foo123 true SoftCryptoToken true
bin/ejbca.sh cryptotoken generatekey OCSPCryptoToken ocspsignkey RSA2048
bin/ejbca.sh keybind create OCSP_CA_KeyBinding OcspKeyBinding DISABLED null OCSPCryptoToken ocspsignkey SHA256WithRSA -nonexistingisgood=false -includecertchain=true
bin/ejbca.sh keybind gencsr OCSP_CA_KeyBinding csr.pem

(send the csr to OCSP_CA and get signed certificate back)

bin/ejbca.sh keybind import OCSP_CA_KeyBinding ocsp.pem 
bin/ejbca.sh keybind setstatus OCSP_CA_KeyBinding ACTIVE

(now your OCSP key binding is active and can be used to sign OCSP queries)
</source>
<p>
Now you can test the responder by querying for status of the OCSP signer certificate itself.
</p>
<source>
openssl ocsp -issuer OCSP_CA.pem -CAfile OCSP_CA.pem -cert ocsp.pem -req_text -url http://localhost:8080/ejbca/publicweb/status/ocsp
OCSP Request Data:
    Version: 1 (0x0)
    Requestor List:
        Certificate ID:
          Hash Algorithm: sha1
          Issuer Name Hash: E4A38A2DB963CAA8EEDFE4FBD396EE1E9B82FC19
          Issuer Key Hash: EF9C1460AEEF978FCFD30A3E7B1A2CE0BF36F9AB
          Serial Number: 054C3D7EA9E92EA5
    Request Extensions:
        OCSP Nonce: 
            0410ED1DFBA35756BBBF033FABB4055166E0
Response verify OK
ocsp.pem: good
	This Update: Feb  5 12:58:43 2014 GMT
</source>
<p>
Get a certificate, received on file (qwe.pem), issued by the OCSP_CA.
We can feed certificates, as whitelist, to the responder in many different ways (it's a normal database). But before we import it to the OCSP responder, we can check status, 
which should be unknown (with the current configuration) when it is not present in the OCSP database.
</p>
<source>
openssl ocsp -issuer OCSP_CA.pem -CAfile OCSP_CA.pem -cert qwe.pem -req_text -url http://localhost:8080/ejbca/publicweb/status/ocsp
OCSP Request Data:
    Version: 1 (0x0)
    Requestor List:
        Certificate ID:
          Hash Algorithm: sha1
          Issuer Name Hash: E4A38A2DB963CAA8EEDFE4FBD396EE1E9B82FC19
          Issuer Key Hash: EF9C1460AEEF978FCFD30A3E7B1A2CE0BF36F9AB
          Serial Number: 5033A405556C4C26
    Request Extensions:
        OCSP Nonce: 
            0410CF2AA349C1EAF562650CE38FC9AD75B7
Response verify OK
qwe.pem: unknown
	This Update: Feb  5 13:00:51 2014 GMT
</source>
<p>
There is a standalone tool (in EJBCA Enterprise only) that you can use to import certificates received on file. 
The tool is called crlFetch. The most common way to feed the OCSP responder is to push certificates directly from the CA, in real time, using an EJBCA 'VA Publisher' (Enterprise feature only). 
In this example we will use the crlFetch tool though, as it works for completely off-line CAs.<br/>
Place the (qwe.pem) certificate in cert dir and run the command:
</p>
<source>
java -jar dist-crlFetch/crlFetch-0.9.jar
</source>
<p>
Now check status again. It should now be good:
</p>
<source>
openssl ocsp -issuer OCSP_CA.pem -CAfile OCSP_CA.pem -cert qwe.pem -req_text -url http://localhost:8080/ejbca/publicweb/status/ocsp
OCSP Request Data:
    Version: 1 (0x0)
    Requestor List:
        Certificate ID:
          Hash Algorithm: sha1
          Issuer Name Hash: E4A38A2DB963CAA8EEDFE4FBD396EE1E9B82FC19
          Issuer Key Hash: EF9C1460AEEF978FCFD30A3E7B1A2CE0BF36F9AB
          Serial Number: 5033A405556C4C26
    Request Extensions:
        OCSP Nonce: 
            0410F767B9AE83322DBC8DE85783348C118F
Response verify OK
qwe.pem: good
	This Update: Feb  5 12:59:59 2014 GMT
</source>
<p>
There is a standalone tool (in EJBCA Enterprise only) that you can use to revoke/unrevoke certificates with, from issuerDN and serialNumber. 
The tool is called revoke.
Create the file revoke.txt serial and reason code:<br/>
5779143089661430822 6
<br/>
Run the command:
</p>
<source>
java -jar dist-revoke/revoke-0.9.jar "CN=OCSP_CA" &lt; revoke.txt
</source>
<p>
Now check status again. It should now be revoked:
</p>
<source>
openssl ocsp -issuer OCSP_CA.pem -CAfile OCSP_CA.pem -cert qwe.pem -req_text -url http://localhost:8080/ejbca/publicweb/status/ocsp
OCSP Request Data:
    Version: 1 (0x0)
    Requestor List:
        Certificate ID:
          Hash Algorithm: sha1
          Issuer Name Hash: E4A38A2DB963CAA8EEDFE4FBD396EE1E9B82FC19
          Issuer Key Hash: EF9C1460AEEF978FCFD30A3E7B1A2CE0BF36F9AB
          Serial Number: 5033A405556C4C26
    Request Extensions:
        OCSP Nonce: 
            041096D62CECE66549C45D798E88B4D03593
Response verify OK
qwe.pem: revoked
	This Update: Feb  5 13:10:10 2014 GMT
	Reason: certificateHold
	Revocation Time: Feb  5 13:09:48 2014 GMT
</source>
</subsection>

</section>

<section name="Automated renewal of an OCSP signer via CA's WebService (a.k.a. Re-keying)">
<note>
Re-keying as described below will change in a future version of EJBCA.
The CA will keep track of the OCSP responders certificates and order key renewal and update the responder's certificates
to avoid incoming traffic to the CA.
For now this is the way to do it.
</note>
<p>
Re-keying allows the OCSP responder to generate new signing keys and obtain a new certificate for these keys from the CA's WebService.
Re-keying is configured in the ocsp.properties configuration file.
The client authentication SSL certificate is configured as an AuthenticationKeyBinding in the AdminGUI (or using the EJB CLI). 
</p><p>
Re-keying can be either automatic or manual.
Automatic re-keying allows you to specify the maximum expiration period in seconds before the re-keying should happen
(i.e. you can set-up the OCSP responder to renew its keys and certificates when its current certificate is about to expire).
Manual re-keying allows you to trigger the renewal by sending a GET request to the OCSP responder (with the necessary parameters).
Manual re-keying is useful when a greater control on re-keying periods is desired.
Since manual re-keying can be done with external tools (like wget or curl), cron jobs can be set-up to trigger it at the desired time.
</p><p>
Both automatic and manual re-keying require that EJBCA CA web-service URL is defined.
The web-service URL should point to the EJBCA CA server which has issued the certificates for the OCSP responder.
If the URL is not defined, the re-keying won't be enabled.
</p><p>
OCSP responder acts as a registration authority when renewing keys with the EJBCA CA.
The OCSP responder uses an AuthenticationKeyBinding for SSL client authentication to the CA's web-service.
</p><p>
Since OCSP responder is acting as a registration authority, its certificate for authenticating (in the AuthenticationKeyBinding) to the EJBCA CA
web-service must have the key usage set to "Digital Signature" and "keyEncipherment" and extended key usage set to "Client Authentication".
It is also necessary to set-up the appropriate access rules on the CA side (either by creating a new RA role, or using
an existing one).
The role for the OCSP responder should have the right to view and edit the end entities (at least for all of the CA's
issuing the certificates for the OCSP responder, as well as for certificate profiles used by the OCSP responder's certificates).
</p><p>
For manual re-keying the GET request should contain the parameters "renewSigner" and "password".
The "renewSigner" parameter can be used to specify which OCSP keys should be renewed.
It can be either set to "all", which will renew all of the OCSP signer keys, or to a specific OCSP responder
certificate subject DN. The parameter specified here should be the OCSP's subject
DN, not the issuer's.
Password should be configured in the ocsp.properties file.
If the password is not set, manual re-keying will not be enabled.
</p><p>
Manual re-keying can further be limited by specifying the allowed originating IP addresses for the requests.
By default the re-keying is allowed only from the localhost (127.0.0.1) address.
Allowed IP addresses are configured in the ocsp.properties configuration file, and multiple addresses can be provided
by separating them with a semicolon (;).
</p><p>
The following two examples demonstrate the manual triggering of re-keying on the OCSP responder.
The first example triggers the re-keying for all of the OCSP signer keys, while the second one will trigger rekeying
for a specific signer (the one matching the subject DN of "CN=OCSP REsponder 123,O=PrimeKey Solutions AB,C=SE"):
</p>
<source>
wget http://va.example.com:8080/ejbca/publicweb/status/ocsp?renewSigner=all\&amp;password=foobar123
wget http://va.example.com:8080/ejbca/publicweb/status/ocsp?renewSigner=CN=OCSP\ Responder\ 123,\ O=PrimeKey\ Solutions\ AB,\ C=SE\&amp;password=foobar123
</source>
<p>
If a specific OCSP subject DN is provided, the OCSP responder will look amongst its keystores/HSM slots for matching
certificate and its associated keys.
If the specified subject DN is not found, an ERROR message will be output to the server log files specifying the
searched subject DN and the available subject DN's.
If you're having problems with manual re-keying when providing a specific subject DN, make sure to check the logs and
verify that the proper subject DN was specified for the "renewSigner" parameter.
Ordering of subject components matters.
You can also copy/paste the subject DN from the log to make sure the spelling and ordering is right (i.e. that it
matches with what can be found on-disk or in HSM).
</p><p>
For re-keying to work, the OCSP signer certificates need to be issued to separate end entities on the EJBCA CA
(i.e. you can't re-use the same end entity for multiple OCSP signer certificates for different CA's).
</p><p>
Be aware that the re-keying operation has not been tested on all of the application servers.
Some of the application servers may have problematic client web-service implementations.
The following application servers have been tested and confirmed to work as expected for OCSP signer re-keying:
<ol>
<li>JBoss 5.1.0.GA (jdk6)</li>
<li>JBoss EAP 5.1.2</li>
<li>JBoss 6.1.0.Final</li>
</ol>
</p>
</section>

<section name="Error handling">
<p>
If there is an error publishing to the OCSP database, the OCSP responder will be out of sync with the CA.
It is very important to re-synchronize the databases in that case.
Read about error handling and synchronization of the database in the
<a href="installation-va.html#Error%20handling">VA installation</a> guide.
</p>
  
  </section>

  <section name="Running several responders">
  <p>
Additional OCSP DataSources for publishers on the CA have to be added manually. The easiest way to do this
on JBoss is to clone the initially deployed OCSP DataSource JBOSS_HOME/server/default/deploy/ocsp-ds.xml
to JBOSS_HOME/server/default/deploy/ocsp2-ds.xml and change 
  </p>
<source>
      &lt;jndi-name>OcspDS&lt;/jndi-name>
      &lt;connection-url>jdbc:mysql://ocsp1.domain.org:3306/ejbca&lt;/connection-url>
</source>
  <p>to</p>
<source>
      &lt;jndi-name>Ocsp2DS&lt;/jndi-name>
      &lt;connection-url>jdbc:mysql://ocsp2.domain.org:3306/ejbca&lt;/connection-url>
</source>
  <p>
and configure an additional publisher to use this new DataSource 'java:/Ocsp2DS'.
  </p>
  <p>
An alternative approach for MySQL users is to use the tools for database replication. Either you could
replicate CertificateData from you master EJBCA database to slave-responders or you could publish
to a master OCSP responders database that in turn is replicated to the other responders. How to do it
is described in the mysql documentation. Depending on which which version you are using please read one
of the followings: <a href="http://dev.mysql.com/doc/refman/5.0/en/replication-howto.html">MySQL 5.0 Replication Howto</a> 
<a href="http://dev.mysql.com/doc/refman/5.1/en/replication-howto.html">MySQL 5.1 Replication Howto</a>
  </p>
  </section>


  <section name="Adding additional responders in a live environment">
  <p>
  There is no automated way of pushing all the certificates that has been published to
  existing OCSP responders. To duplicate an existing "source" OCSP database to a "target" OCSP database: 
  </p>
  <ol>
    <li>To create the tables in the target OCSP, start JBoss AS with OCSP deployed for the first time (and then stop the server before doing the next step).</li>
    <li>Add an additional DataSource for the target OCSP responder in EJBCA.</li>
    <li>Configure a new ValidationAuthorityPublisher (Enterprise feature only) in EJCBA that uses the target OCSP DataSource. Chose to only publish to queue to accumulate all changes during the cloning.</li>
    <li>Wait one hour and check that there is nothing in the publisher-queue of the source OCSP that is older than one hour.</li>
    <li>Do a MySQL dump from the source database to the target database or use the ClientToolBox DBCOPY-command.</li>
    <li>When the copy operation has finished, configure a new Republisher Service for the target's OCSP Publisher.</li>
    <li>Make sure that the queue that built up during the copy operation is now published to the target OCSP.</li>
    <li>Run the monitoring tool (ClientToolBox OCSPMon) to verify that the new OCSP is in sync.</li>
    <li>Start the new OCSP node and add it to the pool of OCSPs in your load balancer.</li>
  </ol>
  </section>


  <section name="Audit and Account Logging">
  <p>
There are three types of logs that can be generated by the OCSP responder.
</p><p>
<b>1.</b> The OCSP <i>service logs</i> using Log4j to the JBoss server.log. The JBoss server log is located in 
JBOSS_HOME/server/default/log/server.log and the logging is configured in JBOSS_HOME/server/default/conf/jboss-log4j.xml.
</p><p>
<b>2.</b> The OCSP <i>transaction log</i> can be used to log various information about ocsp-requests.
Transaction logging logs summary lines for all OCSP request/responses, which can be used for charging clients if you are running a commercial OCSP service.
<br/>To turn on transaction logs logs, copy ocsp.properties.sample to ocsp.properties and change:
</p>
<source>
#ocsp.trx-log = false
</source>
<p>to</p>
<source>
ocsp.trx-log = true
</source>
<p>
then uncomment the other lines below that starts with ocsp.trx-log.
Change the ocsp.trx-log-log-date line if you want to change how the time recorded in logging should be output.
The value should be on the same format as for javas DateFormat, information on valid configurations can be found <a href="http://javatechniques.com/blog/dateformat-and-simpledateformat-examples/">here</a>.
</p>
<source>
ocsp.trx-log-log-date = yyyy-MM-dd:HH:mm:ss
</source>
<p>
ocsp.trx-log-pattern is a pattern for use with ocsp.audit-order to replace constants with values during logging
For most purposes you will not need to change this string.
</p><p> 
Use ocsp.trx-log-order to specify what information should be logged and in what order. You can also configure what characters you want in between.
If you want your log to display all of the values available you only have to un-comment it. 
</p><p>
Available values for the transaction log are:</p><p>
LOG_ID, An integer identifying that starts from 1 and is increased for every received request.<br/>
SESSION_ID A random 32 Byte long String generated when the OCSP-responder is started.<br/>
STATUS, The status of the OCSP-Request. SUCCESSFUL = 0;MALFORMED_REQUEST = 1;INTERNAL_ERROR = 2;TRY_LATER = 3;SIG_REQUIRED = 5;UNAUTHORIZED = 6;<br/>
CLIENT_IP, IP of the client making the request.<br/>
REQ_NAME, The Common Name (CN) of the client making the request.<br/>
SIGN_ISSUER_NAME_DN, DN of the issuer of the certificate used to sign the request.<br/>
SIGN_SUBJECT_NAME, Subject Name of the certificate used to sign the request.<br/>
SIGN_SERIAL_NO, Certificate serial number of the certificate used to sign the request.<br/>
NUM_CERT_ID, The number of certificates to check revocation status for.<br/>
ISSUER_NAME_DN, The subject DN of the issuer of a requested certificate.<br/>
ISSUER_NAME_HASH, SHA1 hash of the issuer DN.<br/>
ISSUER_KEY, The public key of the issuer of a requested certificate.<br/>
DIGEST_ALGOR, Algorithm used by requested certificate to hash issuer key and issuer name.<br/>
SERIAL_NO, Serial number of the a requested certificate.<br/>
CERT_STATUS, The requested certificate revocation status.<br/>
REPLY_TIME, The time measured between when the request is received by the responder and when the response is sent. This time includes the time it takes to read the request bytes.<br/>
PROCESS_TIME, The time measured between when the request has been read by the responder and when the response is sent. This time starts after the request bytes have been read.<br/>
</p><p>
<b>3.</b> The OCSP <i>audit log</i> logs entire requests and responses. This can be useful when requests and responses are signed because the information can be used 
to verify requests and responses afterwards.
Audit logging is configured in the same way as transaction logging.
<br/>Valid values for audit logging are:</p><p>
LOG_ID, An integer identifying that starts from 1 and is increased for every received request.<br/>
SESSION_ID A random 32 Byte long String generated when the OCSP-responder is started.<br/>
OCSPREQUEST, The (hex encoded) byte[] ocsp-request that came with the http-request.<br/>
OCSPRESPONSE, The (hex encoded) byte[] ocsp-response that was included in the http-response.<br/>
</p><p>
Note that LOG_ID are of the same value in both trx log and audit log for any request. This means they can be cross referenced.
You can retrieve information from the transaction log and verify that the information is valid by using the audit Log.
  </p>
  
  <subsection name="Configuring output files for OCSP logging">
  <p>
For JBoss you can configure JBOSS_HOME/server/default/conf/jboss-log4j.xml to put the transaction and audit logs in separate files.
  </p>
  <source>
   &lt;appender name="OCSPTRANSACTION" class="org.jboss.logging.appender.RollingFileAppender">
     &lt;errorHandler class="org.jboss.logging.util.OnlyOnceErrorHandler"/>
     &lt;param name="File" value="${jboss.server.log.dir}/transactions.log"/>
     &lt;param name="Append" value="false"/>
     &lt;param name="MaxFileSize" value="500KB"/>
     &lt;param name="MaxBackupIndex" value="1"/>
     &lt;layout class="org.apache.log4j.PatternLayout">
       &lt;param name="ConversionPattern" value="%d %-5p [%c] %m%n"/>
     &lt;/layout>	    
   &lt;/appender>

   &lt;appender name="OCSPAUDIT" class="org.jboss.logging.appender.RollingFileAppender">
     &lt;errorHandler class="org.jboss.logging.util.OnlyOnceErrorHandler"/>
     &lt;param name="File" value="${jboss.server.log.dir}/audit.log"/>
     &lt;param name="Append" value="false"/>
     &lt;param name="MaxFileSize" value="500KB"/>
     &lt;param name="MaxBackupIndex" value="1"/>
     &lt;layout class="org.apache.log4j.PatternLayout">
       &lt;param name="ConversionPattern" value="%d %-5p [%c] %m%n"/>
     &lt;/layout>	    
   &lt;/appender>

   &lt;category name="org.cesecore.certificates.ocsp.logging.TransactionLogger">
         &lt;priority value="DEBUG"/>
         &lt;appender-ref ref="OCSPTRANSACTION"/>
   &lt;/category>

   &lt;category name="org.cesecore.certificates.ocsp.logging.AuditLogger">
         &lt;priority value="DEBUG"/>
         &lt;appender-ref ref="OCSPAUDIT"/>
   &lt;/category>   
  </source>
  <p>
For other application servers you can configure conf/log4j-<i>appserver</i>.xml. This configuration file will then be built into ejbca.ear.
  </p>
<note>
If you are using JBoss EAP 6 you need to have the property 'org.jboss.as.logging.per-deployment=true' if you use an application specific log4j configuration.
This can be configured in standalone.xml, or using the JBoss CLI.
</note>
  </subsection>

  <subsection name="Safer Log4j Logging">
  <p>
The default behavior when logging fails, such as when the destination disk is full or disconnected, is to continue responding as normal.
If you prefer the responder not to send OCSP-responses when logging fails you can use the following configuration:
</p><p>
<b>1.</b> From your EJBCA folder, run:
</p>
<source>
ant jbosslog4jsafer
</source>
<p> 
<b>2.</b> On JBoss 5 copy jbosslog4jsafer.jar from the modules/dist directory to your servers lib directory. For example:
</p>
<source>
cp modules/dist/jbosslog4jsafer.jar /home/jboss/jboss-5.1.0.GA/server/default/lib/
</source>
<p>On JBoss 7 / EAP 6 build and deploy a new ejbca.ear that includes jbosslog4jsafer.jar with:</p>
<source>
ant ejbca.ear
ant deployear
</source>
<p>
<b>3.</b> Set  'ocsp.log-safer = true' in ocsp.properties (and enable ocsp.trx-log and ocsp.audit-log of course).
</p><p>
<b>4.</b> Modify your jboss-log4j.xml file (JBoss 5) or create a custom Log4j config (JBoss 7/EAP6) to use the SaferDailyRollingFileAppender and ProbableErrorHandler. For example:
</p>
<source>
&lt;appender name="OCSPTRANSACTION" class="org.cesecore.util.log.SaferDailyRollingFileAppender">
	&lt;errorHandler class="org.cesecore.util.log.ProbableErrorHandler" />
	&lt;param name="File" value="${jboss.server.log.dir}/transactions.log" />
	&lt;param name="Append" value="true" />
	
       &lt;!-- Rollover at midnight each day -->
	&lt;param name="DatePattern" value="'.'yyyy-MM-dd" />
	&lt;layout class="org.apache.log4j.PatternLayout">
        &lt;!-- The default pattern: Date Priority [Category] Message\n -->
		&lt;param name="ConversionPattern" value="%d %-5p [%c] %m%n" />
	&lt;/layout>
&lt;/appender>
&lt;appender name="OCSPAUDIT" class="org.cesecore.util.log.SaferDailyRollingFileAppender">
	&lt;errorHandler class="org.cesecore.util.log.ProbableErrorHandler" />
	&lt;param name="File" value="${jboss.server.log.dir}/audit.log" />
	&lt;param name="Append" value="true" />

    &lt;!-- Rollover at midnight each day -->
	&lt;param name="DatePattern" value="'.'yyyy-MM-dd" />
	&lt;layout class="org.apache.log4j.PatternLayout">
        &lt;!-- The default pattern: Date Priority [Category] Message\n -->
		&lt;param name="ConversionPattern" value="%d %-5p [%c] %m%n" />
	&lt;/layout>
&lt;/appender>
	
&lt;logger name="org.cesecore.certificates.ocsp.logging.TransactionLogger">
	&lt;level value="DEBUG" />
	&lt;appender-ref ref="OCSPTRANSACTION" />
&lt;/logger>
&lt;logger name="org.cesecore.certificates.ocsp.logging.AuditLogger">
	&lt;level value="DEBUG" />
	&lt;appender-ref ref="OCSPAUDIT" />
&lt;/logger>  
</source>
<p>
If you use category instead of logger Log4j will output warnings on startup
</p><p>
<b>5.</b> Start JBoss and you are ready.
</p>
</subsection>
  </section>

  <section name="OCSP GET">
  <p>
The GET OCSP request is defined in <a href="http://www.ietf.org/rfc/rfc6960.txt">RFC 6960</a> (and RFC2560) A.1 as: <code>'GET {url}/{url-encoding of base-64 encoding
of the DER encoding of the OCSPRequest}'</code>. A base64-encoded request can contain the reserved
characters '+', '/' and '=', but will be handled correctly both in their %-escaped and original form
by the responder, since it's unclear if they do conflict as defined in <a href="http://www.ietf.org/rfc/rfc2396.txt">RFC 2396</a> 2.2. 
  </p><p>
Not all web-product handles the encoded '/' (%2F) nicely. JBoss/Tomcat has to be started with
<code>-Dorg.apache.tomcat.util.buf.UDecoder.ALLOW_ENCODED_SLASH=true</code> added to JAVA_OPT in
JBOSS_HOME/bin/run.conf. On Glassfish this JVM option is configured under Application Server Settings.
  </p>
  </section>

  <section name="Responses with longer validity and caching">
  <p>
<a href="http://www.ietf.org/rfc/rfc6960.txt">RFC 6960</a> (and RFC2560) defines thisUpdate, nextUpdate and producedAt.
producedAt is always included in the response and is the time the response was created.
thisUpdate and nextUpdate is enabled by configuring 'ocsp.untilNextUpdate' in ocsp.properties or in the OcspKeyBinding.
thisUpdate will be the time a singleResponse is embedded in the main response and nextUpdate will be 'untilNextUpdate'
seconds later than thisUpdate.
This enables clients that supports this feature to re-use a valid response and decrease to load on the OCSP-responder.
  </p><p>
<a href="http://www.ietf.org/rfc/rfc5019.txt">RFC 5019</a> defines how to use HTTP
cache headers as defined in <a href="http://www.ietf.org/rfc/rfc2616.txt">RFC 2616</a> for
OCSP HTTP GET requests.
By using the headers Last-Modified, Expires, max-age and Date, less intelligent nextwork component like HTTP caches can
cache respones.
This enables re-use of responses to decrease the load on the OCSP-responder and can shorten reponse times by deploying
caches closer to the actual OCSP consumers.
HTTP cache headers is enabled by configuring configuring 'ocsp.maxAge' in ocsp.properties or in the OcspKeyBinding.
  </p><p>
When using RFC 5019 style HTTP headers, JBoss users should be aware that the Date header is overwritten with a cached
value.
Since generating the Date-string is computationally heavy for regular small GET requests, it is generated about once
per second.
So a response will have a Last-Modified that is one second in the future from Date from time to time.
  </p><p>
A regular Apache HTTP server can be used for caching requests, load-balancing and dropping some unwanted requests:
  </p>
  <source>
&lt;VirtualHost *:80>
        # Use as much memory as possible for the cache (in 1 kB blocks)
        # 1GB of memory at ~2kB/ocsp request would hold about 500000 different requests
        CacheEnable mem /
        MCacheSize 1048576
        MCacheMaxObjectCount 1000000
        MCacheMinObjectSize 1
        MCacheMaxObjectSize 4096

        # Using disk-cache will allow a much larger pool of cached entires and the operation system
        # will cache those files, but you are responsible for cleaning up old cache-entries using
        # the "htcacheclean" tool. A disk cache will also live through a server restart.
        # The user running apache has to have read/write access to "/var/cache/ocsp".
        #CacheEnable disk /
        #CacheRoot /var/cache/ocsp

        # Ignore requests for uncached responses.. this will protect the OCSP from
        # DOS attacks using "Cache-Control: no-cache" or "Pragma: no-cache"
        CacheIgnoreCacheControl On

        ProxyRequests Off

        &lt;Location>
                # Everybody is welcome here..
                Allow from all
                Order allow,deny

                # ..or just those from networks that is supposed to use the service
                #Deny from all
                #Order deny,allow
                #allow from 127.
                #allow from 172.16.212.1

                ProxyPassReverse balancer://mycluster-kerb/
        &lt;/Location>

        # Proxy requests to OCSP instances (only one machine currently configured)
        &lt;Proxy balancer://mycluster-kerb>
                # proxy_ajp has to be enabled for ajp-proxying
                BalancerMember ajp://127.0.0.1:8009/ejbca/publicweb/status/ocsp
                # proxy_http has to be enabled for http-proxying
                #BalancerMember http://ocsp2.domain.org:8080/ejbca/publicweb/status/ocsp
                #BalancerMember http://ocsp3.domain.org:8080/ejbca/publicweb/status/ocsp
        &lt;/Proxy>

        # We only want RFC 5019 compliant URLs to be forwarded to the OCSP, the rest
        # should get a "404 Not found" or "414 Request-URI Too Large."
        LimitRequestLine 257
        RewriteEngine On
        RewriteCond %{REQUEST_METHOD} get [NC]
        RewriteRule ^/([a-zA-Z0-9+=/]+)$ balancer://mycluster-kerb/$1 [P,L]

        # Possible values include: debug, info, notice, warn, error, crit,
        # alert, emerg.
        LogLevel debug
        CustomLog /var/log/apache2/access.log combined
        ErrorLog /var/log/apache2/error.log
&lt;/VirtualHost>
  </source>  
  </section>

</body>
</document>

