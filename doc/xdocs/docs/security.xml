<?xml version="1.0"?>
<document>
  <properties>
    <title>Security</title>
  </properties>
<body>
<section name="EJBCA SECURITY">
<p>
Security is CRITICAL for a CA. Protection of the CA's private key is essential,
since compromise of the CA's private key will let anyone issue false
certificates, which can then be used to gain access to systems relying on the CA for
authentication and other security services.
 </p>
 <p>
After realizing this, please read on and take a pragmatic approach to security,
suitable for your policy, application and environment.
</p></section>

<section name="Firewall ports">
<p>To have a functional EJBCA installation there are only two (or three) ports that need to be open to the outside:
</p>
<ul>
<li>8080 - the public HTTP port of you application server, used for clients to access the public web for enrollment.</li>
<li>8442 - the public HTTPS port (server side only SSL) of you application server, used for clients to access the public web for enrollment.</li>
<li>8443 - the SSL protected HTTPS port used to access the Admin GUI of EJBCA. This port requires client certificate for access.</li>
</ul>
<p>
You can choose to have both 8080 and 8442, or only one of them open whichever suits your needs.
</p>
<p>
Additional ports that you may need to open are SSH, outgoing SMTP, outgoing LDAP, etc. Which additional ports that need to be opened depends on your specific setup and which 
services you use. You do not need outgoing SMTP if you don't use email notification, for example.
</p>
<p>
Locally on the host, a number of ports are used in order for your application server to function.
</p>
</section>

<section name="Securing JBoss">
<subsection name="JBoss 5">
<subsubsection name="Disable default services">
<note>
Before putting anything on JBoss 5 (community edition) up on the Internet, at least do the following:
<ul>
<li>rm /opt/jboss/server/default/deploy/jmx-console.war/ -R</li>
<li>rm /opt/jboss/server/default/deploy/management/ -R</li>
<li>rm /opt/jboss/server/default/deploy/ROOT.war/ -R</li>
<li>rm /opt/jboss/server/default/deploy/http-invoker.sar/ -R</li>
<li>rm /opt/jboss/server/default/deploy/admin-console.war/ -R</li>
</ul>
</note>
</subsubsection>
<subsubsection name="HttpOnly session cookies">
<p>
For JBoss 5 you can set the HttpOnly session cookies by editing 'server/default/deploy/jbossweb.sar/context.xml':
</p>
<source>
&lt;Context cookies="true" crossContext="true"&gt;
  &lt;SessionCookie secure="true" httpOnly="true" /&gt;
</source>
</subsubsection>
<subsubsection name="Disable specific HTTP methods">
<p>EJBCA by default limits the use of PUT|DELETE|TRACE|OPTIONS in it's web applications, but if you are unsure you can further enfoce it.</p>
<p>You can use a <a href="http://docs.jboss.org/jbossweb/2.1.x/rewrite.html">RewriteValve</a> in JBoss.</p>
<p>You can disable specific HTTP methods like PUT|DELETE|TRACE|OPTIONS using an Apache http mod_rewrite in front of EJBCA:
</p>
<source>
RewriteEngine On
RewriteCond %{REQUEST_METHOD} ^(PUT|DELETE|TRACE|OPTIONS)$ [NC]
RewriteRule .* - [F]
</source>
<p>You can verify the configuration with:</p>
<source>
curl -v -XTRACE http://hostname:port/appContext
curl -v -XDELETE http://hostname:port/appContex
</source>
</subsubsection>
<subsubsection name="Content Security Policy">
<p>You can do the same as described for JBoss 7 below.</p>
</subsubsection>
<subsubsection name="Write protect deploy">
<p>After deploying EJBCA you can write protect the server/default/deploy directory. In runtime files are only read from this directory, and write protecting it (owned by root, JBoss runs as jboss user) can prevent malicious code to be deployed.</p>
</subsubsection>
</subsection>
<subsection name="JBoss 7">
<subsubsection name="Secure Management Interfaces">
<p>
See <a href="https://docs.jboss.org/author/display/AS7/Securing+the+Management+Interfaces">Securing JBoss 7 Management Interfaces</a>.
</p>
<p>You can remove the JMX console completely by removing the following part from standalone.xml (JBoss EAP 6.2):</p>
<source>
&lt;subsystem xmlns="urn:jboss:domain:jmx:1.3">
  &lt;expose-resolved-model/>
  &lt;expose-expression-model/>
  &lt;remoting-connector/>
&lt;/subsystem>
</source>
<p>You can remove the welcome pages by setting <i>enable-welcome-root</i> to false (JBoss EAP 6.2):</p>
<source>
&lt;virtual-server name="default-host" enable-welcome-root="false"
</source>
<p>By default the management web console is only accessible if you configure user access to it, and it is not configured by default.</p>
</subsubsection>
<subsubsection name="Disable specific HTTP methods">
<p>EJBCA by default limits the use of PUT|DELETE|TRACE|OPTIONS in it's web applications, but if you are unsure you can further enfoce it.</p>
<p>You can use the same Apache front end as for JBoss 5, or you can use a RewriteValve in standalone.xml</p>
<source>
&lt;subsystem xmlns="urn:jboss:domain:web:1.1" default-virtual-server="default-host" native="false"&gt;
    &lt;connector name="http" protocol="HTTP/1.1" scheme="http" socket-binding="http"/&gt;
    &lt;virtual-server name="default-host" enable-welcome-root="true"&gt;
        &lt;rewrite pattern=".*" substitution="-" flags="F"&gt;
            &lt;condition test="%{REQUEST_METHOD}" pattern="^(PUT|DELETE|TRACE|OPTIONS)$" flags="NC" /&gt;
    &lt;/rewrite&gt;
    &lt;/virtual-server&gt;
&lt;/subsystem&gt;
</source>
</subsubsection>
<subsubsection name="Content Security Policy">
<p>CSP is something implemented in browsers to mitigate cross site scripting attacks. See the description over at <a href="https://developer.mozilla.org/en-US/docs/Security/CSP/Introducing_Content_Security_Policy">Mozilla Developer Network</a>, 
or <a href="http://content-security-policy.com/">Content Security Policy Reference</a>.</p>
<p>CSP has been added to EJBCA web interfaces as of <a href="https://jira.primekey.se/browse/ECA-3519">ECA-3519</a>.</p>
<p>You can also implement if globally if you use an Apache front end with mod_headers):</p>
<source>
&lt;IfModule mod_headers.c&gt;
Header set Content-Security-Policy "default-src 'self'"
&lt;/IfModule&gt;
</source>
<p>The above apache configuration is just an example and will probably not work well. See the headers returned by EJBCA for a working config.</p>
</subsubsection>
<subsubsection name="Write protect deploy">
<p>After deploying EJBCA you can write protect the standalone/deployments directory. In runtime files are only read from this directory, and write protecting it (owned by root, JBoss runs as jboss user) can prevent malicious code to be deployed.</p>
</subsubsection>
</subsection>
<p>
JBoss has a description how to secure a default installation of JBoss. You should read this document before putting
your application in production.
</p><p>
Check out: <a href="http://community.jboss.org/wiki/SecureJBoss">SecureJBoss</a>
</p>
<p>You should also make sure all sensitive files can only be read by the JBoss user. These files are for example the server.xml 
file where the password for the SSL keystores are stored.
</p>

<subsection name="Configuring for security">
<p>
The easiest way to keep the installation secure is to block all default JBOSS ports
 (1099, 1476, 4444, 8082, 8083) from the outside and only allow traffic to Tomcat ports (8442 and 8443).
This is because the public end-user actions can be performed through the public
servlets, while administration tasks are performed directly on the beans.
</p>
<p>
See 'ejbcafirewall.sh' for an example how to configure an Iptables firewall in
Linux for protecting EJBCA running on JBoss.
</p>
<p>
See <a href="http://www.jboss.org/">JBoss documentation</a> for a list of ports used in JBoss, for information about
 security in JBOSS/EJB and for how to set up SSL with JBOSS.
See this <a href="http://www.javaworld.com/javaworld/jw-08-2001/jw-0831-jaas_p.html">JavaWorld article</a> for more
 examples about setting up role-permissions.
</p>
</subsection>

</section>

<section name="Setting up SSL">
<p>
To set upp SSL communication for all HTTP traffic to the server 
follow the instructions for installing EJBCA, this will set up HTTPS 
for the admin-GUI automatically.
 </p><p>
This will set up an SSL port open for the public at 8442 and an SSL port
which require client certificate to access the Admin GUI at 8443.
</p>
</section>

<section name="File permission">
<p>
The application server should be run as a special user. Files should be protected 
so the ONLY the user running the application server can access them. 
</p><p>
By default JBoss is probably unpacked with read access to all, you should issue:
</p>
<source>
umask 077
chmod -R go-rwx *
</source>
<p>
In the JBOSS_HOME directory, to make the files readable only by the jboss user, and make this the default permission
for files copied here.
</p>
<p>
If PKCS12 files are generated for users, the subdirectory ('p12') where
they are stored and the generated files should be protected in the same way.
</p></section>

<section name="User authentication">
<p>
Default user authentication for enrollment in EJBCA is done with a one-time
password scheme. When a user has enrolled for a certificate his status is
set to GENERATED and the password can not be used again to enroll for a new
certificate. An administrator must re-set the user's status and preferably
set a new password.
</p>

<p>If you are exposing your public web pages to a wider audience there are a few functions you can use in order to counter perceived threats such as brute-force attacks.
</p>
<ul>
<li>Enable password expiry using the <a href="adminguide.html#Currently%20Available%20Services">User Password Expire Service</a>. If a user forgets to use his/her one-time password it will be automatically disabled.</li>
<li>Use password expiry with the <a href="userguide.html#Maximum%20number%20of%20failed%20login%20attempts">Maximum number of failed login attempts</a> setting when registering users.</li>
<li>Increase the number of BCrypt rounds, making password hashing slower. See the setting of ejbca.passwordlogrounds in conf/ejbca.properties.sample.</li>
</ul>

<p>
If implementing other user authentication scenarios you should remember
that certificate authentication is stronger than password based
authentication (for example LDAP). If EJBCA users authenticate 
with some other (not one-time) password instead of usual one-time password, 
a strong authentication mechanism will be built on a weaker one.
</p></section>

<section name="Passwords defined when configuring EJBCA.">
<p>
The configuration files (in $EJBCA_HOME/conf) contain some passwords.
It is not considered to be a security risk to declare all these passwords
in clear text. Anyone that can log on to the server with EJBCA can, apart from
reading these files, also do anything he wants with the CLI of EJBCA. If an unauthorized
person can use the CLI, then this is a severe security risk. Access to these passwords
is itself not much of a problem, since they have no use outside of the server
</p><p>
It is very important to restrict the access to the server to only a very few trusted individuals.
</p><p>
If you anyway want to do something about these passwords the subsections of this section
describes what should be done:
</p>
<subsection name="Passwords used by EJBCA taken from property files">
<p>
Some of the passwords are used directly by EJBCA code.
All these passwords may be configured encrypted in the same way as
<a href="adminguide.html#Auto-activation of CA tokens">PINs used for auto activation could be encrypted</a>.
</p>
<p>
List of these passwords in ejbca.properites :
<br/>ca.tokenpassword
<br/>ca.keystorepass
<br/>ca.ocspkeystorepass
<br/>ca.xkmskeystorepass
<br/>ca.cmskeystorepass
</p><p>
List of these passwords in databaseprotection.properties :
<br/>databaseprotection.tokenpin
</p>
</subsection>
<subsection name="Passwords used by the application server">
<p>
Some of the passwords are not used by EJBCA but by the application server. If these passwords
should be encrypted, it must be in a way so that they can be decrypted by the application
server. You have to consult the documentation of the application server to find out how to
encrypt them (example: <a href="#Datasource passwords">datasource password in jboss</a>).
</p><p>
These passwords are:
<br/>mail.password in mail.properties
<br/>database.password in database.properties
</p>
</subsection>
<subsection name="Passwords prompted for by 'ant install'">
<p>
If you don't define superadmin.password in web.properties, then 'ant install' will prompt for it.
Since this password does not has to be known by EJBCA after the super admin token has been created,
it will not exist in any file after the installation.
</p>
<p>
The passwords java.trustpassword and httpsserver.password, also in web.properties, are used to generate
keystore files at 'ant install'. If either of these passwords are not predefined, then they will be
prompted for during deploy and install. </p><p>
If you let 'ant' prompt for these passwords you must set them (encrypted, if possible)
in the application server configuration. The file for the application server is copied to the application
server at 'ant web-configure' (e.g. jboss-5.1.0.GA/server/default/deploy/jbossweb.sar/server.xml)
You must then manually substitute the strings 'changeThisToThePassword' in the configuration file with clear
text or possible encrypted (application server specific) passwords.
</p>
</subsection>
</section>

<section name="Database Integrity Protection">

<p>Database integrity protection consists of an additional column in all protected tables, "rowProtection".</p>
<p>
In order to be flexible, versions and keyid are embedded in the rowProtection line. Versions allow the tables themselves to be modified safely because the entity class can create 
"version 2" of the protect string with new fields, but still verify "version 1" and other legacy versions rows without the additional field. ProtectData can update the algorithm used, 
etc. by iterating the version number. The protection key can be changed because the user defines the keyid of the crypto token and always verifies using a specific keyid.
The keyids are specified in configuration and multiple keyids can be active at any moment.
</p>
 
<subsection name="Configuration">
<p>
Database integrity protection should be configured before EJBCA is installed and used the first time, otherwise unprotected data will be inserted into the database; 
once the system is configured for database protection, using that data will fail.
</p><p>
Database protection is configured in the file:
</p>
<source>
conf/databaseprotection.properties
</source>
</subsection>

<subsection name="Limitations">
<ul>
<li>One limitation on the application using this protection scheme is that we can now not do bulk updates using a JPQ query with UPDATE where xyz. This is because the @Pre/Post events are not triggered for JPA beans when doing that. This is a limitation that can be severe in very large installations;</li>
<li>We can not do direct database updates, this is of course the whole idea of the database protection, but it is also a limitation nonetheless;</li>
<li>When using an HSM for the protection, only digital signature protection is currently available, not HMAC.</li>
</ul>
</subsection>

<subsection name="Integrity Protected Security Audit">
<p>
The IntegrityProtectedDevice security audit implementation stores the log entries to the database and relies on the Database Integrity Protection in 
EJBCA for protecting the authenticity of the log events. Each log event is given an identifier consisting of a "nodeId" and a "sequenceNumber" that 
is part of the integrity protected data. The nodeId is configurable and must be unique for each JVM in a cluster with shared database access. 
The "sequenceNumber" is unique per nodeId and starts with 0. The sequenceNumber for a node (JVM) is read when the first log entry is written to this 
device and then kept in memory for duration of the JVM's lifetime.
</p><p>
The security of this implementation relies on: 
<ul>
<li>Database integrity protection token.</li>
<li>The sequence number in memory for each node (JVM).</li>
</ul>
</p><p>
Using a sequence number will prevent that a single log entry is removed without detection being possible. Keeping the sequence number in the JVM will 
prevent that all log entries up to a previous point in time is removed without detection being possible.
</p>
<p>
This implementation can not detect: 
<ul>
<li>Removal of all the latest log entries for a node up to a previous point in time if the node's JVM is not running.</li>
<li>Forged log entries if the database integrity protection token is compromised.</li>
</ul>
</p><p>
The motivation for this design is that each node (JVM) does not have to wait for other nodes in a (shared database only) cluster. 
Internally in each JVM the only locking between threads happens when the sequence number is atomically updated. This will allow horizontal scaling to a 
very high degree without any JVM-to-JVM communication when the shared database supports row-locking.
</p><p>
When using this implementation the integrity of each fetched log entry is always validated when loaded from the database, but full validation with checks 
for missing sequenceNumbers are not performed.
</p>
<p>
Configuration of integrity protected log device is in the files:
</p>
<source>
conf/cesecore.properties
conf/databaseprotection.properties
</source>
<p>
It is possible to verify a whole table with the <a href="adminguide.html#Local%20Database%20CLI">Local Database CLI</a>
tool. If any row in the table can't be verified the tool will show it. For the
AuditRecordData table it will also be checked with the sequence number that no
row is missing.
</p>

</subsection>
</section>

<section name="Datasource Passwords">
<p>
If you do not like to have your DataSource password available in clear text in EjbcaDS.xml, 
there is an article in the JBoss Wiki about encrypting them:
<br/>
<a href="http://community.jboss.org/wiki/encryptingdatasourcepasswords">
http://community.jboss.org/wiki/encryptingdatasourcepasswords</a>
</p>
</section>

<section name="Database privileges">
<p>
During the installation process of EJBCA, JBoss creates all the required database
tables. To do this the EJBCA-database user has to have CREATE TABLE privileges. During
upgrades EJCBA needs CREATE and ALTER TABLE privileges. (SELECT, UPDATE, INSERT and DELETE
privileges are also required.)
</p><p>
After the installation during normal operations only regular SELECT, UPDATE, INSERT
and DELETE commands are needed. The table LogEntryData will only be used with SELECT and
INSERT.
</p><p>
Instead of changing the privileges of the EJBCA-user, it's recommended to have two
different users "ejbca" and "ejbca-admin". For regular operations "ejbca" is used, but
for the installation and upgrades, EJBCA is re-deployed with "ejbca-admin" configured
in conf/database.properties. 
</p>
<p>There is a script, <b>doc/howto/mysql-privileges.sh</b> that creates an SQL script that can be run to limit privileges
on a MySQL database. The script will set restricted privileges for every table in the EJBCA database.
See the script for in-line documentation.</p>
</section>

<section name="SSL connections in MySQL">
<p>
<a href="http://dev.mysql.com/doc/refman/5.0/en/secure-using-ssl.html">
http://dev.mysql.com/doc/refman/5.0/en/secure-using-ssl.html</a>
<a href="http://dev.mysql.com/doc/refman/5.1/en/secure-using-ssl.html">
http://dev.mysql.com/doc/refman/5.1/en/secure-using-ssl.html</a>
</p>
</section>

<section name="Other precautions">
<subsection name="Switching to production mode">
<p>
Switching to production mode (default) by setting ejbca.productionmode in conf/ejbca.properties
will prevent ant from starting JUnit tests and deploying the CA build on an OCSP responder
and vice versa.   
</p>
</subsection>
<subsection name="Database transaction logs in MySQL">
<p>
<a href="http://dev.mysql.com/doc/refman/5.0/en/binary-log.html">
http://dev.mysql.com/doc/refman/5.0/en/binary-log.html</a>
</p>
</subsection>
<subsection name="System accounting in Linux">
<p>
See your distribution for details about their package, below are general links.
<br/>
<a href="http://www.nic.com/~dave/SecurityAdminGuide/SecurityAdminGuide-5.html">
http://www.nic.com/~dave/SecurityAdminGuide/SecurityAdminGuide-5.html</a>
<a href="http://www.hsc.fr/ressources/presentations/linux2000/linux2000-18.html.en">
</a>
</p>
</subsection>
</section>
<section name="Denial of Service">
    <subsection name="Due too large data packages">
        <p>
            There is no way to limit the datapackages reaching JBoss through a HTTP request from within JBoss. 
            This is due to the way the TCP protocol works. 
            The best way to avoid this kind of DOS attacks is to use a firewall or proxy that can limit the size of request and configure it properly.
        </p>
    </subsection>
</section>

</body>
</document>

