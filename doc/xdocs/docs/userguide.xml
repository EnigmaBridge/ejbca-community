<?xml version="1.0"?>
<document>
  <properties>
    <title>User Guide</title>
  </properties>
<body>

<section name="Introduction">
<p>
This User Guide contains guides and information how to perform day to day administrative tasks in EJBCA. 
It also contains information about fields that you find in the various section of the administrative interfaces. 
This guide is constant work in progress and if you would like to see a new section added, please contact us.
</p>
<p>
To go straight ahead and learn how to configure profiles and issue server certificates you can follow the guides:
</p>
<ol>
<li><a href="#Create%20a%20Certificate%20Profile%20for%20SSL%20servers">Create a Certificate Profile for SSL servers</a></li>
<li><a href="#Create%20an%20End%20Entity%20Profile%20for%20SSL%20servers">Create an End Entity Profile for SSL servers</a></li>
<li><a href="#Issue%20a%20new%20end%20entity%20certificate%20for%20an%20SSL%20server">Issue a new end entity certificate for an SSL server</a></li>
</ol>
</section>

<section name="EJBCA Administration">
<subsection name="Administrative tutorials">
<p>
There are additional documentation and administrative tutorial movies at <a href="http://wiki.ejbca.org/">http://wiki.ejbca.org/</a>.
</p>
</subsection>
<subsection name="Administrating EJBCA">
<p>
You can administer EJBCA using a web browser and the Admin GUI, this is the easiest way. 
The Admin GUI requires SSL with authentication using client certificate, i.e. strong authentication.
</p><p>
You can also use the command line interface (CLI) which is called by 'bin/ejbca.sh'. 
If you call ejbca.sh you get a list of available commands, and you can get help for all commands by calling
them without arguments, i.e:
</p>
<source>
bin/ejbca.sh ca
bin/ejbca.sh ra addendentity
etc etc
</source>
<p>
Finally you can also use the <a href="#EJBCA client toolbox">EJBCA client toolbox</a> to perform administrative tasks using web services.
</p>
</subsection>
</section>

<section name="Admin GUI overview page">
<p>
The first page of the Admin GUI can display status information for the publish 
queue and the CA. Which of those that should be displayed can be configured in 
My Preferences.
</p>
<subsection name="Publish queue status">
<p>
The publish queue status shows the current number of publish events that is stored in the publisher queue.
Events can be stored in the publisher queue either because publishing failed, or because publishing goes to 
the queue directly. 
<br/>See also <a href="adminguide.html#Publisher Queue and failures">Publisher Queue and failures</a>.
</p>
</subsection>
<subsection name="CA Status">
<p>The CA status overview shows ok or error if CAs are off line and if CRLs are not valid.
</p><p>
CA Status shows a red error if the CA is not on-line or the CA token is not on-line. External CAs are always show as ok. 
If the CA or CA token is not on-line, you should check the CA activation page, to see if the CA can be activated. 
</p><p>
CRL status show a red error is a CRL or delta CRL has expired without a new one being created. Delta CRLs are only monitored if used.
If CRLs have expired you can generate new CRLs. See <a href="adminguide.html#CRL generation">CRL generation</a> for more information.
</p>
</subsection>
</section>

<section name="Managing Crypto Tokens">
<p>
A Crypto(graphic) Token in EJBCA is where keys are stored. A Crypto Token can be either backed by a soft keystore
(file in the database) or an HSM PKCS#11 slot.
</p>
<p>
In the EJBCA Admin GUI the menu item "Crypto Tokens" will show you all the Crypto Token related management.
Activation of Crypto Tokens can also be done from the CA Activation page.
</p>
<p>
There is also a CLI for all the functionality available in the Admin GUI. Run
</p>
<source>
bin/ejbca.sh cryptotoken
</source>
<p>
for a list of available sub-commands.
</p>
<subsection name="New Crypto Tokens">
<p>
<ul>
<li>Name: A user-friendly name for the Crypto Token.</li>
<li>Type: PKCS#11 HSM slot mapping or a Soft PKCS#12 keystore in the database.</li>
<li>Authentication Code: The PKCS#11 slot PIN or the password that will protect the soft keystore.</li>
<li>Repeat Authentication Code: Should be the same as the previous field.</li>
<li>Auto-activation: If the authentication code should be stored (obfuscated) in the database and used to always keep the Crypto Token active.</li>
<li>Allow export of private keys: EJBCA will not try to prevent Soft Crypto Token keystore export if this box is checked.</li>
</ul>
If you select (as type) to use a PKCS#11 Crypto Token additional fields are displayed (PKCS#11 may require additional configuration of your app server, see Installation pages):
<ul>
<li>PKCS#11 Library: PKCS#11 shared library configured as available in conf/web.properties.</li>
<li>PKCS#11 Reference Type: What kind of a slot reference that is described by the next parameter (Id, Index or Label).</li>
<li>PKCS#11 Reference: PKCS#11 slot number, index or label.</li>
<li>PCKS#11 Attribute File: If required, this is a PKCS#11 attribute file configured as available in conf/web.properties. This should only be required for non common HSMs.</li>
</ul>
The PKCS#11 properties above are described in more technical detail in the <a href="adminguide.html#Hardware Security Modules (HSM)">Adminguide's HSM</a> section.
A unique Crypto Token identifier will be generated when the token is created.
</p>
</subsection>
<subsection name="View or Edit a Crypto Token">
<p>
The view is very similar to the creation of a token except for showing the id and activation status.
It is not possible to change the Crypto Token id, type or the change the authentication code of soft Crypto Tokens. 
</p>
</subsection>
<subsection name="Activation and deactivation">
<p>
In the list of Crypto Token there are 3 possible actions available:
<ul>
<li>Activate: Enter a authentication code and clicking "Activate" will activate an inactive Crypto Token.</li>
<li>Deactivate: Clicking "Deactivate" will deactivate an active Crypto Token.</li>
<li>Reactivate: Clicking "Reactivate" will reactivate an active Crypto Token with auto-activation enabled.</li>
</ul>
</p>
</subsection>
<subsection name="Key management">
<p>
While viewing an active Crypto Token it is possible to also view and interact with the Crypto Token's keys.
The shown SubjectKeyID column is a SHA1 over the public key.
<ul>
<li>A new key pair can be created by giving it an alias, a key specification and clicking generate.</li>
<li>Key pairs can be removed by clicking "Remove" for the specific key pair or selecting multiple keys and clicking "Remove selected".</li>
<li>A key pair can be tested by clicking "Test" for the specific key pair.</li>
<li>A key pair's public key can be downloaded in PEM format by clicking "Download Public Key".</li>
</ul>
Please note that the shown key specifications might not be supported by underlying PKCS#11 modules and
an error will be shown when trying to use such a key specification.
</p>
</subsection>
<subsection name="CryptoToken Authorization">
<p>
For all authorized CA operations, authorization for underlying Crypto Token operations are implied.
The minimum authorization required to create a CA is authorization to "view" and "use" (or "modify") a Crypto Token.
</p><p>
Since modification of PKCS#11 Crypto Tokens could change the slot mapping, we require the same authorization for creation and modification.
The full list of authorization rules follow:
<ul>
<li>/cryptotoken/: Required for displaying the Crypto Token management in the Admin GUI.</li>
<li>/cryptotoken/view/<i>cryptoTokenId</i>: Required for viewing Crypto Token information and listing key pairs.</li>
<li>/cryptotoken/use/<i>cryptoTokenId</i>: Required for binding a Crypto Token to a CA.</li>
<li>/cryptotoken/modify/: Required for creating or modifying a Crypto Token.</li>
<li>/cryptotoken/delete/: Required for deletion of a Crypto Token.</li>
<li>/cryptotoken/activate/<i>cryptoTokenId</i>: Required for activation of a Crypto Token.</li>
<li>/cryptotoken/deactivate/<i>cryptoTokenId</i>: Required for de-activation of a Crypto Token.</li>
<li>/cryptotoken/keys/generate/<i>cryptoTokenId</i>: Required for key pair generation.</li>
<li>/cryptotoken/keys/remove/<i>cryptoTokenId</i>: Required for key pair removal.</li>
<li>/cryptotoken/keys/test/<i>cryptoTokenId</i>: Required for key pair testing.</li>
</ul>
</p>
</subsection>
</section>

<section name="Managing CAs">
<subsection name="Creating CAs">
<p>
After installation, which creates a default admin CA
you can create more CAs.
<br/>Creating CAs can be made using the Admin GUI or the command line interface (CLI). The recommended way is using
the Admin GUI, since it gives more control of all parameters.
</p>
<p>
Your CAs can be either root CAs, subordinate CAs to another CA in EJBCA 
or subordinate CAs to an external CA. The initial admin CA is a RootCA.
</p>
<subsubsection name="Using CLI">
<p>You can create CAs using the cli command:
</p>
<source>
ejbca.sh ca init
</source>
<p>
Issuing the command will give usage instructions. An example is:
</p>
<source>
bin/ejbca.sh ca init TestRoot "C=SE,O=PrimeKey,CN=TestRoot" soft foo123 2048 RSA 365 --policy 2.5.29.32.0 SHA256WithRSA
</source>
<p>This will create a root CA with the DN 'C=SE,O=PrimeKey,CN=TestRoot'. The
keylength is
 2048 bit (RSA) and the validity of the root certificate is 365
 days. You need to quote the DN  so it is treated as one argument.
</p><p>
PKIX requires that a CRL always is available even if it is
empty. When creating a new CA the CA certificate is stored
and published (if any Publishers are configured), and the initial CRL is created 
and stored/published.
</p>
</subsubsection>
<subsubsection name="Using Admin GUI">
<p>Creating CAs in the Admin GUI is done by selecting 'Edit Certificate Authorities' in the menu, entering a new CA name in the text field and clicking 'Create'.
</p>
</subsubsection>
</subsection>
<subsection name="CA fields">
<subsubsection name="Type of CA">
<p>
Type of CA can be either X509 or <a href="cvccas.html">CVC</a>. <br/>
An X509 CA is a <i>normal</i> CA for secure email, login, web authentication, VPN etc etc.<br/>
A CVC CA is a CA issuing CV certificates, which are special certificates for EU EAC ePassports. CVC CAs are described in depth in the document about <a href="cvccas.html">CVC</a> CAs.
</p>
</subsubsection>

<subsubsection name="Signing Algorithm">
<p>
The signing algorithm to use for issuing certificates, signing CRLs etc.
</p>
</subsubsection>

<subsubsection name="Crypto Token">
<p>
The Crypto Token where the CA's key mappings are expected to exist.
</p>
<p>
The list of available Crypto Tokens are those that the administrator is authorized to view and use.
The Crypto Token must also be active and contain a key that can be used with the CA signing algorithm in order to be shown.
</p>
<p>
The purpose mappings are the key alias in the Crypto Token to use for what:
<ul>
<li>defaultKey: The key to use no specific alias is selected (Required).</li>
<li>certSignKey: The key to use for certificate issuance. Must comply with the Signing Algorithm and only valid choices are shown.</li>
<li>crlSignKey: The key to use for CRL signing. Even though it could theoretically be separate from the certSignKey according to the RFCs,
client support is rare and the certSignKey will always be used.</li>
<li>keyEncryptKey: Key to use for key recovery when enabled. Decrypts escrowed keys and must be RSA.</li>
<li>hardTokenEncrypt: Deprecated functionality, do not use.</li>
<li>testKey: Key used by health-check to verify that the Crypto Token is usable. Usually a short key for speedy connection checks.</li>
</ul>
</p>
</subsubsection>

<subsubsection name="Extended Services Key Specification">
<p>
Each CA has a set of Extended Services than can be enabled and sign requests in various formats.
For some of the services, the CA will delegate signing to soft keys stored in the database as part of the CA object.
These keys will have signing certificates issued by the CA's signature keys and similar SubjectDN to the CA.
This field allows selection of the key specifications to use for these soft keys. 
<ul>
<li><i>Internal</i> Online Certificate Status Protocol (OCSP): The CA's certSignKey key pair will be used.</li>
<li>Cryptographic Message Syntax (CMS, superseded PKCS#7): A soft key pair in the database will be used.</li>
<li>XML Key Management Specification (XKMS): A soft key pair in the database will be used.</li>
</ul>
If you don't plan on using CMS or XKMS with any special requirements, you can safely use the default value here.
</p>
</subsubsection>

<subsubsection name="Key sequence">
<p>
<a href="cvccas.html">CVC</a> Sequence<br/>
The key sequence is used in the certificate holder reference of an EAC CVC certificate / certificate request.
According to the BSI specifications the sequence must be 5 bytes long. The initial value must be specified
in the sequence field. The sequence MAY start with an iso 3166-2 countrycode.
</p>
<p>
When renewing keys for HSMs using the Admin GUI, the new signing key label will be the old label with the 
new key sequence in the end. When renewing keys for HSMs using the Admin GUI the key sequence is 
automatically increased.
</p>
<p>
For X.509 CAs the key sequence should not be important, except for key labels when renewing keys.
</p>
<p>
If you are unsure of the key sequence you can safely leave it to be handled automatically.
</p>
</subsubsection>
<subsubsection name="Key sequence format">
<p>
Within EAC, there are several options regarding the sequence format. The format can be choosen in the 
field &quot;Key sequence format&quot;. The following options are available:
<dl>
	<dt>5 byte numeric</dt>
		<dd>The sequence MUST contain numeric characters [0-9]. The sequence shall be increased from 00000 to 99999</dd> 
	<dt>5 byte alphanumeric</dt>
		<dd>The sequence MUST contain alphanumeric characters [0-9][A-Z]. The sequence shall be increased from 00000 to ZZZZZ</dd>
	<dt>2 byte country code, 3 byte numeric</dt>
		<dd>The sequence must start with a 2 byte country code (e.g. SE). The other bytes shall be increased  from 000 to 999</dd>
	<dt>2 byte country code, 3 byte alphanumeric</dt>
		<dd>The sequence must start with a 2 byte country code(e.g. SE). The other bytes shall be increased from 000 to ZZZ</dd>
</dl>
For X.509 the 5 byte numeric is recommended
</p>
</subsubsection>

<subsubsection name="Enforce unique public keys">
<p>
'Enforce unique public keys' guarantees that certificates with the same public key can only be issued to the same user
from this CA. This means that a user is allowed to have multiple certificates (e.g. due to renewal) with the same key
as long as the same 'username' is used, but two users can not share the same public key. The check is only performed
when new certificates are issued.
</p>
<p>To use this feature efficiently you should have a database index over (subjectKeyId,issuerDN) on the table CertificateData. 
See doc/sql-scripts for index scripts.
</p>
</subsubsection>

<subsubsection name="Enforce unique DN">
<p>
'Enforce unique DN' guarantees that users with the same Subject DN can not be issued certificates from this
CA. This means that a user is allowed to have multiple certificates (e.g. for different uses) with the same Subject DN
as long as the same 'username' is used, but two users can not share the same Subject DN. The check is only performed
when new certificates are issued.
</p>
<p>
The check only affects <i>new</i> users, i.e. if you have two users with the same DN before enabling the limitation, these old users can still share the same DN and get new certificates.
</p>
<p>To use this feature efficiently you should have a database index over (subjectDN,issuerDN) on the table CertificateData. 
See doc/sql-scripts for index scripts.
</p>
</subsubsection>

<subsubsection name="Enforce unique Subject DN serialNumber">
<p>
'Enforce unique Subject DN SerialNumber' guarantees that only one end entity with a specific Subject DN SerialNumber can be issued
from this CA. When adding a new end entity, a check is done to ensure that there are no other end entities, issued by this CA
before, have the same Subject DN SerialNumber. Note that end entities issued from other CAs can have the same Subject DN SerialNumber
as end entities issued from this CA.
</p>
<note>
Note that this option is currently extremely inefficient and will only work with a low number of users, in the hundreds or a few thousand.
This is due to the face that it select all users from the database registered for a specific CA. Future versions of EJBCA can optimize this query.
</note>
</subsubsection>

<subsubsection name="Use Certificate Request History">
<p>
The Certificate Request History stores the values used when generating a certificate for an end entity. Since the values of the end entity, such as the DN, can be edited
between requests, this function ensures that there is a possibility to trace the values used for issuing a certain certificate.
Information stored is:
<ul>
<li>fingerprint</li>
<li>serialNumber</li>
<li>issuerDN</li>
<li>username</li>
<li>timestamp</li>
<li>UserDataVO</li>
</ul>
Turning on certificate request history will reduce performance and use more database space, and is disabled by default since EJBCA version 6.0.
If request history is needed please consider using the <a href="adminguide.html#Security%20Audit%20Log">audit log</a> functionality instead.
</p>
</subsubsection>

<subsubsection name="Use User Storage">
<p>
Certificates are normally issued in a two step process where a User is first added to the database with a username, password (or enrollment code) and additional information that
should go into the certificate. Later EJBCA processes a request that this user should be issued a certificate and the provided credentials (username and password)
is verified with the stored User data. In the EJBCA Admin GUI it is currently only possible to search for Users and not certificates, so without this enabled,
the Admin GUI will not be very useful.
</p>
<p>
The user data storage is enabled by default.
</p>
<p>
If EJBCA is used as a factory and where the functionality of the Admin GUI is not required, this could be disabled to improve performance.
</p>
<p>See <a href="adminguide.html#Throw%20away%20CA">Throw away CA</a> in the admin guide for more information about this option.</p>
</subsubsection>

<subsubsection name="Use Certificate Storage">
<p>
Issued certificates are stored in the database to be able to provide them upon request or provide revocation information.
</p>
<p>
The certificate data storage is enabled by default.
</p>
<p>
If EJBCA is used as a factory and where the functionality of the Admin GUI is not required, this could be disabled to improve performance.
</p>
<p>See <a href="adminguide.html#Throw%20away%20CA">Throw away CA</a> in the admin guide for more information about this option.</p>
</subsubsection>

<subsubsection name="Certificate Policy Id">
<p>
Setting the Certificate Policy Id when creating a CA affects the certificate policy extension in the CA certificate. You can define Certificate Policy Id in:
<ul>
<li>CA settings</li>
<li>Certificate Profile</li>
<li>Both</li>
</ul>
When a CA is created or renewed, the Certificate Policy Id fields of the CA settings and the Certificate Profile are merged when the CA certificate is created. 
This means that if you have a value defined in both places, both Certificate Policy Ids will be included in the CA certificate.
</p>
<p>For consistency reasons it might be a good idea to only use the Certificate Policy Id in the Certificate Profiles, as it is the same for all type of certificates, and merge effects can be confusing.
</p>
</subsubsection>

<subsubsection name="Name Constraints">
<p>
You may restrict the domain names and IP addresses under which a CA is allowed to issue certificates. Root CA operators might require that this certificate extension is used in sub CAs that are operated by customers.
The intended work-flow is to specify the name constraints on the end-entity for a sub CA, which will cause the name constraints extension to be included in the sub CA certificate once it's generated.
It's also possible to add name constraints directly on a CA.
</p>
<p>
<strong>Note:</strong> Name constraints must first be enabled in the Certificate Profile and the End-Entity Profile (the latter is for end-entities only). At the time of writing (May 2014) they are not supported in Apple Safari or on iOS devices, so this extension can not yet be marked as critical if there are such clients. The default mode is non-critical for this reason.
</p>
<p>
EJBCA supports domain name, directory name, e-mail (RFC 822 name) and IP address (both IPv4 and IPv6) constraints. These syntaxes are accepted:
</p>
<dl>
<dt><code>example.com</code></dt>
<dd>Matches example.com and subdomains.</dd>

<dt><code>@example.com</code></dt>
<dd>Matches all mailboxes at example.com.</dd>
<dt><code>mailbox@example.com</code></dt>
<dd>Matches a specific e-mail address.</dd>

<dt><code>C=SE,O=Company</code></dt>
<dd>Matches against the beginning of the Subject DN. The certificates must <strong>not</strong> use LDAP DN order, which is enabled by default!
<br/>Also note that the RDN encoding must match. If the Name Contraint is encoded as PrintableString, the certificate must also be issued with PrintableString in the subjectDN, otherwise Name Contraint matching will fail.
If you get an name constraint error about &quot;XKMSCertificate&quot; or &quot;CMSCertificate&quot; when creating a CA, then you have some problem with the Subject DN matching.</dd>

<dt><code>198.51.100.0/24</code></dt>
<dd>Matches an IPv4 subnet. The IP address checked is the one in the certificate, which in turn is checked if the host is accessed by IP address.</dd>
<dt><code>2001:db8::/32</code></dt>
<dd>Similarly, matches an IPv6 subnet.</dd>
</dl>
<p>
Name constraints are only checked for the types of constraints that are specified. So, if e.g. no IP addresses are addresses then the IP address will not be constrained. Conversely, if e.g. a domain name is listed as permitted then no other domain names will be permitted. If neither any permitted or excluded names are entered, then the Name Constraints extension will be omitted from the certificate.
</p>
</subsubsection>

<subsubsection name="CRL Period">
<p>
There are four settings in CA configuration dictating the times when CRL generation is done:
<ul>
<li>CRL Expire Period: Mandatory. The validity period for generated CRLs. If set to for example 24h, the nextUpdate for a generated CRL will be the issue time + 24 hours.</li>
<li>CRL Issue Interval: Optional. A fixed interval when CRLs will be issued. If set to for example 1h a new CRL will be issued every hour, even though the old one is still valid for another 23 hours. The default value here is 0, which means that a new CRL will be issued when the old one is about to expire (see also overlap time). Keeping the default value 0 has the same as effect as setting this value to the same value as CRL Expire Period.</li>
<li>CRL Overlap Time: Optional. When checking if a CRL should be generated (if the old one is about to expire), the new CRL is generated this amount of time before the old CRL expires. The default value is 10 minutes, meaning that if CRL Expire period is 24 hours, a new CRL will be issued after 23h50m. This ensures that there is no time period (even a few seconds) when there is no valid CRL issued. It also gives clients a time-slot to download a new CRL before the old one expires.</li>
<li>Delta CRL Period: Optional. The amount of time your delta CRLs will be valid if delta CRLs are issued. If this period is larger than 0, Delta CRLs will be issued.</li>
</ul>
</p>
</subsubsection>

<subsubsection name="Finish User">
<p>
The Finish User configuration defines if the CA calls a process called "finishUser" after a certificate has been issued for an end entity. 
This process is what makes the user's password a one-time password, i.e. it removes the password and/or decreases the password use count. 
<ul>
<li>With this setting enabled (default) an end entity password can only be used once (or as many times as defined in 'Number of allowed requests' when adding the end entity) to enroll for a certificate.
After the certificate has been issued the user status is set to 'Generated' and the password blanked. When status is 'Generated' a new certificate can not be issued until status is reset to 'New', usually by editing the end entity.
</li>
<li>With this setting disabled the password can be used unlimited number of times to enroll for certificates, and the status stays as 'New' after each time.
</li> 
</ul>
</p>
</subsubsection>

<subsubsection name="CMP RA Authentication Secret">
<p>
CMP can be configured in RA mode to use one shared secret for each CA to authenticate messages from the RA.
If "cmp.ra.authenticationsecret" in cmp.properties is set, this field will be ignored.
</p>
<p>An empty value in this field will deny all RA mode CMP requests (unless cmp.ra.authenticationsecret is configured).</p>
</subsubsection>

</subsection> 

<subsection name="Creating a SubCA signed by an external CA">
<p>
Some CA hierarchies have the requirement of being signed by an external Certificate Authorities and sometimes other external CA:s need to be signed by your CA.
</p>
<p>
When creating a CA that is signed by an external CA, you create a PKCS10 certificate request
that is sent to the external CA. When the external CA returns your CAs certificate, this is processed and
the CA becomes activated.
</p>
<p>
In order to have your CA signed by an external CA you have to go through the following steps.
<ol>
<li>Go the the 'Edit Certificate Authorities' page in the Administration GUI.</li>
<ol>
<li>Create a new CA in the same way as internal CAs, but when selecting signing CA, select 'External CA' instead. The fields 'Certificate Profile', 'Validity', 'Subject Alternative Name' 
and 'Policy Id' will become gray and are no longer editable.</li>
<li>Fill in the Description and CRL Specific data.</li>
<li>Make sure that the certificate chain is available, this can be done in one of three ways:</li>
<ol>
<li>Select a file containing the CA certificate chain of the signing CA. This file should be in PEM encoding. If there is more than one top CA certificate then all their certificates should be 
appended into one single file. It should be in plain PEM format without blank lines before or after. An example is below.</li>
<li>Append the chain to the signed certificate file in the same way when receiving the request (see below).</li>
<li>Import the complete certificate chain beforehand as External CAs (Certificate Authorities->Import CA Certificate).</li>
</ol>
<li>Click on the 'Make Certificate Request' button in the bottom of the page.</li>
</ol>
<li>After successfully clicking 'Make Certificate Request' the generated PKCS10 certificate request will be displayed.
You can copy and paste it to the signing CA or download the PEM file if that approach is preferred.</li>
<li>The external CA should sign the certificate request and return a certificate. Meanwhile, the newly created CA will
have the status 'Waiting for Certificate Response' and will not appear anywhere in the system except in the 'Edit CA' page.</li>
<li>When the Certificate Response has arrived, it is time to activate the new CA. You mark the waiting CA and click on 'Edit' button in the 'Edit CA' page.
Go to the bottom of the page and click on 'Receive Certificate Response' (you can leave the password field blank).
Then upload the received certificate and click again on 'Receive Certificate Response'.</li>
<li>If the received certificate forms a valid certificate chain with the previously uploaded chain or contained a full chain, the status of the CA will be set to 'Active'.</li>
<li>If you want to activate OCSP functionality for this new CA you have to edit it once again and mark the OCSP functionality as active.</li>
<li>The new externally signed CA is ready to use.</li>
</ol>
</p>
<p>
When uploading a chain, the certificates must be converted to PEM format if it isn't already so.
This can be accomplished with OpenSSL among other tools with the following command if you have received a file in DER encoding (.cer ending):<br/>
<code>openssl x509 -inform DER -in filename.cer -outform PEM -out filename.pem</code>
Example of a plain PEM file for uploading as a certificate chain:
</p>
<source>
-----BEGIN CERTIFICATE-----
MIIDSjCCAjKgAwIBAgIIEvabM2CgLZcwDQYJKoZIhvcNAQEFBQAwMzETMBEGA1UE
AxMKV2FsdGVyIENBMTEPMA0GA1UEChMGV2FsdGVyMQswCQYDVQQGEwJTRTAeFw0w
MzA5MjkwOTI2MzRaFw0wNDA5MjgwOTM2MzRaMDMxEzARBgNVBAMTCldhbHRlciBD
QTExDzANBgNVBAoTBldhbHRlcjELMAkGA1UEBhMCU0UwggEgMA0GCSqGSIb3DQEB
AQUAA4IBDQAwggEIAoIBAQC3hXksEud68WwPWWHLJQQkTCuX/K32KHPPn/uPUzab
Cpc/FnaTmF9yEHmpFdAUr0v5ZPnxVQpcuwrDZc4YfaTLfyUHicQbkftsPAj/2hE4
UukS2j+nQQcJEnIY0vSZOAOLU3j4bf/RlS6Jl7TPFFfWTxuQF8AruQ+YhaE52JFi
SapGGXKQJxhsvKT91rLaWSFWNMTTLSDPaBXYEYFuFhLNclDJWf4whfxHSHHkARB/
3Z0XlT4sFj0fmqEQ6yQb6/WqMFK+1XAIBXZO2MXe26IigWkXw1GfkIx1+fbUPrzu
8EI2jb0TWl21j1+Mvh3APZtVj5FJNuZN9bgdbrq88hLXAgERo2QwYjAPBgNVHRMB
Af8EBTADAQH/MA8GA1UdDwEB/wQFAwMHBgAwHQYDVR0OBBYEFNhHOtAwo8MOE/nI
zzg9KFxCYs8YMB8GA1UdIwQYMBaAFNhHOtAwo8MOE/nIzzg9KFxCYs8YMA0GCSqG
Sib3DQEBBQUAA4IBAQBHpvicbuJTACtpdwe6cF1nQ57FHnnYr+aAe+ZpH43R6R9d
eMps02nFAMSs5o8sbPokrpwAtk2yYwCohEFDkZ5JPzIBkgNlNnVHNNRHQTRJ6v6Q
F2MWUEPc1u5kxSjXEVMmZerG9oknMwpYFmkOnKF46vP3Njt/ExOeRAvCEQq2b8pz
2QGg8/IK6Omfi7IwxtVYUpgvhdcWekbFIlxkXZiEdlHNBIV1GzzPK1VEzg5kugD/
h6jeykrsKASx+55AkkBPt2kI+ZikVtp3SVhfZQMGY86c5QMQGlPWYNsr4ociyhfX
I52Qby+/HNG1ijpx66Z30lUMmXTtWtL4Cu8s7UvC
-----END CERTIFICATE-----
-----BEGIN CERTIFICATE-----
MIICxzCCAa+gAwIBAgIIBfqGjbQu14swDQYJKoZIhvcNAQEFBQAwMzETMBEGA1UE
AxMKV2FsdGVyIENBMTEPMA0GA1UEChMGV2FsdGVyMQswCQYDVQQGEwJTRTAeFw0w
MzA5MjkwOTMzMDFaFw0wNDAxMDcwOTQzMDFaMDQxETAPBgNVBAMTCER1ZGUgQ0Ex
MRIwEAYDVQQKEwlEdWRlIEluYy4xCzAJBgNVBAYTAlNFMIGdMA0GCSqGSIb3DQEB
AQUAA4GLADCBhwKBgQCM1hR/DYPXfKDa3oVJbppV4OcYtn2XP9W5Kc1d0+U4qLOm
JsqIFHDWR07o1QFiPhc9z0UGtwYeE3CpQ8fG8zeur5e286PYptZIST77B9vOdQdl
PA+dFKFIaEwdzcS7H3Lf38WTE4D1OnyRX5jsiUe+YIQRtjv/Bmem+kSR84G9TwIB
EaNkMGIwDwYDVR0TAQH/BAUwAwEB/zAPBgNVHQ8BAf8EBQMDBwYAMB0GA1UdDgQW
BBTDrXZGYXS9GyIUBOZrglhwNjjcnTAfBgNVHSMEGDAWgBTYRzrQMKPDDhP5yM84
PshcQmLPGDANBgkqhkiG9w0BAQUFAAOCAQEAdmTP1qVUcAKOf+/zvb2lcLKvFwKT
6KqDlO5NofjqCIfNgCjO2mO176cslnFIbEZQqgGIUnJ3AwfHKHj+U3kM3n5T29kF
xiLKxIDfjsY6qC03KHeGAgxI92XZyPsO1is6Y6qUnAmiwhIp5HS6E0+xIP1shmtJ
ZvqU8bueKUWSjx3JDzq+UNLX5pFkK0P0R90TCUEkBx1FNWqoWwb8zfAuO5zcNTEj
5E9esLjwxJQnIVPiA2l3FfZN9yomK+q7kTZJkX2kMx7G850lPR8CneXZT6bIOfck
Dw3PqQiroMNx2+gzC/f/wTXsF92aujyG+IZx1FIcNg/MoHXBWG7T8YrjnQ==
-----END CERTIFICATE-----
</source>
<p>
You can treat an internal CA (a CA residing on the same EJBCA instance as another CA) as an external CA. 
From the SubCA this works just like the normal case, but on the RootCA you will issue the SubCA as an end entity.
<br/>
This can be useful if you have an HSM setup where only one set of keys can be active at one time, for example using nCipher with
two different, non-persistence, operator cards sets for the RootCA and the SubCA. Using the SubCA as an external CA you can still create
the PKI but with only one CA active at a time.
</p>
<subsubsection name="Using the CLI">
<p>You can also create a CA signed by an external CA using the CLI. The process is basically the same as when using the GUI. 
</p><p>
Create the CA generating a CSR (Crypto token password is set to foo123):
</p> 
<source>
bin/ejbca.sh ca init CaSignedByExteral "CN=This CA is Signed by an external CA" soft foo123 secp256r1 ECDSA 365 null SHA256withECDSA --signedby External -externalcachain chain.pem
</source>
<p>
The file chain.pem contains the certificate chain of the external CA, just as described above.
Running the above command a CSR named 'CaSignedByExteral_csr.der' will be saved to your disk, containing a PKCS#10 CSR in binary format. Send the CSR to the external CA and get the signed sub CA certificate returned back.
</p><p>
Import the sub CA certificate, activating your CA:
</p>
<source>
bin/ejbca.sh ca importcacert CaSignedByExteral subcacertificate.pem
</source>
<p>
The file 'subcacertificate.pem' contains the received sub CA certificate.
</p>
</subsubsection>
</subsection>
<subsection name="Signing an External CA">
<p>
In some cases you might want to have one of your CA:s signing another external CA. This can be done in two ways:
<ol>
<li>Create a certificate profile and an end entity profile for Sub CAs. The certificate profile must be of type 'Sub CA'
(almost at the bottom of the edit certificate profile page).</li>
<li>Create an End Entity where you select a SubCA certificate profile when adding the end entity.</li>
<li>Issue the CA certificate as you would normally issue any end entity certificate.</li>
<li>The SubCA can be managed and revoked conveniently just as other end entities.</li>
</ol>
Using an end entity is the recommended way to sign Sub CAs, because of the better management features.
</p>
<p>
In EJBCA 5.0.x and before it was possible to manage external CAs in a more visible manner. This feature is no longer available.
</p>
</subsection>
<subsection name="Renewing a SubCA signed by an external CA">
<p>
When you renew a SubCA signed by an external CA you create a new request that is sent to the external CA.
The External CA issues a new certificate that you import in your SubCA.
</p>
<p>
You can renew the SubCA in two ways:
<ol>
<li>Using the same CA signing keys.</li>
<li>Generating new CA signing keys.</li>
</ol>
To renew a CA go to "Edit Certificate Authorities" select the SubCA and use the button "Renew CA" in the bottom of the page.
The CA's Crypto Token must be active to make a certificate signing request (and optionally for key generation).
</p>
<p>
When you generate new keys for the SubCA, the new keys will not be used until you upload a new CA certificate for this key pair.
Until then, the CA will continue to work as if nothing has happened (and issue certificates with the current CA signing key pair).
</p>
</subsection>
<subsection name="Requesting a cross or bridge certificate">
<p>
If you have set up your own CA you can request another CA to cross certify your CA, or you can get certified by Bridge CA such as the Federal Bridge.
This is done in the following way:
<ol>
<li>In the 'Edit CA' page, choose a CA that you intend to get cross certified by another CA by and click on 'Edit'.</li>
<li>In the lower part of the screen, click on 'Make Certificate Request' and skip upload of the signing certificate chain.</li>
<li>Save the created PKCS#10 certificate request to disc and send to the other CA.</li>
</ol>
</p>
<p>
Now you have a certificate request to send to the other CA or Bridge CA. When the other CA have issued a certificate for you, everything is completed.
You don't need to (and usually should not) import the cross-certificate or bridge-certificate in EJBCA.
What you need to do is make sure the clients using the certificates issued by your CA
have access to the correct certificate chain.
If you are cross-certified with several other CA, multiple possible certificate chains exist.
</p>
<p>
Handling the certificate chains on clients is out of the scope for EJBCA.
</p>
<p>
If you choose to upload the resulting certificate chain, this will convert your CA from an internal CA to an externally signed CA.
</p> 
</subsection>
<subsection name="Signing a roll-over certificate (NewWithOld)">
<p>
One way to handle update of trust points when renewing a Root CA is to generate a certificate that contains the new key signed with the old key.
For X.509 CAs you can create such a certificate by checking "Create link certificate" before renewing the CA.
The latest link certificate can then be downloaded from the edit CA view.
</p>
<p>
For CVC CAs a link certificate is always generated during the renewal. 
</p>
</subsection>
<subsection name="Converting an OpenSSL CA">
<p>
You can convert a PEM-style Root CA key to a PKCS12 file that can be imported in EJBCA.
</p>
<source>
openssl pkcs12 -export -out server1.p12 -inkey cakey.pem -in ca.pem -name privateKey
</source>
<p>
You can import the CA with the Admin GUI or the CLI. See the section 'Export and import CAs'.
<br/>
After importing CAs you can also import users and certificates. See the section 'Import users'. 
</p></subsection>
</section>

<section name="Certificate profiles">
<p>
CertificateProfiles define different types of certificates, with 
regards to DN-contents, extensions etc. 
</p>
<subsection name="Create a Certificate Profile for SSL servers">
<p>This section will show you how to create a certificate profile suitable for SSL/TLS servers, such as web servers.
</p>
<ul>
<li>Under "CA Functions", press "Certificate Profiles".</li>
<li>Enter a name for your end entity certificate profile e.g. "SSLServerCertificateProfile", and press "Add".</li>
<li>Select "SSLServerCertificateProfile" and press "Edit Certificate Profile".</li>
<li>Under "Validity" enter 365d (1 year validity).</li>
<li>Under "Key usage", choose "Digital Signature" and "Key encipherment (ctrl-click to select multiple).</li>
<li>Un-check "Allow Key Usage Override".</li>
<li>Check "Use Extended Key Usage".</li>
<li>Under "Extended Key Usage", choose "Server Authentication".</li>
<li>Under "Available bit lengths", "1024 bit", "2048 bit" and "4096 bit".</li>
<li>Under "Available CAs", choose your CA "ManagementCA" (the CA you use to issue server certificates).</li>
<li>Under "Type", select "End Entity".</li>
<li>Press "Save"</li>
</ul> 
<p>Another way of creating a new Certificate Profile is to use an existing profile as template:</p>
<ul>
<li>In the list of certificate profiles, click on "clone" the fixed profile SERVER.</li>
<li>Enter a name for your end entity certificate profile e.g. "SSLServerCertificateProfile", and press "Create from template".</li>
<li>Press "Save"</li>
</ul> 
</subsection>

<subsection name="Import/Export Certificate Profiles">
<p>It is possible to import and export certificate profiles in the Admin GUI.</p>
<subsubsection name="Export Certificate Profiles">
<p>
Every non-fixed certificate profile is exported to the specified local directory as an xml file inside a zip file named "certprofiles.zip". 
The name of the xml file has the format certprofile_PROFILENAME-PROFILEID.xml.
</p>
</subsubsection>
<subsubsection name="Import Certificate Profiles">
<p>
All profiles to be imported should be included in a zip file. The file containing a single profile should be an xml file and its name 
is in the format certprofile_PROFILENAME-PROFILEID.xml. Any file with a name that is not in this format will be ignored.
</p>
</subsubsection>
</subsection>

<subsection name="Certificate Profile fields">
<subsubsection name="Validity">
<p>
The validity determines the validity in days of certificates from the time the certificate is issued.
The field 'notAfter' in the issued certificate will have the value 'now + validity days'.
It can also, if noted in the field, be entered in terms of years, months and days. For instance '10y 9mo 8d' is translated to 
10 years, 9 months and 8 days from now.
Instead of the validity period an absolute end date could specify the end of the validity period. This date should be given in
the format 'yyyy-MM-dd HH:mm:ssZZ', for example, the date 'June 3rd, 2011 at 6:15 PM' in UTC should be given as '2011-06-03 18:15:00+00:00'. 
</p><p>
The check box 'Allow Validity Override' will make it possible to request a specific notAfter date. This is currently possible when using CMP (the CRMF request format), or when using the API to issue certificates.
</p><p>
The validity of a certificate is determined as follows:
<ul>
<li>The Validity field in the profile specifies the maximum allowed validity, which will be the validity if nothing else is specified.</li>
<li>If 'Allow validity override' is enabled in the profile the profile value can be overridden with:
<ul><li>Start and end time specified when adding the end entity, of allowed in the End Entity Profile.</li>
<li>Requested validity from the certificate request (CMP for example).</li>
</ul>
</li>
</ul>
<p>There are some constraints for the validity of a certificate issued by the CA:
<ul>
<li>The notAfter time of issued certificates can never be longer than the validity time specified in the certificate profile used.</li>
<li>The notAfter time of issued certificate can never be longer than the CAs own validity.</li>
<li>notAfter can never be before nofBefore and vice versa.</li>
<li>notBefore is normally 10 minutes before the current time, to avoid problems with clocks that are a few minutes out of sync.</li>
<li>notBefore can be set to any desired value if allow validity override is enabled, except for the limitation with regard to notAfter.</li>
<li>notAfter can be set to any desired value if allow validity override is enabled, except for the limitation of max and min value specified above.</li>
</ul>
</p>
</p>
<p>If the validity is for a CA the certificate profile specifies the maximum validity, but it can be shorter if specified when adding the CA.
The validity of the CA can never be longer than the value specified in the profile.
</p>
<p>
The last option you have is to set a global maximum validity date for certificates issued from the EJBCA instance. You can do this by setting the option 'ca.toolateexpiredate'
in ejbca.properties. See the documentation in conf/ejbca.properties.sample for more details. If a validity period would exceed this value, if it is configured, an error occurs and no certificate is issued. 
</p>
</subsubsection>
<subsubsection name="Allow extension override">
<p>
If extension override is allowed, X509 certificate extensions featured in <i>certificate requests</i> are honored, otherwise they are ignored.
Externally supplied extensions are added to certificates "as-is".
In the case such an extension is already defined in the certificate profile (i.e. having the same OID), the definition in the profile 
will be overridden including the criticality flag.
</p>
<p>
This option should only be used when you know that the request comes from a very trusted source. Such a trusted source is  
normally an RA through CMP or WebService.
</p>
<p>
Currently this works for extensions in CRMF (CMP) requests and extensions embedded as a pkcs_9_at_extensionRequest in PKCS#10 requests.
</p>
</subsubsection>
<subsubsection name="Allow subject DN override by CSR">
<p>
If subject DN override is allowed, the X509 subject DN extension created in a certificate can come directly from the 
CSR in the request sent by the user. This is instead of the normal way where the user's registered DN is used.
<br/>
Using this option certificates with very strange DNs, or with DNs in very specific orders can be created.
</p>
<p>
This option should only be used when you know that the request comes from a very trusted source. Such a trusted source is  
normally an RA through CMP or webservice.
</p>
</subsubsection>
<subsubsection name="Allow subject DN override by End Entity Information">
<p>
If subject DN override is allowed, the X509 subject DN extension created in a certificate can come directly from the 
request meta information sent by the user. This is instead of the normal way where the user's registered DN is used.
<br/>
Using this option certificates with very specific ordering of subject DN fields can be created.
<br/>
<ul>
  <li>The provided subject will still have black-listed characters and white spaces removed.</li>
  <li>'+' will be escaped, since we don't support multivalued RDNs yet.</li>
  <li>RDNs with empty attribute values will be removed.</li>
  <li>Names have to comply with the CeSecore naming style (e.g. SURNAME=... instead of SN=..).</li>
</ul>
</p>
<p>
This option should only be used when you know that the request comes from a very trusted source (RA) over EJBCA's web service
"certificateRequest" call.
In this case the SubjectDN of the UserDataVOWS object will be used without modification.
</p>
<p>
In the case that "Allow subject DN override by CSR" is also specified, the CSR's subject DN will be used when present.
</p>
</subsubsection>
<subsubsection name="Allow certificate serial number override">
<p>
The generated certificate serial number could be overridden if "Allow certificate serial number override" is enabled in the used certificate profile.
</p>
<p>
If the Admin GUI should be used for creating entities you must also add "Custom certificate serial number" to the used end entity profile.
</p><p>
With web services you use the 'setCertificateSerialNumber' for your 'UserDataVOWS' user.
</p>
<p>
With External RA (ExtRA) the CertificateRequestRequest takes a certificate serial number as a parameter.
</p>
<p>
Please note that the row 'serialNumber' number in the table 'CertificateData' of the database must have an unique index for this feature to work should work, normally you use an index for unique issuerDN, serialNumber.
Without index the feature is automatically disabled.
</p>
<source>
create unique index certificatedata_idx1 on CertificateData (issuerDN,serialNumber);
</source>
<p>
If you run the WS stress test of clientToolBox you may specify that the test should use 'setCertificateSerialNumber'. A new random serial number will then be used for each created user.
The java system property 'maxCertSN' specifies how many bits that should be in the serial number. Example:
</p>
<source>
JAVA_OPT="-DmaxCertSN=16" $EJBCA_HOME/dist/clientToolBox/ejbcaClientToolBox.sh EjbcaWsRaCli stress WsCA1 20 2000 wsCreatedUser wsCreatedUser
</source>
</subsubsection>
<subsubsection name="Allow back dated revocation">
<p>
Revocation information of a revoked certificate contains the date and time from which the certificate is not valid (the revocation time).
Normally the revocation time is set to the time of the revocation. But with this feature enable it is possible to set an earlier time when
revoking a certificate from the profile. This is called a back dated revocation.
</p><p>
Currently you can only back date revocations with the use of Web Service, either by using the WS API call
<a href="ws/org/ejbca/core/protocol/ws/client/gen/EjbcaWS.html#revokeCertBackdated(java.lang.String,%20java.lang.String,%20int,%20java.lang.String)">revokeCertBackdated</a>
in your application or with the <a href="adminguide.html#Using the Web Services CLI">Web Services CLI</a>.
</p>
<note>
Do not enable this feature if the profile will be used by a CA that is issuing delta CRLs.
</note>
</subsubsection>
<subsubsection name="Path Length Constraints">
<p>
Note: this extension is only applicable for immediate CA certificates
and it sets how deep the succeeding certificate hierarchy may be.
If it is set to 0 this CA certificate is the last CA in a chain and only end entity certificates may follow.
<br/>From <a href="http://www.ietf.org/rfc/rfc5280.txt">RFC5280</a> (4.2.1.9):</p>
<source>
The pathLenConstraint field is meaningful only if the cA boolean is asserted and the key usage extension, if present, asserts the
keyCertSign bit (Section 4.2.1.3). In this case, it gives the maximum number of non-self-issued intermediate certificates that may
follow this certificate in a valid certification path. (Note: The last certificate in the certification path is not an intermediate
certificate, and is not included in this limit. Usually, the last certificate is an end entity certificate, but it can be a CA
certificate.) A pathLenConstraint of zero indicates that no non self-issued intermediate CA certificates may follow in a valid
certification path. Where it appears, the pathLenConstraint field MUST be greater than or equal to zero. Where pathLenConstraint does
not appear, no limit is imposed.   
</source>
</subsubsection>

<subsubsection name="Issuer Alternative Name">
<p>
Using the Issuer Alternative Name extension simply copies the Subject Alternative Name value from the issuing CA certificate and places it into the certificate produced.
</p>
<p>An example of usage is to create a CA with Subject Alternative Name "rfc822Name=ca@org.org", and including that in the CA certificate. If you include Issuer Alternative Name in the 
certificate profile used to issue end entity (or sub CA) certificates, the end entity certificates will get Issuer Alternative Name "rfc822Name=ca@org.org". 
The end entity certificates can have a totally different Subject Alternative Name, as this is registered for the specific end entity.
</p>
</subsubsection>

<subsubsection name="CRL Distribution Points">
<p>
The CRL Distribution Point (CDP) extension is provided as info for clients verifying a certificate. The value is a URI 
that points to a CRL that can be used to check if the certificate is revoked. The CRL is issued by the CA. 
There are different kinds of CRL Distribution Points and currently EJBCA supports a URI.
</p>
<p>
Note that you are responsible for the order and encoding of your CRLIssuer, if this is important check it!
</p><p>
A CRLDistributionPoint for a CA in EJBCA could look like:
</p>
<source>
http://host:port/ejbca/publicweb/webdist/certdist?cmd=crl&amp;issuer=url-encoded-issuerDN
</source>
<p>
(such as the link from the web distribution pages)
</p>
<p>
<ul>
<li>host is the DNS name by which the CA is accessible. Port 8080 is the default port that JBoss listens to, but if you changed the JBoss port, this value should also change.</li>
<li>url-encoded-issuerDN is the CAs common name as configured when the CA was created. This is the same DN as occurs as Issuer in certificates issued by this CA.</li>
</ul>
</p>
<p>
When configuring this extension you should take the URI entered and test it in a normal browser, from another machine than the CA, to see that it works before issuing any certificates.
</p>
<p>
It should also be possible to use an LDAP distribution point, if you have configued a publisher to publish CRLs to LDAP.
</p>
<source>
ldap://yourLdapServer:port_number/cn=CA-test,ou=CRLPUB,dc=mycompany,dc=com?certificateRevocationList
</source>
<p>
When defining CRL distribution point and CRL issuer in a certificate profile, you can choose to set the values in either 
the certificate profile, or in the CA configuration (edit CAs). By having the setting in the CA configuration it is possible to use the same 
certificate profile for several CAs, otherwise you would have to create a new certificate profile for all CRL distribution points.
<br/>
By checking 'Use CA defined CRL Distribution Point' you can configure the CRL distribution point in the edit CA page instead, and use this value 
in every certificate profile that uses that CA. It is a convenience function, so you don't have to enter the same CDP in all certificate profiles.
</p>
<p>
It is possible to configure
multiple URLs for CDPs if they are separated by ';'. 
For example: 
<br/>http://cdpurl-1/mycrl.der;http://cdpurl-2/crl.crl
</p><p>
The same applies to CRLIssuer, for example: 
<br/>CN=Foo,C=SE;CN=Bar,C=US
</p>
<p>
Please note that if an URI contains a ';' it has to be double-quoted.
For example if you have two URLs:
<ul>
<li>http://cdpurl-1/mycrl.der</li>
<li>http://cdpurl-2/getcrl;binary</li>
</ul>
You could then put them together as:
<br/>http://cdpurl-1/mycrl.der;"http://cdpurl-2/getcrl;binary"
</p>
</subsubsection>

<subsubsection name="CRL Issuer">
<p>
According to <a href="http://www.ietf.org/rfc/rfc3280.txt">RFC3280</a> a CRL issuer is:
</p>
<source>
An optional system to which a CA delegates the publication of certificate revocation lists;
</source>
<p>
The contents of the field in the profile is a DN, like "CN=CRLIssuerForManagementCA,O=foo,C=SE".
You have to build the actual CRL Issuer software yourself.
</p>
</subsubsection>

<subsubsection name="Freshest CRL">
<p>(a.k.a. Delta CRL Distribution Point)</p>
<p>The Freshest CRL extension is used for Delta CRLs. How to issue delta CRLs is explained in CA configuration.
The freshest CRL extension identifies how delta CRL information is obtained. The same syntax is used for this extension and the cRLDistributionPoints extension,
</p> 
</subsubsection>

<subsubsection name="OCSP Service Locator">
<p>
This extension is used when revocation information for the certificate containing this extension is available using the
Online Certificate Status Protocol (OCSP) [<a href="http://www.ietf.org/rfc/rfc2560.txt">RFC2560</a>].
The URI field is the location of the OCSP responder, using the conventions defined in
<a href="http://www.ietf.org/rfc/rfc2560.txt">RFC2560</a>, usually a plain URL such as http://ocsp.company.com/.
The default URL for the internal OCSP responder in EJBCA is http://hostname:8080/ejbca/publicweb/status/ocsp. 
</p>
</subsubsection>

<subsubsection name="CA Issuer URI">
<p>
This value is used for the Authority Information Access CRL Extension as specified in <a href="http://tools.ietf.org/rfc/rfc4325.txt">RFC4325</a>.
The URI specified in this field must point to a certificate containing file containing either a single certificate (.cer) or a collection of 
certificates (.p7c).

</p>
</subsubsection>

<subsubsection name="Use LDAP DN order">
<p>
In a certificate the order of the DN components (CN,O,C etc) can be put in different order, in the binary encoded certificate.
</p>
<ul>
<li>last-to-first, forward (historically called LDAP DN Order in EJBCA): CN=Common Name, O=Organization, C=Country</li>
<li>first-to-last, reverse order: C=Country, O=Organization, CN=Common name</li>
</ul>
<p>
When using string representation of DNs, the <b>actual</b> order is commonly not displayed, but the tool used will display in the order it sees fit which might be the reverse of the real, binary, order.
In order to see the real, binary, order an asn1 parsing tool, like OpenSSL, can be used. 
In practice DN order can be important as comparisons is often done using string comparisons, where the string value may be depending on the order or not.
</p>
<p> 
The most common order is first-to-last (i.e. C,O,CN), but for historical reasons EJBCA uses last-to-first (CN,O,C). 
Some applications do require first-to-last order however and therefore EJBCA gives you the choice (named as 'non LDAP DN order').
There are two places in EJBCA where this can be configured:
</p>
<ul>
<li>In the Certificate profile (Certificate Profiles)</li>
<li>In the CA configuration (Edit Certificate Authorities)</li>
</ul>
<p>
The relationship between the settings is that they are both evaluated in a logical AND expression. 
This means that if both are true the DN will have last-to-first (LDAP) DN order, but if any one of them is false the DN will have X.500 order.
</p>
<p>
For some references see <a href="http://www.ietf.org/rfc/rfc2253.txt">RFC2253</a> and <a href="http://www.ietf.org/rfc/rfc4514.txt">RFC4514</a>
</p>
</subsubsection>
<subsubsection name="Extended Key Usage">
<p>
The meaning of Extended key usage is defined in <a href="http://www.ietf.org/rfc/rfc5280.txt">RFC5280</a>.
Normally the values specified in the fixed certificate profiles are good for the usage the fixed profile is for. 
</p>
<p>
You can define your own extended key usages very simple. Edit the file EJBCA_HOME/conf/extendedkeyusage.properties and add your custom 
extended key usages in the end. Be sure to follow the numbering. 
After editing the file, simply build and re-deploy EJBCA (ant clean; ant deploy).
</p>
</subsubsection>

<subsubsection name="Document Type List">
<p>The DocumentTypeList extension is used to indicate the document types (as contained in the MRZ) that the corresponding document signer is allowed to produce. 
The list should be separated with a comma ','. For example: "P", or "P,ID"</p>
<p>See ICAO MRTD Technical Report LDS and PKI Maintenance for reference.</p>
</subsubsection>

<subsubsection name="Private Key Usage Period">
<p>
The Private Key Usage Period certificate extension is specified in <a href="http://www.ietf.org/rfc/rfc3280.txt">RFC 3280</a>.
</p>
<p>
EJBCA calculates the extension's notBefore and notAfter components based on the issuing time of the certificate (cert.notBefore) 
and the values filled into the "Start offset" (startOffset) and "Period length" (periodLength) fields as follows:
</p>
<source>
notBefore = cert.notBefore + startOffset
notAfter = notBefore + periodLength
</source>
</subsubsection>
<subsubsection name="Certificate Transparency (Enterprise only)">
<p>This is a module in EJBCA Enterprise Edition that implements Certificate Transparency (CT) as specified in <a href="http://tools.ietf.org/html/rfc6962">RFC 6962</a>.
The purpose of CT is to create public audit logs of all certificates issued by the public SSL/TLS CAs. The presence of audit records is planned to be required for EV certificates in Google Chrome from February 2015 (and other web browsers and non-EV certificates later on as well). Note that CT is only relevant for CAs issuing <em>public SSL/TLS</em> certificates; other types of CAs should not use CT. More information can be found on the <a href="http://www.certificate-transparency.org/">CT website</a>.</p>

<p>The following options are visibile if the CT module is available (i.e. in the enterprise edition of EJBCA):</p>

<ul>
<li>Use in new certificates: During certificate issuing, whether EJBCA should submit a pre-certificate to CT logs and include the resulting SCTs in the certificate.</li>
<li>Use in OCSP: Whether EJBCA should submit certificates and fetch SCTs from CT log during OCSP requests, and include the SCTs in an OCSP response extension.</li>
<li>Use CT publishers: Whether certificates should be published by the CTCustomPublisher. A publisher of the type CTCustomPublisher must be created and enabled in the certificate profile.</li>
</ul>

<p>Depending on which of the options above are enabled, one or more of the following options may appear:</p>

<ul>
<li>Enabled CT Logs: Which logs to submit to and obtain Signed Certificate Timestamp (SCTs) from. New logs can be added in the System Configuration, see the <a href="adminguide.html#Certificate%20Transparency%20(Enterprise%20only)">admin guide</a>.</li>
<li>Minimum number of SCTs: If fewer servers respond with an SCT than this number, the underlying operation will fail (certificate issuing or generation of an OCSP response extension).</li>
<li>Maximum number of SCTs: After having received this number of SCTs, EJBCA will stop contacting log servers.</li>
<li>Submit existing certificates: If existing certificates (defined as not already having an SCT) should be submitted to CT logs during OCSP responses or publishing.</li>
<li>Number of retries: If a log server times out it will be tried again after all other logs have been tried. This is the maximum number of tries per server.</li>
</ul>

<p>
If part of the DNS in the SubjectAlternativeName extension should be a secret, that part can be redacted and replaced by the String "(PRIVATE)" in the precertificate 
that will be published to the Certificate Transparency Log. 	When adding the end entity to EJBCA, the part of the DNSName that should be redacted in the SubjectAlternativeName in the precertificate should be surrounded 
by parentheses. For example, when entering DNSName "(top.secret).domain.se", the precertificate in the Certificate Transparency Log will have the DNSName 
"(PRIVATE).domain.se" in its SubjectAlternativeName, but the certificate itself will have the DNSName "top.secret.domain.se" in its SubjectAlternativeName.
EJBCA implements this feature according to RFC 6962.
</p>

</subsubsection>
<subsubsection name="Cardnumber">
<p>
Select this if you want to use the SEIS Cardnumber Extension. The card number is a unique identifier stored in the certificate and should also be printed on top of the card on which the certificate is stored.
When used, the card number needs to be set for the end entity before creating a certificate.
The extension is specified in the the Seis document  SS 614331 chapter 4.3 and has OID 1.2.752.34.2.1.
</p>
</subsubsection>
<subsubsection name="Subset of Subject DN">
<p>By Using a subset of Subject DN in the certificate you can register users with more information than is present in the issued certificate.
Example:
</p>
<ul>
<li>Use "Subset of Subject DN" in a certificate profile, with selected values CN,O and C.</li>
<li>Register an end entity with "CN=Tomas Gustavsson,O=PrimeKey,OU=Ignored,C=SE", and the configured certificate profile.</li>
<li>Issue a certificate using the certificate profile.</li>
<li>Issue a certificate. The issued certificate will contain subject DN "CN=Tomas Gustavsson,O=PrimeKey,C=SE".</li>
</ul>
<note>
Do not use a "Subset of Subject DN" when issuing CA certificates. That can have undesired consequences, such as colliding CAIds and inability to find CA certificates.
</note>
</subsubsection>
<subsubsection name="Single Active Certificate Constraint">
<p>
This value add the constraint that only a single active certificate may exist for an end entity at any point of time. Issuing a new certificate for an end entity using this constraint automatically
leads to the revocation of any unrevoked and unexpired previous certificates. Revocation reason will be set as "Superseded".
</p>
<note>
This configuration value is only available for End Entity Certificate Profiles. 
</note>
</subsubsection>


</subsection>
</section>

<section name="End Entity profiles">
<p> 
EndEntityProfiles defines which parts of user DN should be registered for various types of end entities.
It defines which parts that is already pre-set, and which can be altered etc. It also contains other information, that is specific to each individual end entity, for issuance of certificates. 
</p>
<p>
An EndEntityProfile can be connected to specific CertificateProfiles 
so users belonging to a specific EndEntityProfile can only get 
certificates from the specified CertificateProfile.
</p>
<subsection name="Create an End Entity Profile for SSL servers">
<p>This section will show you how to create an end entity profile suitable for SSL/TLS servers, such as web servers.
You should previously have created the certificate profile for SSL servers in the section "Create a Certificate Profile for SSL servers". 
</p>
<ul>
<li>Under "RA Functions", press "Edit End Entity Profiles".</li>
<li>Enter a name for your end entity profile e.g. "SSLServerEndEntityProfile", and press "Add".</li>
<li>Select "SSLServerEndEntityProfile" and press "Edit End Entity Profile".</li>
<li>Under the "Subject DN Fields" select "O, Organization" and press "Add".</li>
<li>At "O, Organization" enter "EJBCA Edu" in the textbox, check the "required" checkbox and uncheck the "modifiable" checkbox.</li>
<li>Under the "Subject DN Fields" select "C, Country" and press "Add".</li>
<li>At "C, Country" enter "SE" in the textbox, check the "required" checkbox and uncheck the "modifiable" checkbox.</li>
<li>Under the "Subject Alternative Fields" select "DNS Name" and press "Add".</li>
<li>Uncheck "Use" at "Email Domain".</li>
<li>Under "Default Certificate Profile", choose "SSLServerCertificateProfile" (created earlier).</li>
<li>Under "Available Certificate Profiles", choose "SSLServerEndEntityCertificateProfile".</li>
<li>Under "Default CA", choose "ManagementCA" (the CA you use to issue server certificates).</li>
<li>Under "Available CAs", choose "ManagementCA" (same as above).</li>
<li>Under "Default Token", choose "User Generated".</li>
<li>Under "Available Tokens", choose "User Generated", "P12", "JKS" and "PEM" (ctrl-click to select multiple).</li>
<li>Press "Save".</li> 
</ul>
</subsection>

<subsection name="Import/Export End Entity Profiles">
<p>It is possible to import and export end entity profiles in the Admin GUI.</p>
<subsubsection name="Export End Entity Profiles">
<p>
Every non-fixed end entity profile is exported to the specified local directory as an xml file inside a zip file named "entityprofiles.zip". 
The name of the xml file has the format entityprofile_PROFILENAME-PROFILEID.xml.
</p>
</subsubsection>
<subsubsection name="Import End Entity Profiles">
<p>
All profiles to be imported should be included in a zip file. The file containing a single profile should be an xml file and its name 
is in the format entityprofile_PROFILENAME-PROFILEID.xml. Any file with a name that is not in this format will be ignored.
</p>
</subsubsection>
</subsection>

<subsection name="End Entity Profile fields">
<subsubsection name="Password Fields">
<p>
Passwords are used when a user (end entity) is requesting a certificate and/or when generating a keystore. Usually this is required
and no default value is configured. When the password is only used during the request procedure this is called an "Enrollment Code" in the public web
to avoid making users confused or worried, since it is only valid once and is not used to protect the keys.
There is no difference between an "Enrollment Code" and a "Password" other than the name.
</p><p>
You can use auto-generation of passwords with email notification to send the user a generated
password together with information on how to fetch the certificate.
</p><p>
You can also specify the minimum bit-strength a password is allowed to have in order to make policy
compliance easier. The strength of a password is calculated as <i>floor(log2(number of allowed
password characters)*(the number characters in the password))</i>. For non-generated passwords the
<i>number of allowed password characters</i> is estimated to 72. Example usage:
<pre>
Password: "foobar123" (9 characters)
Allowed characters: a-z, A-Z, 0-9, 22 additional printable characters (72 in total)
Password strength / char: log2(72) = 6.17
Password strength: floor(6.17 * 9) = floor(55.53) = 55 bits
</pre>
Setting this value to 55 will require the RA admin to set a 9 character password or longer.
</p>
</subsubsection>
<subsubsection name="Subject DN Fields">
<p>Subject DN fields define which DN components should be present for an end entity. If "Enable End Entity Profile Limitations" in the "System Configuration" is enabled
this restricts the values that can be used when adding or editing an end entity using all interfaces, be it web GUI, web service, cmp or something else.
If you define values as required and non-modifyable you can specify one or more values. If you specify multiple values separated by ';', the admin in the web GUI will get a drop-down list to select from.
</p>
<p>
When having several fields of a certain type with mixed required and not required fields some special handling might be needed when adding users using web sevrice API.
If you have for example:
</p>
<ul>
<li>The first OU field is required (Bar1) and not modifiable.</li>
<li>The next 3 OU fields are modifiable only (not required).</li>
<li>The last OU is required (Bar1) and not modifiable.</li> 
</ul>
<p>Then when adding an end entity with DN "CN=Foo,OU=Bar1,OU=Bar2" will result in an error:</p>
<source>
org.ejbca.core.model.ra.raadmin.UserDoesntFullfillEndEntityProfile: Subject DN field 'ORGANIZATIONALUNIT' must exist. 
</source>
<p>This is because EJBCA can not keep track of which fields you mean to set, if it is one of the required or non-required. To help EJBCA determine this you can specify the non-required OU fields with empty values, "CN=Foo,OU=Bar1,OU=,OU=,OU=,OU=Bar2".
</p>
<p>There is one particular subject DN field that deserves extra informations, <strong>postalAddress</strong>. 
<br/>PostalAddress is not encoded simply as a string as one might think, but is an <a href="http://www.alvestrand.no/objectid/2.5.4.16.html">ASN.1 sequence</a>. 
If you only enter the value as a string it will be encoded as a simple UTF8String, which is invalid. You need to enter is as a hex encoded ASN.1 DirectoryString.
This is done by hex encoding the ASN.1 object and prepending it with #, i.e. #30...</p>
</subsubsection>
<subsubsection name="Subject Alternative Names">
<p>Subject alternative names (altNames) are extra naming items that are not fit to have in the Distinguished Name, such as email, dns, ip address etc.
There are a number of standard ones, and the possibility to define special ones, which many companies have done for altNames
such as MS UPN, GUID, Krb5PrincipalName.
</p>
<p>
Subject alternative names can be: rfc822Name=&lt;email>, dNSName=&lt;host name>, uri=&lt;http://host.com/>, ipaddress=&lt;address>, upn=&lt;MS UPN>, guid=&lt;MS globally unique id>, directoryName=&lt;LDAP escaped DN>, krb5principal=&lt;Krb5 principal name>, permanentIdentifier=&lt;Permanent Identifier values&gt;
</p>
<strong>RFC 822 Name (e-mail address)</strong>
<p>Configuration of email fields can be a bit tricky, since there are two places in the End Entity profile where email adresses can be configured:
</p>
<ol>
<li>Email field - registers a user email in the EJBCA database (used for email notifications etc).</li>
<li>Subject alternative name field - add an email address to the SubjectAlternativeName field in an issued certificate.</li>
</ol>
<p>These two fields can be the same, but does not have to be, which is why configuration can be a bit tricky if you configure them individually.</p>
<p>For the Subject alternative name field there are different options:</p>
<ul>
<li>Use entity e-mail field checked: this results in a single entry for 'End Entity E-mail' when adding a new end entity.</li>
<ul><li>Required: if checked the 'End Entity E-mail' field must be filled and can not be omitted.</li></ul>
<li>Use entity e-mail field unchecked: this results in a separate input field for 'RFC 822 Name'.</li>
<ul><li>Required: if checked the 'RFC 822 Name' field must be filled and can not be omitted.</li>
<li>Modifiable: if checked the RA administrator can fill in an email address. <br/>
If a domain (foo.com) is set in the profile the RA administrator can fill in the first part of the email, i.e. before @ (since the domain is pre-filled), but also the domain part can be modified.<br/>
If Modifiable is unchecked a full, fixed, email address must be provided in the profile, and all end entities will be registered with this email address (the profile can be configured with only domain part, but filling an email adress by the RA administrator later will not work).</li></ul>
</ul>

<strong>IP address</strong>
<p>An IP address can be either an IPv4 address or an IPv6 address.
<br/>Example IPv4:
</p>
<source>
192.168.2.54
</source>
<p>Example IPv6:
</p>
<source>
2001:DB8:85A3:0:0:8A2E:370:7334
</source>
<strong>Krb5 Principal Name</strong>
<p>The Krb5 principal name is of the form "principal1/principal2@realm", and should be entered as such in the field.
Example:
</p>
<source>user@PRIMEKEY.SE
</source>
<p>for a normal user in the realm PRIMEKEY.SE.
<br/>Or:
</p>
<source>
krbtgt/PRIMEKEY.SE@PRIMEKEY.SE
</source>
<p>for a kdc.
</p>
<strong>Permanent Identifier (RFC 4043)</strong>
<p>The Permanent Identifier is of the form "identifierValue/assigner" where identifierValue is an optional string and assigner is an optional OID, and should be entered as such in the field. If the identifierValue string contains a '/' (slash) character it should be escaped with an back slash ("\/").
<br/>Examples:
</p>
<source>
abc0123/1.2.3.4
abc0123/
/1.2.3.4
/
</source>
</subsubsection>
<subsubsection name="Certificate Validity">
<p>
By setting the Certificate Validity Start Time and End Time you can precisely specify, for a specific end entity, 
when the certificate will start being valid and when the certificate will cease being valid.
<br/>
When selecting to use Certificate Validity Start or End time you will get the possibility to enter these fields when a new end entity is 
added. You can also specify a default value for the end entity profile. Different formats of specifying the validity time is provided as examples 
in the end entity profile page.   
</p>
<p>This function requires the 'Allow validity override' function in the Certificate Profile.</p>
</subsubsection>
<subsubsection name="Revocation reason to set after certificate issuance">
<p>Using this option you can define that when adding a new user, the revocation state of an issued certificate can be set immediately to something else than 'Active'.
<br/>
Useful if you want to issue certificate that are 'On hold' for users. After the user receives the certificate they might be required to perform some action in order to have their certificate
activated.
<br/>
Most useful when used in combination with OCSP since it will require, in practice, instant revocation checking.
</p>
<p>
When enabling this option in the profile, a corresponding selection will be available when adding new users. The user data corresponding to this option is an ExtendedInformation attribute, ExtendedInformation.CUSTOM_REVOCATIONREASON.
</p>
</subsubsection>
<subsubsection name="Reverse Subject DN Alt Name Checks">
<p>
This checkbox is not recommended to be used in normal operations. When using the External RA and more than one DN field type is set in the profile,
for example one optional OU and one required OU, it might be needed to check this checkbox for the profile validation to work.
<br/>
Only use it in such a special case, if nothing else work. This option may be removed in the future.
</p>
</subsubsection>
<subsubsection name="Maximum number of failed login attempts">
<p>
By choosing a maximum number of failed login attempts the status of a user will change to GENERATED in case a wrong password is entered more than 
the  specified number of times. Note that what is called a "password" in the admin web is often called an "enrollment code" in the public web. The checkbox "Use" must be checked for the end entities to use this feature. If the checkbox "Modifiable" is checked 
the specified number can be changed for a particular end entity at the creation time of the end entity or later by editing it.
</p>
</subsubsection>
<subsubsection name="Custom certificate extension data">
<p>
By checking 'Use' for custom certificate extension data in the end entity profile an text area is provided when adding or editting an end entity for supplying custom certificate extension data.	
</p>
<p>
Extension data are entered in the text area in the same format as for Java properties files. Typically key=value with one entry one each line. What extension  data that is accepted and/or required depends on what custom extensions that has been chosen in the certificate profile as Used Custom Certificate Extensions and how they are configured.
</p>
<p>
For example custom extensions of type BasicCertificateExtension configured with the property dynamic=true accepts custom extension data of the form "OID.value=value" where OID is the OID of the configured extension and value is the value to put in the extension in the configured encoding.
</p>
<source>
1.2.3.4.value = 65486c6c206f6f776c720064
1.5.6.value = Hello world
</source>
<p>
See <a href="adminguide.html#Custom%20Certificate%20Extensions">Custom Certificate Extensions in the admin guide</a> for more information about available extensions, how to configure them and what values they require.
</p>
<p>An example configuration of a certificate extension taking dynamic value in RAW hax encoded format is:</p>
<source>
id1.oid = 1.2.3.4
id1.classpath=org.cesecore.certificates.certificate.certextensions.BasicCertificateExtension
id1.displayname=SingleExtension
id1.used=true
id1.translatable=false
id1.critical=false
id1.property.dynamic=true
id1.property.encoding=RAW
</source>
</subsubsection>
<subsubsection name="Number of allowed requests">
<p>
By checking 'Use' for number of allowed requests you enable the possibility to request several certificates in a row, without the user status being set to generated.
Normally after a username/password pair has been used to generate a certificate, the users status is set from 'new' to 'generated'. This makes the password invalid, thus implementing a one-time password scheme.
By selecting a number higher than one for 'number of allowed requests' the user can request several certificates before the status is set to 'generated'. This makes it possible to enroll for several certificates directly, for example one authentication and one signature certificate.
</p><p>
The 'number of allowed requests' in the End Entity Profile will set the default, and maximum value available when adding or editing a new end entity.
When editing an existing end entity and setting the status to new, from a non-new status, the 'number of allowed requests' will automatically be altered to the default value for the profile. If the end entity profile used no longer uses the 'number of allowed requests' the request counter for the end entity will be removed when the end entity is edited.
</p>
</subsubsection>
</subsection>
<subsection name="Plug in field restrictions">
<p>Administrators can develop further custom user field restictions using the Fieldvalidator as described in <a href="adminguide.html#Customizing%20EJBCA">Customizing EJBCA</a>.
</p>
</subsection>
</section>

<section name="End Entities">
<subsection name="Creating Users">
<p>
Users are added in the Admin GUI, 'Add End Entity' or with the CLI
'bin/ejbca.sh ra addendentity'.
The users DN is normally entered in the CLI as "C=SE,O=MyOrg,OU=MyOrgUnit,CN=MyName".
If a ',' is needed in the DN the comma must be escaped using '\,'.
</p></subsection>

<subsection name="Create server certificates">
<p>
A good way to create server certificates is to generate a
PKCS12, JKS or PEM file for the server, depending on what server it is. This means that the private key is generated by the CA, you do not have to generate a CSR on your server for this.
To do this:
<ol>
<li>
Create desired profiles (the default entity and certificate profiles work fine, but are perhaps too generic).
You certificate profile should have:<br/> 
- KeyUsage: <i>Digital signature, Key encipherment</i><br/>
- Extended key usage: <i>Server Authentication</i><br/>
</li>
<li>Create a user with the Admin GUI or 'bin/ejbca.sh ra'. 
<br/>The Distinguished name (DN) of the server should have the
the servers full hostname (host.domain.com) in the CommonName (CN) field.
<br/>Example DN for webserver: "C=SE,O=AnaTom,CN=
www.anatom.se", or
for mailserver "C=SE,O=AnaTom,OU=Engineering,CN=mail.anatom.se". 
<br/>You can also put the same name (or several names) as a DNSName in SubjectAlternativeNames. 
<br/>For so-called wildcard certificates, use *.anatom.se.
<br/>Set the token type to match the kind of token that should be generated for your server.
</li>
<li>To be able to batch-generate certificates, the batch
generation program must have access to the users (servers) password in order to request
a certificate on behalf of the user. Normally the password is stored in hashed
form, so the password must be stored in clear text form by running
'bin/ejbca.sh ra setclearpwd <i>username password</i>'
</li>
<li>Generate private keys and certificates by running 'bin/ejbca.sh batch'
</li>
</ol>
</p><p>
Many servers (ex Apache, Tomcat) wants keys and certificates
in PEM-format (Apache) or SUN JKS (Tomcat).
To generate PEM-files use token type PEM. The PEM-files will be stored in a
separate subdirectory, 'pem'. The generated PEM-files can be used with
Apache etc, and are NOT protected by any password.
To generate JKS-files use token type JKS. The JKS-files will be stored in the
subdirectory, 'p12' instead of PKCS12-files. The generated JKS-
files can be used with Tomcat etc, and are protected (both private key password
and keystore password) by the users password.
</p>
<p>
If the server generates the keys and a certificate request (CSR) for you, select token type "User generated".
You can use the public enrollment web pages (http://127.0.0.1:8080/ejbca/) to paste the request and receive the certificate.
This function is under "Create Certificate from CSR".
</p>
<p>
It is also possible to use openssl to transform a PKCS12 file to PEM-
format.
</p>
<source>
openssl pkcs12 -in pkcs12-file -nodes
</source>
<p>
copy and paste the private key to key file, the first certificate to
server cert file and last certificate to CA cert file (If your CA is a
subordinate CA to another Root CA, the CA cert file may need to contain the whole cert
chain). Exactly how your server wants the files is server dependent.
</p>
<p>
For your convenience, here is the standard text (<a href="http://www.ietf.org/rfc/rfc2818.txt">RFC2818</a>) how browsers validate the name(s) in the certificate.
</p>
<source>
If a subjectAltName extension of type dNSName is present, that MUST
be used as the identity. Otherwise, the (most specific) Common Name
field in the Subject field of the certificate MUST be used. Although
the use of the Common Name is existing practice, it is deprecated and
Certification Authorities are encouraged to use the dNSName instead.

Matching is performed using the matching rules specified by
[RFC2459].  If more than one identity of a given type is present in
the certificate (e.g., more than one dNSName name, a match in any one
of the set is considered acceptable.) Names may contain the wildcard
character * which is considered to match any single domain name
component or component fragment. E.g., *.a.com matches foo.a.com but
not bar.foo.a.com. f*.com matches foo.com but not bar.com.

In some cases, the URI is specified as an IP address rather than a
hostname. In this case, the iPAddress subjectAltName must be present
in the certificate and must exactly match the IP in the URI.
</source>
</subsection>

<subsection name="Issue a new PKCS#12 keystore for an SSL server">
<p>This section will show you how to issue a PKCS#12 keystore suitable for SSL/TLS servers, such as web servers.
You should previously have created the certificate profile and end entity profile for SSL servers in the sections above. 
</p>
<ul>
<li>Goto "RA Functions" -> "Add End Entity".</li>
<li>Choose the end entity profile "SSLServerEndEntityProfile".</li>
<li>At "Username" enter "testsrv.domain.com".</li>
<li>At Password enter a password.</li>
<li>Under "CN, Common Name" enter "testsrv.domain.com".</li>
<li>And at "DNS Name" enter "testsrv.domain.com".</li>
<li>Under "Certificate Profile" you should not be able to choose anything but the default "SSLServerCertificateProfile".</li>
<li>Under "CA" you should not be able to choose anything but the default "ManagementCA".</li>
<li>Under "Token", choose "P12".</li>
<li>Press "Add".</li>
<li>Goto "Public Web" and then  "Create Keystore".</li>
<li>Enter the username, testsrv.domain.com, and password for the user you created, and press "OK".</li>
<li>Choose "Key length" "1024".</li> 
<li>Under "Certificate Profile" you should not be able to choose anything but the default "SSLServerCertificateProfile" .</li> 
<li>Press "OK".</li>
<li>A new certificate will be generated and downloaded to your desktop.</li>
<li>If you like you can import the P12 file (double-click it on windows) to look at the certificate inside.</li>
</ul> 
</subsection>

<subsection name="Issue a new server certificate from a CSR">
<p>This section will show you how to issue a certificate suitable for SSL/TLS servers from a CSR generated by the server.
You should previously have created the certificate profile and end entity profile for SSL servers in the sections above. 
</p>
<ul>
<li>Goto "RA Functions" -> "Add End Entity".</li>
<li>Choose the end entity profile "SSLServerEndEntityProfile".</li>
<li>At "Username" enter "testsrv.domain.com".</li>
<li>At Password enter a password. It will be used only during enrollment, as a one-time code.</li>
<li>Under "CN, Common Name" enter "testsrv.domain.com".</li>
<li>And at "DNS Name" enter "testsrv.domain.com".</li>
<li>Under "Certificate Profile" you should not be able to choose anything but the default "SSLServerCertificateProfile".</li>
<li>Under "CA" you should not be able to choose anything but the default "ManagementCA".</li>
<li>Under "Token", choose "User Generated".</li>
<li>Press "Add".</li>
<li>Goto "Public Web" and then  "Create Certificate from CSR".</li>
<li>Enter the username, testsrv.domain.com, and password for the user you created. Note that the password field is called "enrollment code" here. Paste the CSR from the server and press "OK".</li>
<li>A new certificate will be generated so you can download it to your desktop.</li>
</ul> 
</subsection>

<subsection name="Create User certificates">
<p>
To enroll for a certificate using a browser, go to http://your_server_name:servlet_container_port/ejbca/
(e.g. http://127.0.0.1:8080/ejbca/) and select &quot;Create Browser Certificate&quot;.
Enter username and enrollment code, click the &quot;OK&quot;-button and follow the instructions.
</p><p>
To enroll for certificates manually (e.g. for server certificates), go to
http://your_server_name:servlet_container_port/ejbca/, select
&quot;Create Server Certificate&quot; and fill out the form.
</p><p>
Note that application for certificates only work when the status of a user is
NEW, FAILED or INPROCESS (one time password thing). The
status is set to
GENERATED after a certificate has been issued. To issue a new
certificate, the
status must be reset to NEW, which can be done through
the Admin GUI or the CLI.
</p><p>
During batch generation of certificates, users with status NEW
or FAILED are
generated. This is due to the possibility that a batch generation for some
reason failed. If it fails status is set to FAILED and you can try again after fixing the
error.
</p>
<subsubsection name="Suite B/ECC Certificates in Browsers">
<p>
IE and Firefox do not yet (march 2014) support browser-based ECC certificate enrollment. They always default to RSA regardless of the CA ECC properties (is there some javascript to override?). 
The way to install ECC certificates in a browser is as follows:
<ol>
<li>Edit batchtool.proprties file in folder conf: keys.alg=ECDSA, keys.spec=P-384 (or whatever named spec you need).</li>
<li>Set all NEW entity passwords first: bin/ejbca.sh ra setclearpwrd entity-user entity-pw.</li>
<li>Run bin/ejbca.sh batch - processes all NEW entities and places p12 files in folder p12 (or batch generate for a single user by appending username to batch command).</li>
<li>Copy the *.p12 files from the p12 directory on the ejbca server.</li>
<li>Install p12 keystore in browser.</li>
</ol>
</p>
</subsubsection>
</subsection>

<subsection name="Certificate Renewal">
<p>Certificate renewal is a often missunderstood term. Certificate renewal simply means issuance of a new certificate containing the same public key as an already issued certificate.
It does not mean issuing a new certificate with the same certificate serial number, and it does not mean that the CA in some magical way has access to the end entitys private key.</p>
<p>To renew a certificate using the admin GUI, simply:</p>
<ol>
<li>Go to 'Search/Edit End Entities' and find the end entity in question.</li>
<li>Set status to NEW.</li>
<li>Have the end entity create a new certificate request (CSR), using the same public key as the first certificate.</li>
<li>Send the new certificate request to the CA (the same way you did when getting the first certificate).</li>
<li>Get the certificate back.</li>
</ol>
<p>Since the CA has all public keys of end entities, as they are in the certificates that the CA stores, this process can be automated.
How to automate that is more advanced and can be done in many ways, suitable for different work-flows. How to do that is not described here.</p>
</subsection>
<subsection name="Request Browser Certificate Renewal">
<p>If renewal is enabled there is an extra link under "Enroll" on the public web page called "Renew Browser Certificate". The page requires 
authentication with a client certificate and makes it possible for the user to request the certificate to be renewed.</p>
<p>Renewal will result in the status of the end entity being set to NEW and the password set to an auto-generated password. The end entity must have 
notifications set or the password will be unretrievable.</p>
<p>
The renewal functionality is provided in a separate web module called renew.war which is not deployed and linked to by default. It can be 
enabled in conf/web.properties by setting web.renewalenabled=true and then (re-)deploy EJBCA. 
</p>
</subsection>
</section>

<section name="Administrators">

<p>
An EJBCA Administrator is identified by information in the client SSL
certificate. The information is validated in the following steps:
<ol>
<li>During the TLS handshake with the application server, the issuer of the
client certificate is verified with a list of trusted CA certificates known as
the 'truststore'.</li>
<li>EJBCA verfies that the client certificate exists in the database and that
it's not revoked. (Configurable in web.properties.)</li>
<li>EJBCA tries to match the information in the certificate with any of the
matching criterias found in the different roles. Matching rules
are evaluated separately so matching with both CN and OU would match all CN
matched certificates and also all OU matched certificates.</li>
<li>If a match is found, the access rules for this group is given to the
administrator.</li>
</ol>
</p><p>
Administrator privileges is configured through "Edit Administrator
Privileges" in the Admin GUI or by using the CLI. If you have locked yourself
out of the GUI, the CLI can add another admin certificate to allow continued
operations.
</p>

<subsection name="Administrators issued by external CAs">
<p>Administrator certificates in EJBCA does not have to be issued by a CA in the same installation, but can be issued by any other CA.
By leveraging this feature you can for example use a national ID for administration of an organizational PKI
</p>
<p>
To use a certificate issued by an external CA as Administrator:
<ol>
<li>Add the CA-certificate to p12/truststore.jks with
<code>keytool -import -trustcacerts -file externalca.pem -keystore p12/truststore.jks -storepass changeit -alias externalca</code></li>
<li>Redeploy EJBCA truststore (ant deploy-keystore) and restart the application server to make sure the new
truststore is in use</li>
<li>Import the CA-certificate under "Admin GUI - Edit Certificate Authorities
 - Import CA Certificate.." or use the CLI</li>
<li>Add the Administrator to the desired role under "Admin GUI
 - Administrator Roles"</li>
<li>To allow administrators to log in when their certificates are not present in the EJBCA database you have to set 
web.reqcertindb=false in conf/web.properties.</li>
</ol>
</p>
<subsubsection name="Installing EJBCA with external administrators">
<p>
You can even install an EJBCA instance from scratch, with a certificate from an external CA as the initial SuperAdmin certificate. 
Start with deploying EJBCA as usual with 'ant deploy', but instead of running 'ant install' you run:
</p>
<source>
bin/ejbca.sh ca importcacert AdminCA adminca.pem -initauthorization
</source>
<p>
This command imports the certificate of the external Administration CA and initializes the authorization system of EJBCA. 
You need to configure SSL and the truststore of the application server yourself, or if you have a p12/tomcat.jks and
p12/truststore.jks this can be done for you on JBoss by 'ant deploy-keystore' and 'ant web-configure'.
</p><p>
The initial administrator that is set up has DN 'CN=SuperAdmin', but you can change this using the -superadmincn (run 'bin/ejbca.sh ca importcacert' for documentation).
Also check the 'bin/ejbca.sh admins' command for information how to configure other admins.
</p>
<p>
After this command is run, and SSL configured correctly, you can log in to EJBCA and create your CAs in the Admin GUI. No initial CA is created for you.
</p>
</subsubsection>
<subsubsection name="Events Log">
<p>
When viewing Ejbca log, a link is provided to view the administrator's certificate in the database. However, the administrator who has his/her certificate issued by an external CA
does not have a certificated stored in the database. So when the external administrator logs in, its certificate serialnumber, issuerDN and subjectDN are stored in the log-file. 
When viewing the log, instead of the link, the external administrator's certificate serialnumber and issuerDN are displayed. In addition, when the viewed event is "Administrator 
Logged In", even the external administrator's certificate subjectDN is displayed.
</p>
</subsubsection>
<subsubsection name="When Approving Actions">
<p>
When there are actions the administrator has to approve, the current administrator's username and e-mail address from the database are compared with those of the requesting administrator
and those administrators who already approved the request to ensure that only legitimate administrators are to approve the current request. However, the administrator whose certificate is 
issued by an external CA has neither username or e-mail address stored in the database. Instead, the administrators' "admindata" are compared to establish the legitimacy of 
the acting administrator. "admindata" is a string containing the administrator's certificate serialnumber and issuerDN.
</p>
</subsubsection>
</subsection>
<subsection name="Renewing Superadmin">
<p>
Renewing the superadmin certificate is done in the same way as for any client certificate. You can use either the Admin GUI or the CLI to renew the superadmin.
The superadmin certificate is normally issued as a PKCS#12 keystore (if not issued as a browser certificate for smart card enrollment). 
</p>
<p>Using the admin GUI:</p>
<ul>
<li>Go to Search/Edit End Entities.</li>
<li>Search for user 'superadmin'.</li>
<li>Click Edit End Entity.</li>
<li>Set a new password and set status to NEW, click Save.</li>
<li>Go to Public Web and then Create Keystore.</li>
<li>Enter superadmin username, and the password you gave.</li>
<li>In the next screen, select key length 2048 and click OK.</li>
<li>Your new superadmin keystore is downloaded. You can install it in your browser.</li>
</ul>
<p>Using the CLI:</p>
<source>
bin/ejbca.sh ra setendentitystatus superadmin 10
bin/ejbca.sh ra setclearpwd superadmin password
bin/ejbca.sh batch
</source>
<p>Your new superadmin keystore is generated and stored in sudirectory p12. The password is password, as given to the setclearpwd command.
</p> 
</subsection>
</section>

<section name="Administrator Roles">
<p>This section is a tutorial that will guide you through creating a new administrative user and new role with limited privileges.
A role is assigned certain access rules, and users are assigned a role. All users assigned to a role will have the access privileges defined by the access rules in this role.</p>

<subsection name="Roles created during install">
<p>
During installation EJBCA created a super administrator role, by default called the <i>Super Administrator Role</i>. By default this role:
<ul>
<li>has overall access to EJBCA</li>
<li>can edit system configuration</li>
<li>can manage CAs</li>
<li>can manage publishers (LDAP, AD, custom)</li>
<li>can create CA administrators</li>
</ul>
</p>
</subsection>
<subsection name="Pre-defined Role Templates">
<p>
EJBCA also comes with three default role templates designed to cover most use cases, or to be easily extendable. If none of these are 
suitable a role can be created with the <i>Custom</i> template and be manually configured in Advanced Mode.

<ul>
<li>The CA Administrator:</li>
<ul>
<li>manages certificate profiles</li>
<li>manages end entity profiles</li>
<li>manages log configuration</li>
<li>manages publishers</li>
<li>can create RA administrators</li>
<li>can renew a CA with new certificate and new keys</li>
<li>can have full read access to the audit log</li>
</ul>
<li>The RA Administrator:</li>
<ul>
<li>can create end entities</li>
<li>can modify end entities</li>
<li>can revoke end entities</li>
<li>can delete end entities</li>
<li>can view existing end entities and their history</li>
<li>can have full read access to the audit log</li>
</ul>
<li>The Supervisor:</li>
<ul>
<li>can view created end entities</li>
<li>has full read access to the audit log</li>
</ul>
</ul>
</p>
</subsection>

<subsection name="Advanced access rules">
<p>
When editing access rules, you can click on 'Advanced mode' to get access to advanced access rule configuration. 
In this mode you will see all available access rules, in detail, and can accept or reject specific rules for the role you are editing.
The rules are numberous, and new rules may be included in new versions of EJBCA. They have somewhat human readable names and can often be figured out. 
See ' About Roles and Rules' below for a detailed description how the principe of access rules work.  
</p>
<p>Using advanced access rules you can define you own roles in detail and construct a role set suitable for most auditing schemes.</p>
</subsection>

<subsection name="Creating a new administrator">
<p>This example will walk you through creating a new administrator certificate, adding this administrator to a role and testing the access.</p>
<subsubsection name="Creating a Certificate Profile For the Administrator">
<p>This section will show you how to create a new Certificate Profile for administrators. 
The administrators certificates will be issued by a CA called ManagementCA
</p>
<p>
<ul>
<li>Under "CA Functions" -> "Certificate Profiles"</li>
<li>Click on "Clone" for the profile named "ENDUSER"</li>
<li>Enter "AdministratorEndEntityCertificateProfile" as the new name and click on "Create from Template".</li>
<li>Press "Edit" for the new profile</li>
<li>Under "Validity" enter 365d (1 year validity).</li>
<li>Under "Key usage", choose "Digital Signature" and "Key encipherment (ctrl-click to select multiple).</li>
<li>Un-check "Allow Key Usage Override".</li>
<li>Check "Use Extended Key Usage".</li>
<li>Under "Extended Key Usage", choose "Client Authentication".</li>
<li>Under "Available bit lengths", "1024 bit", "2048 bit" and "4096 bit".</li>
<li>Under "Available CAs", choose "ManagementCA" (the CA you use to issue admin certificates).</li>
<li>Press "Save".</li>
</ul> 
</p>
</subsubsection>
<subsubsection name="Creating an End Entity Profile for the Administrator">
<p>This section will show you how to create a new End Entity Profile for administrators.
The profile will be connected to the Certificate Profile created above.</p>
<p>
<ul>
<li>Under "RA Functions" -> "Edit End Entity Profiles"</li>
<li>Enter a name for your end entity profile, "AdministratorEndEntityProfile"</li>
<li>Press "Create"</li>
<li>Select "AdministratorEndEntityProfile" and press "Edit End Entity Profile"</li>
<li>Under the "Subject DN Fields" add a few DN fields that you want in the admin DN, for example O, UID and C.</li>
<li>Under "Default Certificate Profile", choose "AdministratorEndEntityCertificateProfile"</li>
<li>Under "Available Certificate Profiles", choose "AdministratorEndEntityCertificateProfile"</li>
<li>Under "Default CA", choose "ManagementCA"</li>
<li>Under "Available CAs", choose "ManagementCA"</li>
<li>Press "Save"</li>
</ul>
Issue the following new end entity based on the new end entity profile.
<br/>CN: SoftCard RA Admin1
</p>
</subsubsection>
<subsubsection name="Creating a new RA Role">
<p>
The RAadmin shall have access to add/list/edit end entites. To create a new role: 
<ul>
<li>Choose "Administrator Roles" in the left frame.</li>
<li>Press "Add".</li>
<li>Choose a name for your new administrator group, "RAAdministratorRole".</li>
<li>When the group is created, press "Access Rules".</li>
<li>Choose the "RA Administrator" role template.</li>
<li>Under "Authorized CAs", choose which CAs the role should have access to. Choose "ManagementCA".</li>
<li>Under "Edit End Entity Profiles" Select "AdministratorEndEntityProfile".</li>
<li>Press "Save".</li>
</ul> 
</p>
</subsubsection>
<subsubsection name="Adding new Administrators to the RA Role">
<p>
<ul>
<li>Choose "Search/Edit End Entities" and select your newly created end entity, choose "View Certificates".</li>
<li>Copy the value of "Certificate Serial Number", e.g. "5F003A0113F507F9".</li>
<li>Go to "Administrator Roles", press "Administrators" under "RAAdministratorRole".</li>
<li>Choose the CA that the administrator belongs to, "ManagementCA".</li>
<li>Paste the text from "Certificate Serial Number" in the "Match value".</li>
<li>Press "Add"</li> 
</ul>
</p>
</subsubsection>
<subsubsection name="Test the new administrator">
<p>
Try to log in with the new administrators to see the difference between that and the superadmin.
You should also try the different roles and privileges to see the differences between them all.
</p><p>
Note that the authorization privileges are cached and there will be a delay before a rule change is
used.
</p>
</subsubsection>
</subsection>

<subsection name="About Roles and Rules">
<subsubsection name="Roles and Rules">
<p>
Permissions in EJBCA are never given out on an individual basis, but to a certain Role which contains a list of aspects and access rules.
While Roles can be named at the user's discretion, Rules represent the resource they are named after. Access to this resource is also associated with an AccessRuleState, which may be one from the following table.
<table style="border:1px solid gray;margin: 1em auto 1em auto;" cellpadding="8" rules="all">
<caption style="font-style: italic;" align="bottom">Access Rule States
</caption><tr>
<th style="background:#cccccc;">Type
</th><th style="background:#cccccc;">Description
</th></tr>
<tr>
<td style="width:80px;" align="center"><code>Unused</code>
</td><td>This explicitly declares that a <i>Role</i> does not have a rule for this resource.
</td></tr>
<tr>
<td style="width:80px;" align="center"><code>Accept</code>
</td><td>Access is granted for this resource. If set to be recursive, <code>Accept</code> will also be default for any rules of type <code>Unused</code> deriving this rule.
</td></tr>
<tr>
<td style="width:80px;" align="center"><code>Decline</code>
</td><td>Access is denied for this resource. Will trump any recursive <code>Accept</code> rules previously encountered.
</td></tr></table>
</p> 
</subsubsection>
<subsubsection name="The Access Tree">
<p>
Resources are created according to a hierarchical structure, much like a file tree. A typical resource could be
<code>/ca_functionality/create_certificate</code>
which consists of three subresources: the root /, its child ca_functionality and the end node create_certificate. If desired, a Rule could be applied to any one of these. Access to the end resource (create_certificate) 
can be granted by either giving it the value Accept or setting Accept for any of its parents nodes and setting them as recursive. 
Access can be denied by setting access to it or any of its parents as Decline or using Unused the whole way down. 
This is further illustrated by the following figure: 
</p>
<p>
<center><img src="images/access_tree.png" alt="EJBCA Access Tree" /></center>
</p>
<p>
Requesting access to the above resources will result in the following:

<table style="border:1px solid gray;margin: 1em auto 1em auto;" cellpadding="8" rules="all">
<caption style="font-style: italic;" align="bottom">
</caption><tr>
<th style="background:#cccccc;">Resource
</th><th style="background:#cccccc;">Result
</th><th style="background:#cccccc;">Reason
</th></tr>
<tr>
<td style="width:80px;font-family:courier;" align="center">/
</td><td>Denied
</td><td>Status is unknown, hence denied.
</td></tr>
<tr>
<td style="width:80px;font-family:courier;" align="center">/a
</td><td>Denied
</td><td>Explicitly denied.
</td></tr>
<tr>
<td style="width:80px;font-family:courier;" align="center">/a/a
</td><td>Denied
</td><td>Even though <code>/a/a</code> is granted, <code>/a</code> explicitly denies access to its children.
</td></tr>
<tr>
<td style="width:80px;font-family:courier;" align="center">/b
</td><td>Granted
</td><td>Explicitly granted.
</td></tr>
<tr>
<td style="width:80px;font-family:courier;" align="center">/b/a
</td><td>Granted
</td><td>Granted thanks to the recursive accept in <code>/b</code>.
</td></tr>
<tr>
<td style="width:80px;font-family:courier;" align="center">/b/a/a
</td><td>Denied
</td><td>Explicitly denied, which trumps the recursive grant in <code>/b/a</code>.
</td></tr>
<tr>
<td style="width:80px;font-family:courier;" align="center">/b/a/a/a
</td><td>Denied
</td><td>Denied as a result of <code>/b/a/a</code>.
</td></tr>
<tr>
<td style="width:80px;font-family:courier;" align="center">/c
</td><td>Granted
</td><td>Explicitly granted.
</td></tr>
<tr>
<td style="width:80px;font-family:courier;" align="center">/c/a
</td><td>Denied
</td><td>Unknown in spite of the fact that <code>/c</code> was granted, hence defaults to denied.
</td></tr>
<tr>
<td style="width:80px;font-family:courier;" align="center">/d
</td><td>Denied
</td><td>Unknown, hence denied.
</td></tr>
<tr>
<td style="width:80px;font-family:courier;" align="center">/d/a
</td><td>Granted
</td><td>Explicitly granted.
</td></tr>
</table>

</p>
</subsubsection>
</subsection>
</section>

<section name="View Log options">
  <p>When viewing the log, you can chose what logs to see by chosing an option from a list.</p>
  
    <subsection name="Event">
      <p>
      You can chose what kind of event to see. For example, Administrators logged in, CA related activities, certificate related activities, End Entity related activities, activities that caused error... etc.
      </p>
    </subsection>
    
    <subsection name="CA">
      <p>You can chose to see all the logs related to a specific CA.</p>
    </subsection>
    
    <subsection name="Module">
      <p>You can chose to see all the logs related to a specific module, tex. CA, RA, Public Web, Hard Token, Approval, Service... etc. </p>
    </subsection>
    
    <subsection name="Username">
      <p>You can chose to see all the logs related to a specific username.</p>
    </subsection>
    
    <subsection name="Certificate">
      <p>You can chose to see all the logs related  to a specific certificate. The certificate is specified by its serialnumber written in hexadecimal format.</p>
    </subsection>
    
    <subsection name="Administrator Certificate">
      <p>You can chose to see all the logs created by a specific administrator. The administrator is specified by his certificate serialnumber written in hexadecimal format.</p>
    </subsection>
    
    <subsection name="Comment">
      <p>You can chose to see all the logs created with a specific comment.</p>
    </subsection>
    
    <subsection name="Administrator details">
      <p>
        You can chose to see all the logs created by a specific type of administrator, his or her IP address or the hexadecimal serialnumber of the administrator certificate used. There are six types of administrators:
        <ul>
          <li>An administrator who logs in with a certificate. Typically an administrator who logs into the Admin GUI to perfom tacks that need administrator privileges.
              An administrator who logs in with a certificate is loged with his certificate serialnumber and SubjectDN.</li>
          <li>An administrator who logs into the public web using only username and password. An administrator who logs into the public web is loges with his IP address.</li>
          <li>An RA user. The RA user is loged with his IP address.</li>
          <li>An administrator performing administrative tasks through commandline.</li>
          <li>An administrator performing administrative tasks through batch commandline.</li>
          <li>An internal user performing tasks within Ejbca.</li>
        </ul>
      </p>
    </subsection>
  <p> The log can be displayed on the screen or exported as a XML file.</p>
  <subsection name="Signing log files">
    <p>If so desired the exported log file can be signed by a specific signing certificate of a certificate authority. This will generate a binary (DER) format CMS/PKCS#7 MIME Message (p7m) file. Specific CMS compatible tools are needed to validate the signature and to 'strip' it off as to allow importing into other tools such as a text editor. 
 </p>
    <p>Below is an example using 'OpenSSL'; 'ca.pem' is the PEM format CA certificate and logexport.p7m is the file downloaded from the logging interface.</p>
    <source>
$ openssl smime -verify -nodetach -CAfile ca.pem -inform DER -in logexport.p7m -out logexport.xml
Verification successful
   </source>
    </subsection>
</section>


<section name="Managing Internal Key Bindings">
<p>
See the <a href="concepts.html#Internal Key Binding">concepts page</a> for a high level description of what Internal Key Bindings are.
</p>
<p>
All Internal Key Bindings share the following properties: 
</p>
<ul>
<li>Type: OcspKeyBinding or AuthenticationKeyBinding.</li>
<li>Id: Unique identifying number.</li>
<li>Name: A unique and human readable name.</li>
<li>Crypto Token: The Crypto Token where we reference a key pair.</li>
<li>Key Pair Alias: A reference to the currently used key pair in the specified Crypto Token.</li>
<li>Signature Algorithm: The signature algorithm user during signing, for example the signing of an OCSP response.</li>
<li>Next Key Pair Alias: A reference to the next key pair to use in the specified Crypto Token when renewing.</li>
<li>Bound Certificate: A certificate issued for the current key pair's public key.</li>
</ul>
<subsection name="Actions">
<p>
From the overview page the following actions are available:
</p>
<ul>
<li>Enable/Disable: Marks the Internal Key Binding as Active/Disabled. Only Active ones will be used and processed
by health-check.</li>
<li>Delete: Removes the Internal Key Binding, but will not remove the referenced key pair or certificates.</li>
<li>New keys: Generates a new key pair in the referenced Crypto Token using the same key specification as the current
key has and an alias derived from the current alias.</li>
<li>CSR: Creates a Certificate Signing Request using the next key pair (or current key pair when no next key pair
exists).</li>
<li>Update: Searches the database for the latest issued matching certificate for the next key pair (or current key
pair when no next key pair exists) by using SubjectKeyId.</li>
<li>Renew: When the CA that issued the current certificate is active and resides in the same instance, this will create
a new certificate using the same End Entity as the last one was issued with. If a next key pair exists, that key pair
will be used.</li>
</ul>
</subsection>
<subsection name="OcspKeyBinding">
<p>
A CA can delegate the signing of OCSP responses to a separate key pair.
This is configured as an Internal Key Binding.
</p>
<ul>
<li>The certificate must have Key Usage: Digital Signature.</li>
<li>The certificate must have Extended Key Usage: OCSPSigner.</li>
<li>The certificate normally has the "OCSP No Check" extension enabled.</li>
<li>The list of trusted certificates will be used to validate the OCSP request signature (if a signature is required).</li>
</ul>
<p>
Implementation specific properties:
</p>
<ul>
<li>Non existing is good:
If true a certificate that does not exist in the database, but is issued by a CA the responder handles
will be treated as not revoked. Default (when both this value and value of "Non existing is revoked" are false) is 
to treat it as "unknown". Since the OCSP responders database normally contains all issued certificate
this gives sensible values (in line with RFC6960) to "ok", "revoked" and "unknown" certificates.
Setting this value to true is useful if you want an External OCSP responder database to only contain revoked certificates, and not
all certificates. In this case the responder will answer "ok" to requests for certificates that do not exist in the database.
If both "Non existing is good" and "Non existing is revoked", the responder will answer "ok" 
</li>
<li>Non existing is revoked:
If true a certificate that does not exist in the database, but is issued by a CA the responder handles
will be treated as revoked; the revocation reason will be "Certificate Hold" and the revocation time is January 1st, 1970. 
Default (when this value and value of "Non exsiting is good" are false) is 
to treat it as "unknown".
If both "Non existing is good" and "Non existing is revoked", the responder will answer "ok".
</li>
<li>Max-Age HTTP header (seconds): A hint to caching proxies when using HTTP GET for how long to retain a response.</li>
<li>Request must be signed with a trusted certificate: When true, request signatures will be checked against the list of trusted certificates or trust anchors.</li>
<li>Response validity (seconds): How long the OCSP response is valid and may be used.</li>
<li>ResponderID: Defines the ResponderID type included in the response.
The ResponderID is either a Name (SubjectDN of the signing certificate used for response) or
Keyhash (SHA-1 digest of the public key of the signing certificate used for response).</li>
<li>Include signing certificate in response: When true, the signing certificate will be included in the response.</li>
<li>Include certificate chain in response: When true, the entire certificate chain, except for the root CA certificate, will be included in the response 
(note that this is only applicable if 'Include signing certificate in response' is true).</li>
</ul>
<p>
See the section <a href="installation-ocsp.html#OCSP Installation">OCSP installation</a>
for the full description on how to set up delegated OCSP signing.
</p>
</subsection>
<subsection name="AuthenticationKeyBinding">
<p>
The identity in outgoing SSL connections is configured as an Internal Key Binding.
</p>
<ul>
<li>The certificate must have Key Usage: Digital Signature and Key Encipherment.</li>
<li>The certificate must have Extended Key Usage: Client Authentication.</li>
<li>The list of trusted certificates will be used to validate the server side SSL certificate.</li>
</ul>
<p>
No implementation specific properties exist for this Internal Key Binding.
</p>
<p>
See the section <a href="installation-ocsp.html#Automated renewal of an OCSP signer via CA's WebService (a.k.a. Re-keying)">OCSP signer renewal</a>
for an example of how this is used.
</p>
</subsection>
</section>

<section name="Managing EJBCA Peer Systems">
<p>
An EJBCA instance can be both target and initiator of remote operations from another EJBCA instance.
Connections are made using dual authenticated HTTPS.
This is similar to how you use a client certificate to authenticate to the Admin GUI and then manage an EJBCA instance,
but in this case the configured administrator is another EJBCA instace.
</p><p>
Normally the instance with higher security requirements (e.g. an EJBCA acting as CA) initates connections to a system with
lower security requirements (e.g. an EJBCA acting as VA). 
</p><p>
In the Peer Systems overview you can:
<ul>
<li>Modify global settings like enabling or disabling incoming connections.</li>
<li>See a list of configured known EJBCA Peer Systems that this instance can connect to (<i>Peer Connectors</i>) and their current connection status.</li>
<li>See a list of systems that have connected to this instance recently (<i>Incoming Connections</i>).</li>
</ul>
</p><p>
Additionally there are links to the relevant authentication settings for outgoing connections (AuthenticationKeyBinding) and incoming connections (Administrator Role).
</p>
<subsection name="Setting up Peer Connectors for Outgoing Connections">
<p>
Outgoing connections are allowed by default and can be disabled by administrators authorized to <code>/peer/modify</code> recursive.
</p><p>
A <a href="concepts.html#Peer Connector">Peer Connector</a> is a representation of a remote EJBCA instance and can be referenced
by other components like Publishers and Services.
Each Peer Connector maintains a pool of outgoing re-usable (HTTP Keep-Alive) connections and new connections are only created when needed.
</p><p>
To authenticate to a peer, you need to configure an <a href="#AuthenticationKeyBinding">AuthenticationKeyBinding</a>.
The AuthenticationKeyBinding is the EJBCA instance identity and consists of a client SSL X509 certificate and a key pair in
one of the instance's <a href="userguide.html#Managing Crypto Tokens">Crypto Tokens</a>.
Ensure that the AuthenticationKeyBinding is configured to trust the peer's server SSL certificate or the connection
will fail.
AuthenticationKeyBinding settings are only read when a Peer Connector's connection pool is started and if the client certificate
is updated this will not take effect until a connection pool is <code>Reset</code>.
</p><p>
For each configured Peer Connector, you can see the human readable name, connection end point and current connection status.
You can <code>Ping</code> any of the peers to check connectivity and the result is the round-trip time from and to the
application over the secure connection (giving a more accurate view of the actual round trip time than a network ping using the ICMP protocol).
</p><p>
Only the first connection to a peer using the same client certificate will be subject to a full authentication check
and subsequent requests will share the same credential.
This means that an initial <code>Ping</code> request to a peer system will be significantly slower than the next one.
</p>
<subsubsection name="Adding a Peer Connector">
<p>
Outgoing connections must be allowed to be able to add a new Peer Connector.
From the Peer Systems overview, click the <code>Add</code> button. Configure the following fields and click <code>Create</code>.
<ul>
<li>Name: Your name for the peer.</li>
<li>URL: The target end point where the peer is listening. Normally you only need to change the hostname of the URL.</li>
<li>Enabled: If a Peer Connector is enabled connections to the peer are allowed to be created when needed.</li>
</ul>
</p>
</subsubsection>
<subsubsection name="Edit, Clone or Delete a Peer Connector">
<p>
From the Peer Systems overview, click the <code>Edit</code> button for an existing Peer Connector.
In the view of the Peer Connector you can modify and save the existing name, URL or state.
In the Edit view, you additionally have buttons for cloning (<code>Clone</code>) or deleting (<code>Delete</code>) the current object.
</p>
</subsubsection>
</subsection>
<subsection name="Incoming connections">
<p>
Incoming connections are not allowed by default and can be enabled by administrators authorized to <code>/peer/modify</code> recursive. 
</p><p>
In the list of incoming connections, you can see systems that have successfully connected to the EJBCA instance with a client
certificate trusted by the application server's SSL configuration.
If the client certificate presented by the connecting system is already part of an Administrator Role, the name of this role
will be shown.
</p>
<subsubsection name="Authorization of incoming connections">
<p>
If no <a href="userguide.html#Administrator Roles">Administrator Role</a> exists for the connecting system's client certificate,
you are presented with a <code>Create Authorization</code> button.
Clicking this button will allow you to quickly setup a new Administrator Role with for the incoming client certificate
and a relevant set of access rules or add the incoming client certificate to an existing Administrator Role.
</p><p>
If an Administrator Role already exists for the connecting system's client certificate, you are presented with a
<code>Modify Authorization</code> button where you can change the relevant set of access rules for the Administrator Role.
</p><p>
Note that this is just a simplified view of EJBCA's normal authentication and authorization management and
the created Administrator Role can be edited just like any other Administrator Role.
</p>
</subsubsection>
</subsection>
<subsection name="Management operations for an EJBCA Peer System">
<p>
Once an EJBCA instance has been authorized to connect and manage another EJBCA instance, operations on the peer
can be performed through the Admin GUI of the authorized instance.
</p>
<p>
The administrator initiating these operations needs to be authorized to the <code>/peer/view /peer/manage</code>
access rules and additionally any relevant CA.
</p>
<subsubsection name="Publishing using Peer Connectors">
<p>
<a href="adminguide.html#LDAP and Publishers">Publishers</a> are used to propagate certificate or CRL information to a peer system.
The PeerPublisher implementation allows this information to be pushed to a configured Peer Connector.
</p>
<p>
The connecting system needs to be authorized to the <code>/peerincoming /peerpublish/writecert /peerpublish/writecrl /ca/[CAName]</code>
access rules to be able to push both certificate and CRL data.
</p>
</subsubsection>
<subsubsection name="Certificate data synchronization">
<p>
In a setup where an EJBCA CA instance (or a cluster) uses external EJBCA VA/OCSP responders, revocation information needs to be
propagated from CA to VA.
Information about newly issued certificates and revocation updates are normally sent using a (Peer)Publisher, but the first time
a new VA is connected the current state of all previously issued certificates needs to be pushed to the VA.
</p><p>
In the overview of peer connectors, click <code>Manage</code> for the peer connector representing the VA and select the
<code>Certificate Data Synchronization</code> tab.
Configure the relevant subset of information to synchronize and click <code>Start</code> to initiate the synchronization as a background task.
The progress can be followed either in this view or in the Peer Systems overview.
</p><p>
Note that the subset of revocation information to send affects how database queries are performed.
Depending on your database it might be faster to only synchronize everything or only one subset of data at the time.
</p><p>
The connecting system needs to be authorized to the <code>/peerincoming /peerpublish/readcert /peerpublish/writecert /ca/[CAName]</code>
access rules to be able to check synchronzation data and push missing or outdated certificate entries.
</p>
</subsubsection>
<subsubsection name="Renewal of remote Internal Key Bindings">
<p>
In a setup where an EJBCA CA instance (or a cluster) uses external EJBCA VA/OCSP responders, a CA delegates signing of OCSP responses
to an OCSP signing certificate (configured as a OcspKeyBinding) at the VA.
The OCSP signing certificate should be short-lived and to make renewal easier, this is available as a remote management operation on
the CA.
</p><p>
In the overview of peer connectors, click <code>Manage</code> for the peer connector representing the VA and select the
<code>Remote Key Bindings</code> tab.
Click <code>Renew</code> to generate a new certificate.
Optionally you can also select to generate a new key pair for the next OCSP signing certificate.
</p><p>
Renewal of remote Internal Key Bindings can be automated using a <code>Remote Internal Key Binding Updater</code>
<a href="adminguide.html#Services Framework">service</a>.
</p><p>
The connecting system needs to be authorized to the
<code>/peerincoming /internalkeybinding/view/[IKB] /internalkeybinding/modify/[IKBName] /cryptotoken/view/[CTName]</code>
access rules to be able to renew an Internal Key Binding certificate.
Additionally <code>/cryptotoken/keys/generate/[CTName]</code> is required if key renewal should be allowed.
</p>
</subsubsection>
</subsection>
</section>

<section name="EJBCA client toolbox">
<p>
There is a set of tools that could be used without an EJBCA. Built from the EJBCA source, but the resulting distribution package can be moved to any machine. The client toolbox provides commands to function as a Web Service RA, to manage keys on PKCS#11 HSM, to perform EJBCA health checks, to enroll CVC EAC certificates, to test CMP and SCEP protocol, and much much more.  
</p><p>
Build these tools with:
</p><source>
ant clientToolBox
</source><p>
The directory './dist/clientToolBox' is then created. You may then move this directory to any location.
</p><p>
To use any of the tools just call 'ejbcaClientToolBox.sh' in this directory. You may call the script from any location. Running the command will provide on-line documentation for available commands and options.
</p><p>
If you put the directory in your PATH then you just have to write 'ejbcaClientToolBox.sh' to call it.
</p><p>
If you call the script without any arguments you get a list of all valid first arguments which specifies the tool to use. Example:
</p><source>
ejbcaClientToolBox.sh
</source><p>
Then just one argument gives help about the specified tool. Example:
</p><source>
ejbcaClientToolBox.sh ocsp
</source>
</section>

<section name="EJBCA Validation/Conformance Tool (EJBCA Enterprise only)">
<p>
The ValidationTool is a standalone client-side application for certificates and OCSP response validation and conformance checks. 
</p>
<p>
For details see the <a href="validationtool.html">ValidationTool manual</a>.
</p>
<p>
Build the tools with:
</p><source>
ant validationtool
</source><p>
The directory 'dist/validationtool' is then created. You may then move this directory to any location.
</p><p>
To use any of the ValidationTool commands just call 'bin/validationtool.sh' in this directory. You may call the script from any location. Running the command will provide on-line documentation for available commands and options.
</p>
<p>
A source distribution can also be created by running:    
</p>
<source>
ant validationtool-src
</source>
<p>
The directory 'dist/validationtool-src' is then created. You may optionally zip it together and extract it any location. The ValidationTool can then be built by moving to its modules/validationtool directory and run: 
</p>
<source>
ant jar
</source>
</section>

<section name="EJBCA Batch Enrollment GUI">
<p>
The EJBCA Batch Enrollment GUI is a standalone Java desktop application which
can be used to enroll multiple end entities from certificate signing requests
at once. The application uses the web services interface for communication with
EJBCA so an authorized administrator needs to be logged in to it in order to
perform the operations.
</p>
<subsection name="Building and running">
<p>
The application is built from the EJBCA directory by typing
'ant batchenrollment-gui' and can then be started with the scripts
'bin/batchenrollmentgui.sh' or 'bin/batchenrollmentgui.cmd'.
</p>
</subsection>
<subsection name="Using">
<p>
When the application starts the connection dialog asks for connection
information and login credentials. You need to supply some sort of truststore
and keystore in the same way as when using the web services interface. When
using PKCS11 the keystore file path should be the path to the PKCS#11 shared
library.
</p>
<p>
Enroll end entities:
</p>
<ol>
<li>Drag and drop certificate signing requests to the table in the main window or
use the button <b>Add...</b> to browse for the files.</li>
<li>For each request map it to an end entity and choose an output filename for
the resulting certificate.</li>
<li>Click the button <b>Enroll</b>.</li>
</ol>
<p>
Note: The GUI can guess which end entity the request belongs to if the file name
contains the name of an existing end entity. For instance if the request files 
are named user1-00002.csr, user2-00002.csr and user3-00002.csr" and there exists
end entities in EJBCA user1, user2 and user3 then they will already be
selected.
</p>
</subsection>
<subsection name="Signed requests">
<p>
The application also supports signed certificate signing requests. That is
requests that are wrapped in a PKCS#7/CMS structure also containing a signature
and a signing certificate that can be verified by the application before
issuing the certificate. In order for the verification to work the Batch
Enrollment GUI needs to have a PEM file with trusted certificates configured
under the menu <b>Edit</b> -&gt; <b>Settings...</b>.
</p>
</subsection>
</section>

<section name="Misc information">
<subsection name="Backup and restore of EJBCA">
<p>
To backup an EJBCA installation you need to:
<ul>
<li>Backup the database</li>
<li>Backup all $EJBCA_HOME/conf/**</li>
<li>Backup all $EJBCA_HOME/p12/**</li>
</ul>

To restore:
<ul>
<li>Restore database</li>
<lI>Unzip new EJBCA</lI>
<li>Restore conf and p12</li>
<li>Run "ant deploy", "ant deploy-keystore", and "ant web-configure" to configure JBoss and deploy EJBCA. If you are using another application server, consult the Installation doc for deployment.</li>
</ul>
</p>
<p>
If you are using soft keystores for the CAs this is all that is needed. If you are using an HSM you need to backup your keys in the 
HSM as well. How this backup and restore is done depends on the HSM you are using. Consult the documentation for your HSM.
</p>
</subsection>
<subsection name="SSL certificate expire">
<p>
The SSL certificate used for SSL in JBoss is stored in APPSRV_HOME/server/default/conf/keystore.jks.
The default validity time for the SSL certificate is two years. When this expire, you must generate a new one. 
</p><p>
You can do this through the Admin GUI by:
<ol>
<li>Go to 'List/Edit End Entities' and search for user 'tomcat'.</li>
<li>'Edit_End_Entity' and set the 'Password' to the same as httpsserver.password in your conf/web.properties and 'Status' to 'New'.</li>
<li>Open up a command line in EJBCA_HOME and run 'bin/ejbca.sh batch'.</li>
<li>Copy EJBCA_HOME/p12/tomcat.jks to APPSRV_HOME/server/default/conf/keystore.jks, or run 'ant deploy'. Ant deploy will do some other things as well, so if you are not sure, just copy the file.</li>
<li>Restart JBoss.</li>
</ol>
</p>
<p>
You can also do everything using the CLI:
<ol>
<li>bin/ejbca.sh ra setendentitystatus tomcat 10</li>
<li>bin/ejbca.sh ra setclearpwd tomcat &lt;password from httpsserver.password&gt;</li>
<li>bin/ejbca.sh batch tomcat</li>
<li>cp p12/tomcat.jks $APPSRV_HOME/server/default/conf/keystore.jks</li>
<li>Restart JBoss.</li>
</ol>
A small convenience ant target is present which can simplify the proceess and save some typing (it's running the above three ejbca.sh commands in succession):
<ol>
<li>ant renew-keystore</li>
<li>cp p12/tomcat.jks $APPSRV_HOME/server/default/conf/keystore.jks</li>
<li>Restart JBoss.</li>
</ol>
</p>
</subsection>
</section>

</body>
</document>
