<?xml version="1.0"?>
<document>
  <properties>
    <title>Admin Guide</title>
  </properties>
<body>

<section name="Introduction">
<p>
Information how to install EJBCA can be found in the Installation guide.</p>
<p>
This Administrator Guide is a reference guide to the concepts, configurations and options available in EJBCA.
The guide is targeted for administrators who are responsible for installing, configuring and maintaining EJBCA installations.
More detailed hands on instructions for various day to day administrative tasks can be found in the User Guide.
</p><p>
This guide covers detailed information about using various protocols, hardware security modules etc of EJBCA. These details covers both configuration and usage. 
</p>
</section>

<section name="Concepts">
<p>
Before using this guide you should be familiar with the various concepts, such as certificate and end entity profiles, used in EJBCA.
There is a separate <a href="concepts.html">document</a> explaining the different concepts.
</p>
</section>

<section name="Export and import profiles">
<p>
Certificate and End Entity profiles can be exported as XML files and imported in another instance of EJBCA,
or in the same instance after removal of the old ones. 
</p><p>
When exporting profiles (bin/ejbca.sh ca exportprofiles), all profiles will be exported to the specified directory. The 
exported files will be given unique names containing profile name and profile id.
When importing profiles the profile name and id will be read from the filename. All profiles present in the specified
directory will be imported.
</p><p>
Fixed profiles will not be exported or imported. If a profiles with the same name as the one being imported already
exist, the profiles will not be imported. References to publishers with unknown id will be dropped.
</p><p>
Import of profiles try to keep the same profile id. If it already exist a profile with the same id in the database, 
it will try to choose another and change any (end entity profile to certificate profile) reference during later imports.
The reason the id is kept is that there are references to the profile id from users belonging to the profile.
</p><p>
During import on a new EJBCA instance where CAs that are referenced from the profiles don't exist, a default CA has to be
specified on command line. Two CAs are considered identical in this context if they have the same subject DN.
</p><p>
It is also possible to import and export profiles in the AdminGUI in the 'End Entity Profiles' page and the 'Certificate 
Profiles' page. The same limitations above apply even when exporting/importing through the GUI, but the profiles will be 
imported from and exported into a zip file.
</p>
</section>

<section name="Managing CAs">

<subsection name="Export and import CAs">
<p>
Under certain circumstances, it can be wise to backup the CA's signature and encryption keys. Remember to protect the backup in the same way
as the CA itself.
</p>
<p>
Soft token CAs can be exported and backed up. CAs with the keys on a HSM can naturally not be exported through EJBCA. Use the HSMs methods to back up such keys.
</p><p>
Soft token CAs can be imported using both the CLI and Admin GUI, while HSM CAs can only be imported using the CLI.  
</p>
<subsubsection name="Using command line interface">
<p>
To export a CA named "TestCA" to the PKCS#12-file "/path/TestCA.p12" with password "foo123" enter the following
from the $EJBCA_HOME directory:
</p>
<source>
$ bin/ejbca.sh ca exportca TestCA ./TestCA.p12
Using JBoss JNDI provider...
Enter keystore password: foo123
$ 
</source>
<p>
To import the backup keys for "TestCA" later, enter the following from the $EJBCA_HOME directory:
</p>
<source>
$ bin/ejbca.sh ca importca TestCA /path/TestCA.p12 SignatureKeyAlias EncryptionKeyAlias
Using JBoss JNDI provider...
Enter keystore password: foo123
$ 
</source>
<p>
Enter the command:
</p>
<source>
$ bin/ejbca.sh ca importca --help
</source>
<p>
to get usage instructions how to import HSM CAs.
</p>
</subsubsection>
<subsubsection name="Using admin-GUI">
<p>To be able to export and import the CA's keys using the Admin GUI, you have to have superadministrator access.
Make sure that .p12 files are not automatically saved to an unsuitable place by your browser.
before you do an export.
</p>
<p>To export a the CA's keys, do the following:
<ul>
<li>Select "Edit Certificate Authorities" from the administrator menu.</li>
<li>Select the CA you want to export and press the "Edit"-button.</li>
<li>Go to the line where the help-text say "CA export requires the keystore password".</li>
<li>Enter the keystore password in the box to the right of the help-text.</li>
<li>Press the "Export CA keystore.."-button.</li>
<li>The PKCS#12-file will be downloaded by your browser to the location you select.</li>
</ul>
</p>
<p>To import a CA's keys, do the following:
<ul>
<li>Select "Edit Certificate Authorities" from the administrator menu.</li>
<li>Press the "Import CA keystore.."-button.</li>
<li>Fill out the form with the CA's name, full pathname to the PKCS#12-file and keystore password.</li>
<li>Keep the two "Alias.."-fields to the default value, if you used EJBCA to export the CA's keys.</li>
<li>Press the "Import CA keystore"-button.</li>
</ul>
</p>
</subsubsection>
</subsection>
<subsection name="Remove and restore CA soft keystore">
<p>Soft token CAs can have their keystore removed from the database. When the keystore is removed the 
CA can not issue certificates and its CA token status is set to 'offline'.
</p>
<p>
Warning: Before removing the keystore make sure you have exported it if you would like to be able to 
restore it later. See the section 'Export and import CAs'
</p>
<p>
To remove the catoken keys for "TestCA", enter the following from the $EJBCA_HOME directory: 
</p>
<source>
$ bin/ejbca.sh ca removekeystore TestCA
Using JBoss JNDI provider...
$ 
</source>
<p>
To restore the catoken keys again for "TestCA" with the keystore exported as "TestCA-exported.p12", enter
the following from the $EJBCA_HOME directory:
</p>
<source>
$ bin/ejbca.sh ca restorekeystore TestCA /path/TestCA-exported.p12 -s SignatureKeyAlias -e EncryptionKeyAlias
Using JBoss JNDI provider...
Enter keystore password: foo123
$ 
</source>
</subsection>

<subsection name="Renew CAs">
<p>
You can renew CAs in different ways:
</p>
<ul>
<li>Renew only CA certificate, using the same keys.</li>
<li>Renew CA keys and certificate.</li>
</ul>
<p>
To renew only the CA certificate using the same keys you simply press the button "Renew CA". Your CA have to be on-line for this to work, so it can sign the new certificate if it's a self signed CA or the certificate request if it is a sub CA.
Also if it is a subCA with the rootCA in the same EJBCA instance the root CA must also be on-line. 
</p>
<p>
To renew the CA keys you check the box "Renew keys" and give the CA token authentication code. After this you simply press "Renew CA". 
<br/>Renewing the keys will not always work if you are using an HSM. It may work with some HSMs and not work with others. 
<br/>You can report success and failures to us.
</p>
<p>When using an HSM you can also make the renewal of keys manually. Simply generate new keys on the HSM with whatever tools you used the first time (preferably the EJBCA cli tools), and then edit the CA token properties
to use the new key. After the new key has been configured you can simply press "Renew CA" (without the renew keys checkbox), to generate your new CA certificate.
</p>
</subsection>

<subsection name="Revoke CAs">
<p>
If you want to revoke a CA you can do so by going to "Edit Certificate Authorities" in the admin GUI. There is a button "Revoke CA".
<ul>
<li>If you revoke a Root CA it will revoke all certificates in the database issued by the root CA, and create a CRL.</li>
<li>If you revoke a Sub CA it will revoke all certificates in the database issued by the sub CA, and to the sub CA, and create a CRL.
This works automatically if the sub CA and root CA is handled by the same EJBCA instance. If the Sub CA is signed by an external CA, the sub CA's certificate must be revoked by the external CA.</li>
<li>If you revoke an external CA /sub CA to a CA in EJBCA) the external CAs certificate will be revoked and put on the CRL of the issuing CA in EJBCA.</li>
</ul>
</p> 
</subsection>

</section>


<section name="Importing Certificates">
<p>
EJBCA supports importing certificates into the existing database. This can be used for migrating data from other systems, or for importing the external administration certificates into EJBCA. Certificates can be imported induvidually or in bulk.
</p>
<subsection name="Importing a Single Certificate">
<p>
In order to import a single certificate, use the command:
</p>
<source>
bin/ejbca.sh ca importcert &lt;username&gt; &lt;password&gt; &lt;caname&gt; &lt;status&gt; --email &lt;email&gt; &lt;certificate file&gt; --eeprofile &lt;endentityprofile&gt; [--certprofile &lt;certificateprofile&gt;]
</source>
<p>
The parameters are as follows:
</p>
<ul>
    <li><em>username</em> - Username of the end entity which should be owner of the certificate. If the end entity does not exist, it will be created automatically. If the end entity already exists, the imported certificate will be associated with it, and the end entity properties (subject, subject alternative names) will be updated.</li>
    <li><em>password</em> - Password that will be set for the end entity (often called "enrollment code" in the public web).</li>
    <li><em>caname</em> - The name of the CA which has issued the certificate. The certificate's issuer signature will be verified against this CA. If the signature does not match, the certificate will not be imported. The CA certificate must be present in the database (at least as an external CA).</li>
    <li><em>status</em> - Status that should be set for the imported certificate. Supported values are <em>ACTIVE</em> (for valid certificate), and <em>REVOKED</em> (for revoked certificate). The revocation reason for <em>REVOKED</em> certificate will be set to <em>Unspecified</em>.</li>
    <li><em>email</em> - E-mail that will be used for the end entity. If the e-mail is set to string <em>null</em>, it will be taken from the certificate itself.</li>
    <li><em>certificate file</em> - Path to BASE64-encoded PEM file containing the end entity certificate.</li>
    <li><em>endentityprofile</em> - End entity profile used for the certificate. The certificate will be verified against the constraints set forth by this end entity profile. If the constraints are violated by the certificate, it will not be imported.</li>
    <li><em>certificateprofile</em> - Certificate profile used for the certificate. Once the certificate is imported, it will be marked as belonging to the specified certificate profile. If the certificate profile is not specified, the fixed <em>ENDUSER</em> certificate profile will be used instead.</li>
</ul>
<p>
Running the command without any parameters will display basic usage help, and a list of acceptable parameter values (for <em>caname</em>, <em>status</em>, <em>endentityprofile</em>, and <em>certificateprofile</em>).
</p>
<p>
Here's an example usage of the <em>importcert</em> command:
</p>
<source>
bin/ejbca.sh ca importcert myuser mypassword SomeCAName ACTIVE --email mymail@example.com mycertificate.pem --eeprofile EMPTY --certprofile ENDUSER
</source>
<p>
This command would create a new end entity (or use the existing one) in EJBCA called <em>myuser</em> with the supplied password, and add a new active (non-revoked) certificate for this user under the end entity profile <em>EMPTY</em>, using the certificate profile <em>ENDUSER</em>.
</p>
</subsection>
<subsection name="Importing Certificates in Bulk">
<p>
In order to import certificates in bulk, use the commnad:
</p>
<source>
bin/ejbca.sh ca importcertdir &lt;username-source&gt; &lt;caname&gt; &lt;status&gt; &lt;certificate dir&gt; --eeprofile &lt;endentityprofile&gt; --certprofile &lt;certificateprofile&gt; [-resumeonerror]
</source>
<p>
The parameters are as follows:
</p>
<ul>
    <li><em>username-source</em> - Specifies how to derive the username of the end entity that will own the certificate. Supported values are <em>CN</em>, <em>DN</em>, and <em>FILE</em>. If set to <em>CN</em>, the username will be equal to the common name attribute present in the certificate subject. If set to <em>DN</em>, the username will be equal to the entire distinguished name (subject) of the certificate. If set to <em>FILE</em>, the username will be the same as the name of the file (extension included). If set to CN, and CN is not present in the subject, the import will first fall back to using DN, or if that is not available as well, to file name. If set to DN, and the subject is not present in the certificate, the import will fall back to using the file name as the username. The end entity will be automatically created if it does not exist already. If the end entity already exists, the imported certificate will be associated with it, and end entity properties will be updated.</li>
    <li><em>caname</em> - The name of the CA which has issued the certificates. The certificate issuer signature will be verified against this CA. If the signature does not match, the certificate will not be imported. The CA certificate must be present in the database (at least as an external CA).</li>
    <li><em>status</em> - Status that should be set for the imported certificates. Supported values are <em>ACTIVE</em> (for valid certificates), and <em>REVOKED</em> (for revoked certificates). The revocation reason for <em>REVOKED</em> certificates will be set to <em>Unspecified</em>.</li>
    <li><em>certificate dir</em> - Path to the directory containing the certificate files. Each file should contain a single certificate. The directory should not contain subdirectories, or non-certificates. The file extension does not matter - all the files will be processed.</li>
    <li><em>endentityprofile</em> - End entity profile used for the certificates. The certificates will be verified against the constraints set forth by the end entity profile. If the constraints are violated by the certificate, it will not be imported.</li>
    <li><em>certificateprofile</em> - Certificate profile used for the certificates. Once the certificate is imported, it will be marked as belonging to the specified certificate profile.</li>
    <li><em>-resumeonerror</em> - This optional switch can be used in order to force the import to proceed even if more serious errors are encountered. By default this option is <em>not</em> enabled. The errors that are covered by this switch, amongst others, are end entity profile constraint violations, problems with reading/parsing of certificate files etc.</li>
</ul>
<p>
Running the command without any parameters will display basic usage help, and a list of acceptable parameter values (for <em>username-source</em>, <em>status</em>, <em>endentityprofile</em>, and <em>certificateprofile</em>).
</p>
<p>
Certificates that are already present in the database will be skipped during the import. Certificates that belong to a different CA than the one specified will be skipped as well. Any other discrepancy (like invalid file format, subdirectory, or violated end entity constraints) will stop the import operation, unless the <em>-resumeonerror</em> switch has been enabled. Certificates that have been imported up until the discrepancy will still remain in the database. For each certificate that has been skipped, the command will output its serial number and name of the file. The same information will be displayed for errors.
</p>
<p>
Once the import has finished, a short summary is displayed about the number of imported certificates, number of redundant (already present) certificates, and number of rejected certificates (that were not signed by the requested CA). No summary will be displayed if abnormal errors are encountered (i.e. anything besides the already present certificate or mismatched CA), unless the <em>-resumeonerror</em> switch has been enabled.
</p>
<p>
If the <em>-resumeonerror</em> switch has been enabled, the import will continue until all of the entries from the directory are processed. Errors will still be printed-out, and the summary will contain the following additional information:
</p>
<ul>
    <li>Number of certificates that could not be read (because of malformed format or because they're directories).</li>
    <li>Number of certificates that have violated the end entity constraints (invalid number of subject/subject alternative name fields, wrong values for non-modifiable fields etc).</li>
    <li>Number of certificates that could not be read because of other errors.</li>
</ul>
</subsection>

</section>

<section name="CRL generation">
<p>
A new CA should always issue an (empty) CRL. This is done when the ca is created.
</p><p>

CRLs can be generated using 'Basic functions' in the Admin GUI, or using the CLI by running:
</p>
<source>
bin/ejbca.sh ca createcrl &lt;CA name&gt;
</source>
<p>See also the <a href="userguide.html">User Guide</a> for details how to configure CRL periods, CRL Distribution Points and CRL Issuers.</p>
<p>
There are, at least, two ways to have EJBCA automatically create updated CRLs.
</p>

<subsection name="CRL Update service worker">
<p>
In the Admin GUI you can go to 'Edit Services' and add a new service. Edit the service and select the 'CRL Updater'
worker and the interval you want to use. Don't forget to set the service to 'Active'.
<br/>
This service will check, at the selected interval, if it is required to regenerate the current CRL (due to being expired or within the expiration threshold), and will generate a new one if needed.
</p>
</subsection>
<subsection name="Cron job">
<p>
Yet another way to generate CRLs way is to have a cron job or equivalent call 'bin/ejbca.sh ca createcrl'.
The 'createcrl' command will then check all active CAs if it is a need to update their CRLs, 
otherwise nothing is done. 
</p><p>
If you want to force CRL generation for a CA, use 'bin/ejbca.sh ca createcrl <i>caname</i>'
</p><p>
Example crontab entry:
</p>
<source>
PATH=$PATH:/usr/java/jdk1.6.0_24/bin
@daily cd /home/ejbca;/home/ejbca/bin/ejbca.sh ca createcrl;
</source>
<p>
where '/usr/java/jdk1.6.0_24/bin' is the path to where 'java' can be found.
'/home/ejbca' is where ejbca is installed.
</p><p>
Sample crontab to be installed with 'crontab -e':
</p>
<source>
SHELL=/bin/sh
PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
CLASSPATH=$CLASSPATH:/root/ejbca
APPSRV_HOME=/usr/local/jboss
# m h dom mon dow command
00 0    * * *   cd /root/ejbca;./bin/ejbca.sh ca createcrl
</source>
</subsection>

<subsection name="Delta CRLs">
<p>EJBCA can issue delta CRLs. 
In the CA configuration, set 'Delta CRL Period' to the amount of time your delta CRLs will be valid if delta CRLs are issued.
Command line interface and CRL Update service will generate delta CRLs if 'Delta CRL Period' is larger than 0.</p>
</subsection>

</section>

<section name="Scep">
<p>
<i>SCEP requires the 'Unlimited Strength Jurisdiction Policy Files' to be installed in the JDK if running Oracle's JDK.
The policy files can be found at the same place as the JDK download. Further information on this can be found in 
the Oracle documentation on the JCE.</i>
</p><p>
There are some compatibility issues with SCEP, one being whether the CA certificate should be returned in an SCEP enrollment
response or not. The CA certificate is optional, but some clients such as the  Cisco VPN client to require it while others, such as Juniper's, 
prohibit it. EJBCA has this option configurable.
</p>
<subsection name="SCEP Configuration">
<p>
The SCEP URL is: 
</p>
<source>
http://HOST:PORT/ejbca/publicweb/apply/scep/ALIAS/pkiclient.exe
</source>
<p>
The URL contains a reference to a configuration alias 'ALIAS'. 'ALIAS' is an alphanumeric string that refers to 
the set of SCEP configurations that should be used when handling the SCEP reqest coming through this URL. It is possible 
to configure as many configuration aliases as desired through the command line or the AdminGUI. Documentation on how to 
create and configure the SCEP aliases in the command line are available when executing the following command from EJBCA home directory:
</p>
<source>
./bin/ejbca.sh config scep
</source>
<p>
To manage SCEP aliases in the AdminGUI, go to System Functions -> SCEP Configuration
</p>
</subsection>
<subsection name="Level of SCEP support">
<p>
EJBCA implements features from (at least) draft 11 of the SCEP specification. This means that we implement the following SCEP messages:
<ul>
<li>PKCSReq including Client Certificate Renewal</li>
<li>GetCRL</li>
<li>GetCACert</li>
<li>GetCACertChain</li>
<li>GetCACaps</li>
</ul>
<p><img src="images/scep_enroll.png" height="616" width="1200" /></p>

Using the <a href="externalra.html">External RA</a> <i><b>(Enterprise Edition Only)</b></i> API the following SCEP message is also supported for polling mode:
<ul>
<li>GetCertInitial</li>
</ul>
The following CA capabilities are supported:
<ul>
<li>POSTPKIOperation</li>
<li>SHA-1</li>
<li>Client Certificate Renewal <i><b>(Enterprise Edition Only)</b></i></li>
</ul>
</p>
<p>
EJBCA will not send back proper SCEP error messages in all cases of failure. The error messages are not completely implemented, although most of them are implemented.
</p>
</subsection>

<subsection name="Configuration">
<p>Configuring SCEP is done in the Admin GUI, under 'SCEP Configuration'. To be able to edit SCEP configuration, you have to have the '/edit_systemconfiguration' access. </p>
<subsubsection name="Operation Mode">
<p>SCEP can be run in one of the following three modes:</p>
<ul>
<li><p>
In <b>CA mode</b> EJBCA receives a SCEP 'PKCSReq' requests and sends back the certifificate/CRL immediately in a proper SCEP reply message.
The SCEP client will send messages directly to the CA, encrypted with the CAs certificate and the CA will authenticate/authorize the 
request based on username and enrollment code of an end entity pre-created in EJBCA.
This mode does not support the 'polling' model, EJBCA uses the direct CA method, where a request is granted or denied immediately.
</p><p>
The CN part of the DN in the PKCS#10 request, which is part of the SCEP request, will be used as the 'username' when 
authenticating the request in EJBCA. Create the SCEP request with a CN matching the username registered in EJBCA.
The challengePassword in the PKCS#10 request, which is part of the SCEP request, will be used as the 'password' when 
authenticating the request in EJBCA. Create the SCEP  request with a challengePassword matching the password registered in EJBCA.
</p><p>
The most common errors should be wrong username/password or wrong status (not NEW) on the user in EJBCA.
</p></li>
<li><p>
In <b>RA Mode <i>(Enterprise Edition only)</i></b> EJBCA recieves SCEP 'PKCSReq' requests when a user is to be created (or edited). A certificate is returned immediately in
a proper SCEP reply message. The RA is authenticated/authorized based on configuration.
</p>
<p>
For this mode to work, the property 'ALIAS.operationmode' in the command line or 'Operational mode' in the AdminGUI has to be set to 'ra'. 
All the parameters needed to create the new end entity should be set through the command line or the AdminGUI. Documentation on how to set 
the different parameters through the command line is available when executing the following command from EJBCA home directory:
</p>
</li>
</ul>
<source>
./bin/ejbca.sh config scep updatealias --help
</source>
</subsubsection>
<subsubsection name="Include CA certificate in response">
<p>Setting this value to true will cause the CA certificate to be included in the response, if applicable</p>
</subsubsection>
<subsubsection name="Allow Client Certificate Renewal (Enterprise Edition only)">
<p>This setting activates Client Certificate Renewal, as defined in <a href="http://tools.ietf.org/html/draft-nourse-scep-23#appendix-D">Appendix D</a> of the SCEP draft. In short, this 
mode allows the server to interpret enrollment requests as certificate renewal requests, only if the latest issued certificate for the end entity has passed half its validity. To be 
valid, the PKCS#7 wrapping the CSR must be signed by the old certificate's keypair. </p>
</subsubsection>
<subsubsection name="Allow Client Certificate Renewal using old key (Enterprise Edition only)">
<p>The SCEP draft doesn't mandate if old keys may be reused for Client Certificate Renewal or not, so EJBCA includes this as a setting. </p>
</subsubsection>
</subsection>

<subsection name="External RA SCEP Server (Enterprise Edition Only)">
<p>
EJBCA supports the SCEP 'polling' RA model using the <a href="externalra.html">External RA API</a>.
Using this, a SCEP client can send a request to the External RA, and then wait, polling the RA for updates. 
When the request is processed by the CA, which fetches the pkcs10 request from the External RA, the certificate is sent back to the External RA. 
When the certificate is complete on the External RA, the RA sends back the SCEP certificate response the next time the SCEP client
polls the RA. This feature is very useful to securely insulate the CA from the SCEP clients throughout the network.
</p>


</subsection>

<subsection name="Tested devices">
<subsubsection name="Cisco ISE">
<p>
EJBCA SCEP, using RA mode, has been sucesfully integrated with Cisco ISE. Configuring EJBCA as a backend CA in Cisco ISE devices can be enrolled with certificates from EJBCA, through the ISE enrollment interfaces.
</p>
</subsubsection>
<subsubsection name="iPhone/iOS">
<p>
You can enroll certificates for the iOS directly with EJBCA using SCEP. There is a SCEP profile in the iPhone that you can use for this.
<a href="http://www.primekey.se/">PrimeKey</a> has created a detailed howto that is available together with a support subscription.
</p>
</subsubsection>
<subsubsection name="OpenScep">
<p>
OpenScep has does not work with modern OpenSSL implementation (only works with OpenSSL 0.9.6) and also has a bug
that causes it to crash when receiving SCEP responses. There are <a href="http://www.primekey.se/~tomas/download.html">patches</a> that address these issues though so it can be used.
</p><p>
To use the <a href="http://openscep.othello.ch/">OpenScep</a> client to request a certificate from this servlet, use the command:
</p>
<source>
./scep -k test.key -r test.pemreq -c ejbca-ca.pem -q foo123 -u http://localhost:8080/ejbca/publicweb/apply/scep/ALIAS/pkiclient.exe
</source>
<p>
Where test.key is generated with:
</p>
<source>
openssl genrsa -out test.key
</source>
<p>
test.req is generated with:
</p>
<source>
openssl req -key test.key -new -days 30 -out test.req -outform DER -config ../openssl/openscep.cnf
</source>
<p>
and test.pemreq is generated with:
</p>
<source>
openssl req -key test.key -new -days 30 -out test.pemreq -outform PEM -config ../openssl/openscep.cnf
</source>
</subsubsection>
<subsubsection name="Simple Scep Client (sscep)">
<p>
<a href="http://www.klake.org/~jt/sscep/">Simple Scep Client</a>.
You should only use CN in the users DN (same as for PIX below).
</p>
</subsubsection>
<subsubsection name="jSCEP">
<p>
<a href="http://code.google.com/p/jscep/">jSCEP</a>.
jSCEP uses EJBCA as one of the servers it is tested against.
</p>
<p>
There is a <a href="https://github.com/asyd/jscep-cli-jdk6">CLI for jSCEP</a> by Bruno Bonfils.
</p>
<p>You can test the CLI easily by creating a SCEP alias and issuing a SCEP request. For example:
</p>
<source>
$ cd ejbca
$ cat > scepalias-camode.properties
scep.operationmode = ca
uploaded.includeca = true

$ bin/ejbca.sh config scep uploadfile --alias scep --file scepalias-camode.properties
$ bin/ejbca.sh ra addendentity --username=user --password=foo123 --dn="CN=User Usersson" --caname=ManagementCA --type=1 --token=USERGENERATED
$ cd ../jscep-cli-jdk6
$ openssl genrsa -out test.key
$ openssl req -key test.key -new -days 30 -out test.pemreq -outform PEM
$ java -jar target/jscepcli-1.0-SNAPSHOT-exe.jar --ca-identifier ManagementCA --challenge foo123 --csr-file test.pemreq --dn "CN=user" --key-file test.key --url http://localhost:8080/ejbca/publicweb/apply/scep/pkiclient.exe
</source>
</subsubsection>
<subsubsection name="MobileIron">
<p>
EJBCA has been confirmed to work with MobileIron MDM system.
</p>
<p>
Mobile Iron always use the CA identifier 'MobileIronSCEP' in all SCEP request. 
SCEP request from MobileIron always start with "operation=GetCACaps&amp;message=MobileIronSCEP". 
Therefore the CAs name have to be set to 'MobilIronSCEP' to make it work.
<br></br>
Beside that RA and CA mode works perfectly with MobilIronMDM. 
</p>
</subsubsection>
<subsubsection name="Juniper Networks NetScreen-25/NetScreen-50">
<p>
Works well.
</p>
<p>
To enroll using the Juniper box go to the Web GUI at https://&lt;juniper-ip&gt;/, then click your way to Objects->Certificates.
To create a new certificate request:
<ol>
<li>New - enter the DN that your box will receive:
  <ul>
  <li>Name=netscreen.foo.se</li>
  <li>Organization=PrimeKey</li>
  <li>Country=SE</li>
  <li>IP Address=192.168.1.1</li>
  <li>FQSN=netscreen.foo.se</li>
  </ul>
Click generate.
</li>
<li>Automatically enroll to -> New CA Server settings. You have to configure if EJBCA should use the direct CA mode or the RA polling mode:
  <ul>
  <li>CGI URL: http://&lt;ra-ip&gt;:8080/scepraserver/scep/&lt;config-alias&gt;/pkiclient.exe</li>
  <li>CA IDENT: The CA Name in EJBCA, for example ScepCA.</li>
  <li>Challenge: A password for a pre-registered user in CA mode, or a random password used for polling RA mode.</li>
  </ul>
Click OK.
</li>
<li>You can now see the request in Objects->Certificates. If you are using polling RA mode, you can click 'Retrieve' after the request
has been approved in the CA and the certificate has been generated.
</li> 
</ol>
</p></subsubsection>
<subsubsection name="Cryptlib">
<p>
When using <a href="http://www.cs.auckland.ac.nz/~pgut001/cryptlib/">Cryptlib</a>, the CA certificate must have 
KeyUsage 'Key Encipherment' in addition to the usual key usage flags. This is reasonable, since SCEP requires the CA
to actually encrypt data (which generally is a bad thing, since a special encryption certificate should be used for that).
<br></br>Key usage for an ScepCA should be: Certificate Sign, CRL Sign, Digital Signature, Key Encipherment
</p>
<p>
Use the complete path as for the Cisco VPN client below as server name.
</p></subsubsection>
<subsubsection name="Cisco VPN client">
<p>
To enroll using the Cisco VPN client use:
<ul>
<li>CA URL='http://127.0.0.1:8080/ejbca/publicweb/apply/scep/ALIAS/pkiclient.exe'</li>
<li>CA Domain=your CAs name in EJBCA</li>
<li>In the DN screen simply enter the username (as added in EJBCA) as 'Name [CN]'</li>
</ul>
</p>
<p>
When using an External RA to enroll with the Cisco VPN client, the RA certificate must have 
KeyUsage SigitalSignature and KeyEncipherment for the client to accept the CA certificates.
However, to locate the RA encryption certificate, only KeyEncipherment can be set, which makes things quite complicated.<br/>
<br/>The conclusion is that RA enrollment does not work with Cisco VPN client.
</p>
</subsubsection>

<subsubsection name="AutoSscep">
<p>EJBCA has been tested successfully with <a href="http://autosscep.spe.net/">AutoSscep</a> for enrollment against the CA and the 
External RA SCEP service. 
</p>
<p>Instructions:
<ol>
<li>Download and build AutoSscep (make).</li>
<li>Create a configuration file, ejbca.conf, as the example below.</li>
<li>Create a user in EJBCA with username (common name) and DN exactly as entered in the configuration file.</li>
<li>run 'autosscep ejbca.conf'.</li>
</ol>
Sample configuration file, ejbca.conf:
</p>
<source>
Verbose = "yes"
Debug = "no"

CADir="/home/autosscep/"
CertDir="/home/autosscep/"
KeyDir="/home/autosscep/"

[CA]
DN="C=SE, O=EJBCA Sample, CN=ManagementCA"
URL="http://localhost:8080/ejbca/publicweb/apply/scep/pkiclient.exe"
CertFile="ManagementCA.cacert.pem"
EncCertFile="ManagementCA.cacert.pem"
[/CA]

[Certificate]
CertFile="mycert"
KeyFile="mykey"
CADN="C=SE, O=EJBCA Sample, CN=ManagementCA"

# Create a user with username "router4711" and password "foo123" in EJBCA
# to automatically enroll
# Note you need to add a user with exactly these fields in the DN in EJBCA
Email = "mymail@mydomain"
Country="SE"
State="BS"
Location="Stockholm"
Organization="PrimeKey"
CommonName="router4711"

ChallengePassword="foo123"
[/Certificate]
</source>
<p>
AutoSscep also handles enrolling against an RA, where the RA first sends a PENDING response which the request is beeing processed.
After processing (by the CA) you simply run the AutoSscep client again to pick up the generated certificate.
<br/>
In order to enroll against the External RA SCEP Server in EJBCA i only had to change the CA part of the configuration file to 
use the SCEP RA servers certificate for signing and encrypting the messages instead of the CAs, and to use the URL to the RA. 
The SCEP RA certificate is the end entity certificate issued to the External RA SCEP server (the keystore is usually called scepraserver.p12).
</p>
<source>
[CA]
DN="C=SE, O=EJBCA Sample, CN=ManagementCA"
URL="http://localhost:8080/scepraserver/scep/pkiclient.exe"
CertFile="scepra.pem"
EncCertFile="scepra.pem"
[/CA]
</source>
</subsubsection>

<subsubsection name="Cisco PIX/3000">
<p>
Cisco PIX is working as of EJBCA 3.1.3.
<br></br>Also Cisco 3000 is reported working well. The description below is for PIX, 3000 probably have less constraints than the PIX.
<ul>
<li>You must configure JBoss to use port 80 to enroll with PIX, this is done in 
APPSRV_HOME/server/default/deploy/jbossweb-tomcat50.sar/service.xml (or similar depending on version). You must run as root to use port 80.</li>
<li>EJBCA supports the 'ca' mode of enrollment for pix, not 'ra'. For 'ra' and polling enrollment you can use the External RA API SCEP module.</li>
<li>The certificate profile used by the SCEP CA must include the key usages KeyEncipherment and DataEncipherment, otherwise PIX will 
not be able to verify/decrypt encrypted SCEP messages. This is not in the default certificate profile for CAs. Create a new certificate profile before 
creating the Scep CA, you can use ROOTCA as template for the new certificate profile.</li>
<li>When enrolling for certificate using SCEP with for example a Cisco PIX it is a 'ca_nickname'. This nickname 
should be the CA-name as defined when creating the CA in EJBCA. For example 'vpnca'.</li>
<li>Only use lower-case names when creating the CA in EJBCA, since PIX will change the CA name VpnCA to vpnca when enrolling.</li>
<li>The username in EJBCA must be the name the PIX identifies itself with <i>name</i>.<i>domain</i>, example pix.primekey.se.</li>
<li>The end-entity DN must include the DN components CN and unstructuredName, ex "CN=pix.primekey.se, unstructuredName=pix.primekey.se". 
You can also include O, C etc in the certificate. A normal DN for a PIX is "CN=pix.primekey.se,unstructuredName=pix.primekey.se,O=PrimeKey,C=SE".</li>
<li>Certificates used for PIX MUST include the DN component unstructuredName (fqdn) and could also include unstructuredAddress (ip) being the IP-address of the PIX.</li>
<li>The certificate used on the Cisco PIX MUST have a SubjectAltName field dNSName, matching the DN component unstructuredName. This is needed in order for Cisco VPN clients to connect to the PIX. The DNS Name field is not necessary for the PIX to enroll perfectly with EJBCA, only for the client to be able to connect.</li>
<li>Certificates used for PIX may also use the SubjectAltName iPAddress matching the DN component unstructuredAddress, but it's not necessary.</li>
<li>Cisco does not support use of the 'Domain Component', DC, attribute in DNs, don't use it.</li>
<li>KeyUsage should include <i>Digital Signature</i> and <i>Key Encipherment</i>, the EJBCA defaults work fine.</li>
<li>When the Cisco VPN-client (above) connects to the PIX, the 'ou' part of the clients DN must match a Vpngroup you have specified, 
otherwise the connection will fail.</li>
<li>Cisco PIX (older) needs the SCEP response messages to use MD5 as hash algorithm, not SHA1, this is handled by EJBCA automatically.</li>
</ul>
</p><p>
Please notice this Cisco note:
</p><p>
Be sure that the PIX Firewall clock is set to GMT, month, day, and year before configuring CA. 
Otherwise, the CA may reject or allow certificates based on an incorrect timestamp. 
Cisco's PKI protocol uses the clock to make sure that a CRL is not expired.
Set timezone first, then set time, then check time with 'show clock'.
</p><p>
The enrollment steps should be something like:
</p>
<source>
-- Connect with pix and enter admin mode
telnet 10.1.1.1 (default pwd cisco)
enable (default blank pwd)
configure terminal
-- Enable CA logging
debug crypto ca
-- Clear current PKI config
clear ca identity
-- Enter PKI config, i.e location of CA etc. Don't require CRLs, it's easier
ca identity pixca ca-ip:/ejbca/publicweb/apply/scep/pkiclient.exe
ca configure pixca ca 1 0 crloptional
ca authenticate pixca
-- wait --
-- Look at the fetched certificate
show ca certificate
ca save all
wr mem
-- Get a CRL if you really want to (if you did not configure CRL as optional you must)
ca crl request pixca
-- wait --
show ca crl
-- Generate keys and enroll for the certificate (user in ejbca has password foo123)
ca generate rsa key 1024
ca enroll pixca foo123
-- wait, wait, this will take a long time --
-- Look at the fetched certificate, this should now show both the pix cert and the ca cert
show ca certificate

pix(config)# show ca cert
Certificate
  Status: Available
  Certificate Serial Number: 594f643a6916d78d
  Key Usage: General Purpose
  Subject Name:
    C = SE
    O = PrimeKey
    CN = pix.primekey.se
    UNSTRUCTURED NAME = pix.primekey.se
    UNSTRUCTURED IP = 10.1.1.1
  Validity Date:
    start date: 14:42:29 GMT Sep 17 2005
    end   date: 14:52:29 GMT Sep 17 2007

CA Certificate
  Status: Available
  Certificate Serial Number: 7c7cf75236955a51
  Key Usage: General Purpose
    C = SE
    O = PrimeKey
    CN = pixca
  Validity Date:
    start date: 15:59:20 GMT Sep 16 2005
    end   date: 16:09:20 GMT Sep 14 2015

</source>
</subsubsection>
</subsection>
</section>

<section name="CMP">
<p>
CMP (RFC4210) is a very complex protocol, which EJBCA does implement some parts of.
<br/> 
The following CMP messages are supported:
<ul>
<li>Initialization request (ir)</li>
<li>Certification request (cr)</li>
<li>Certification confirm (certConf)</li>
<li>Revocation request (rr)</li>
<li>NestedMessageContent (nested)</li>
<li>Key Update Request (kur)</li>
</ul>
Certificate requests use the CRMF (RFC4211).
</p>
<p>EJBCA can work in two modes with CMP:</p>
<ul>
<li><b>Client mode</b> - This is the default mode. Client mode works like any other enrollment in EJBCA. When a request comes in, EJBCA verifies the request (see User authentication below)
and issues a certificate to a user that has been previously registered in EJBCA.</li>
<li><b>RA mode</b> - RA mode is used when the CMP client will act as an RA to EJBCA (the RA sends a certificate request to EJBCA). No user is pre-registered in EJBCA, 
but when authenticated RA CMP messages arrive a user is created in EJBCA and a certificate is issued.</li>
</ul>
<p>
In RA mode, EJBCA supports several CAs and profiles based on the use of configuration alias specified in the URL used (see below).
</p>

<subsection name="CMP and 3GPP/4G/LTE configuration guide">
<p>
<a href="http://www.primekey.se/">PrimeKey</a> has created a detailed CMP configuration guide, with details how to 
configure EJBCA for 3GPP/4G/LTE networks using CMP. The guide is available together with a support subscription from PrimeKey. 
</p>
</subsection>

<subsection name="Configuration">
<p>
Configuring CMP is done in the Admin GUI, under 'CMP Configuration'. To be able to edit CMP configuration, you have to have the 'edit_systemconfiguration' access.
</p>
</subsection>
<subsection name="CMP over http">
<p>
By default EJBCA support CMP over the http transport protocol.
The URL for the CMP servlet is:
<br/>
http://127.0.0.1:8080/ejbca/publicweb/cmp/ALIAS
</p>
<p>
ALIAS is a configuration alias specifying the set of CMP configurations to be used when handling a request sent through this specific URL. ALIAS can be any alphanumeric 
string. You can specify as many aliases as you need in the Admin GUI.
</p>
<p>
Example:<br/>
http://127.0.0.1:8080/ejbca/publicweb/cmp/cmpalias
<br/>
Any CMP request sent through this URL will use the CMP configurations associated with the alias "cmpalias"
</p>
</subsection>
<subsection name="CMP over TCP">
<p>
You can enable a CMP TCP service by changing the option "cmp.tcp.enabled" in conf/cmptcp.properties (copy conf/cmptcp.properties.sample to conf/cmptcp.properties first).
<br/>
When re-deploying EJBCA this will start a TCP listener on the default port for CMP over TCP. You must run the application server as root to use the default port, since it is a low port (&lt;1024).
See the documentation in conf/cmp.properties for information about configuration options for TCP. We recommend using a non standard port > 1024.
</p>
<p>
CMP requests sent over TCP will be using CMP configurations associated with the configuration alias "tcp". Note that a CMP configuration alias with the name "tcp" 
does not exist per default. It has to be created (and/or altered) through the Admin GUI before any CMP request arrives through TCP. 
</p>
<p>
Although EJBCA still supports CMP over TCP for now, it will not be supported for much longer. That is why we strongly recommend using CMP over HTTP instead.
</p>
</subsection>
<subsection name="CMP Message Authentication">
  <p>EJBCA supports 4 modules for message authentication. Which modules to use, along with their parameters, can be set in the Admin GUI under 'CMP Configuration'.</p>
  <p>The four supported modules are either password extractors or PKIMessage verifiers:</p>
  <p>Password extractors (client mode only):</p>
  <ul>
    <li>RegTokenPwd: Extracts the password from the CMP request through the means of a regToken control (id-regCtrl-regToken) in the CRMF message. The regToken is a 
        UTF8String containing the users password as registered in EJBCA. This module requires no parameters </li>
    <li>DnPartPwd: Extracts the password from the subjectDN of the user the request concerns. As a parameter, the DN part that contains the password should be 
        specified. For example, if the subjectDN is "CN=name,C=se,UID=PASSWORD", the parameters should be set to "UID"</li>
  </ul>
  <p>PKIMessage verifiers:</p>
  <ul>
    <li>HMAC: This module uses a shared secret to authenticate the CMP message:
      <ul>
        <li>In RA mode, the shared secret is set as a parameter to this module. If no parameter is specified, EJBCA will use the shared secret specified in the CA 
            under "CMP RA Authentication Secret"</li>
        <li>In client mode, the pre-registered end entity will be looked up in the database, and if there was a clear text password there, this password will be used 
            to authenticate the message. If there is no clear text password associated with that end entity, the authentication will fail.</li>
      </ul>
    </li>
    <li>EndEntityCertificate: When this module is used, the request sender should attach his certificate in the extraCert field in the PKIMessage and then 
        sign the message with his private key. 
      <ul>
        <li>In client mode, a user may only send a CMP request regarding his/her own certificate. Ejbca will then check if the 
            certificate in extraCert does exist in its database and verifies that it belongs to the sender before verifying the signature. No parameters should be specified for 
            this module in client mode.</li>
        <li>In RA mode, as a parameter, this module expects the name of the CA that that has issued the certificate in the extraCert field. If a parameter is specified, 
            EJBCA will then check if the certificate in extraCert does exist in the database, that it was issued by the right CA (the CA specified as a parameter) and that it 
            belongs to a registerd administrator in EJBCA with the right authorizations to perform the operations required in the request. If no parameter is specified, 
            none of the mentioned checks will be performed, however, Ejbca will expect the CMP request to have been previously authenticated by other ways, for example, 
            by sending the request inside a signed NestedMessageContent</li>
      </ul>
    </li>
  </ul>
<p>
More than one module can be specified by separating them with a ";". In case of more than one module specified, the first module will be used to for 
authentication testing. If the first module fails, the second module will be used for authentication testing, and so on until a successful authentication is 
done or all alternatives fail.
</p>
</subsection>
<subsection name="Client mode for CMP">
<p>
Client mode is used when the CMP client will act as an End Entity to EJBCA. This means that the End Entity must be pre-registered in EJBCA and that the client request is authenticated
with this pre-registered end entity before a certificate is issued. This is the same authentication model as for regular enrollment, i.e. browser enrollment, using a username/password combination. 
<ul>
<li>The users DN is deducted from the request according to rules configured.</li>
<li>The username in EJBCA must be pre-registered.</li>
<li>The password for the user in EJBCA must be passed in the request (one-time password).</li>
<li>If the Certificate Profile allows it, keyUsage, validity and extensions are also taken from the CertTemplate in the request message.</li>
<li>Signature POPO is used.</li>
</ul>
After the user has been authenticated in EJBCA, a certificate is generated as usual and sent back to the client.
</p>
<p>To use client mode, no particular configuration is needed, since this is the default mode.</p>
<subsubsection name="User look-up">
<p>
Initialization and certification requests uses the CRMF request message (RFC4211).
</p>
<p>
Users can be looked up from the request in different ways, as configured in the Admin GUI under "CMP Configuration".
By default the subject DN from the certTemplate in the request is used to look up the used in EJBCA. 
You can also configure EJBCA to use the CN or the UID from the subject DN as the username in EJBCA.
</p>
</subsubsection>
<subsubsection name="Vendor CA authentication (EJBCA Enterprise only)">
<p>
If the end entity has a Vendor certificate with which it should identify itself for initial enrollment, as specified in 3GPP for example, it can also do that. 
In this case the CA issuing the end entity certificate is not the same as the Vendor CA. The vendor CA must be imported in EJBCA as an External CA ('Import CA certificate' in the admin GUI).
This is described in detail in the integration guide for 3GPP available with EJBCA Enterprise.
</p>
</subsubsection>
</subsection>

<subsection name="RA mode for CMP">
<p>
RA mode is used when the CMP client will act as an RA to EJBCA. When the RA sends a certificate request to EJBCA, no user needs to be pre-registered in EJBCA. 
When EJBCA receives the request, the message will be authenticated. After it has been authenticated, a user is created and a certificate is issued.
<ul>
<li>The users DN is taken from the CertTemplate in the request message send from the RA (i.e. the DN requested by the RA).</li>
<li>The username in EJBCA is generated according to the options configured</li>
<li>The password for the user in EJBCA is random.</li>
<li>If the Certificate Profile allows it, keyUsage, validity and extensions are also taken from the CertTemplate in the request message.</li>
<li>raVerify POPO is used.</li>
<li>Messages are authenticated using one of the configured authentication modules.</li>
</ul>
After the user has been created in EJBCA, a certificate is generated as usual and sent back to the RA, who will distribute it to the end-user.
</p>
<p>
If the same username is constructed (for example UID) as an already existing user, 
the existing user will be modified with new values for profile etc, and a new certificate will be issued for that user.
</p>
<p>
To allow requests to specify the CAs and profiles to be used, the CA and profiles configuration values should be set to "KeyId". This means that the CA and/or 
profiles that has the same name as the KeyId sent in the CMP request (UTF-8 encoding is used) will be used to create the end entity.
</p>
<subsubsection name="Multiprotection support">
<p>
In RA mode, it is also possible to send a CMP request with multiple signatures. Ejbca implements this feature following the specifications 
in RFC4210. In cases where an end entity sends a protected PKI message to an RA, the RA forwards that message to a CA, attaching its own signature for protection. 
This is accomplished by nesting the entire message sent by the end entity within a new PKI message.
</p> 
<p>Sample code for a signature protected NestedMessageContent message:</p>
<source>
String subjectDN = "CN=bogusSubjectNested";
final byte[] nonce = "sendernonce".getBytes();
final byte[] transid = "trandis".getBytes();

PKIMessage crmfMsg = createCrmfReq();
//Signing crmfMsg
KeyPair eeKeys = getAdminKeys();
Certificate adminCert = getAdminCertificate();
ByteArrayInputStream    bIn = new ByteArrayInputStream(adminCert.getEncoded());
ASN1InputStream         dIn = new ASN1InputStream(bIn);
ASN1Sequence extraAdminCertSeq = (ASN1Sequence)dIn.readObject();
X509CertificateStructure extraCert = new X509CertificateStructure(ASN1Sequence.getInstance(extraAdminCertSeq));
crmfMsg.addExtraCert(extraCert);

final Signature sig = Signature.getInstance(PKCSObjectIdentifiers.sha1WithRSAEncryption.getId(), "BC");
sig.initSign(eekeys.getPrivate());
sig.update(crmfMsg.getProtectedBytes());
byte[] eeSignature = sig.sign();
crmfMsg.setProtection(new DERBitString(eeSignature));

PKIHeader myPKIHeader = new PKIHeader(new DERInteger(2), new GeneralName(new X509Name(subjectDN)), new GeneralName(new X509Name(((X509Certificate)cacert).getSubjectDN().getName())));
myPKIHeader.setMessageTime(new DERGeneralizedTime(new Date()));
// senderNonce
myPKIHeader.setSenderNonce(new DEROctetString(nonce));
// TransactionId
myPKIHeader.setTransactionID(new DEROctetString(transid));

PKIBody myPKIBody = new PKIBody(crmfMsg, 20); // NestedMessageContent
PKIMessage myPKIMessage = new PKIMessage(myPKIHeader, myPKIBody);
//Signing myPKIMessage
KeyPair raKeys = getRAKeys();
final Signature sig = Signature.getInstance(PKCSObjectIdentifiers.sha1WithRSAEncryption.getId(), "BC");
sig.initSign(rakeys.getPrivate());
sig.update(myPKIMessage.getProtectedBytes());
byte[] eeSignature = sig.sign();
myPKIMessage.setProtection(new DERBitString(eeSignature));

final ByteArrayOutputStream bao = new ByteArrayOutputStream();
final DEROutputStream out = new DEROutputStream(bao);
out.writeObject(myPKIMessage);
final byte[] ba = bao.toByteArray();
// Send request and receive response
final byte[] resp = sendCmpHttp(ba, 200);
</source>
</subsubsection>
<subsubsection name="Sample config">
<p>
A sample config of EJBCA to allow an RA to request certificates for users. 
The RA uses password based mac (pbe) protection of CMP messages with password 'password'.
Users will be created using UID from the request DN and with a prefix, so the resulting username will be: cmp&lt;UsersUID&gt;.
End entity profiles names CMP_ENTITY and CMP_CERT is created in EJBCA allowing the request DN.
</p>
<source>
CMP Operational Mode : RA Mode
Allow RA Verify Proof-of-Possession : check
CMP Response Protection : pbe
CMP Authentication Module : HMAC
CMP Authentication Parameters : password
RA Name Generation Scheme : DN
RA Name Generation Parameters : UID
RA Name Generation Prefix : cmp
RA End Entity Profile : CMP_ENTITY
RA Certificate Profile : CMP_CERT
RA CA Name : ManagementCA
</source>
</subsubsection>

<subsubsection name="Using one authentication secret per CA">
<p>
Edit each CAs that should be used for CMP certificate issuance and enter new CMP RA Authentication Secret.
There should be no parameter specified for the HMAC authentication module, otherwise, this parameter will override the CA specific configuration. 
</p>
</subsubsection>
</subsection>

<subsection name="Key Update Request (kur)">
<p>Also known as the Certificate Update request. When a key pair is due to expire, the relevant end entity may request a key update. The CMP request is signed 
and the sender attaches their certificate in the extraCert field in the CMP message.</p>
	
<subsubsection name="In Client Mode">
<p>In client mode, the only end entity that is allowed to send a KeyUpdate request is the end entity that owns the certificate to be renewed. This end entity 
should be the one signing the request and attaching its "old" certificate (that has not been expired yet) to the CMP message. The CA will only look into the 
certificate in extraCert to find which certificate is to be updated.</p>  
</subsubsection>
<subsubsection name="In RA Mode">
<p>In RA mode, an administrator is allowed to send a KeyUpdate request on behalf of an end entity. The adminstrator should be the one signing the request and 
attaching his own certificate to the CMP message. Either only the subjectDN or both the subjectDN and the issuerDN of the certificate to be updated 
are specified in the CertificateTemplate field in the CMP message.</p>

<p>In order for this request to succeed, the administrator sending the update request has to be authorized to perform this operation. Also, EndEntityCertificate 
authentication module would have to be set among the configured authentication modules.</p>
</subsubsection>
</subsection>

<subsection name="Proof of possession">
<p>
Proof of Possession (POP) is another part where CMP has gazillions of different options. 
<br/>
The following POPs in the CRMF are supported by EJBCA:
<ul>
<li>raVerify - if "Allow RA Verify Proof-of-Possession" is checked, EJBCA will support the raVerify POP and in that case not do any verification of POP. By default this is false, because the standard does not recommend this option.</li>
<li>signature - where the PublicKey is in the CertTemplate and the signature is calculated over the CertReqMsg.certReq (the standard procedure when the CertTemplate contains the subject and publicKey values).</li>
<li>signature with POPOSigningKeyInput - where the PublicKey and subject DN is in POPOSigningKeyInput, possibly just copied from the CertTemplate. The signature is calculated over the POPOSigningKeyInput (if the values are also in the CertTemplate they must be identical).</li>
</ul>
Currently these are the POPOs supported by EJBCA, so if you don't use raVerify or signature your request will fail because POPO is not verified.
</p>
</subsection>

<subsection name="Certificate validity">
<p>Normally the validity period of issued certificates are controlled by the certificate profile. 
If you enable 'Allow validity override' in the certificate profile, and the CMP initialization- or certification request contains a 
validity time in the CRMF request template, this validity period will be used.
</p>
</subsection>

<subsection name="Certificate Key Usage">
<p>Normally the key usage extension of issued certificates are controlled by the certificate profile. 
If you enable 'Allow Key Usage Override' in the certificate profile, and the CMP initialization- or certification request contains a 
key usage in the CRMF request template, this key usage will be used.
</p>
</subsection>

<subsection name="Interoperability">
<subsubsection name="RSA jCert">
<p>CMP has been tested using RSA jCert toolkit for initialization requests. To run this as an RA you should configure CMP 
with:
<ul>
<li>CMP Operational Mode : RA Mode</li>
<li>Allow RA Verify Proof-of-Possession : check</li>
<li>CMP Response Protection : pbe</li>
<li>CMP Authentication Module : HMAC</li>
<li>CMP Authentication Parameters : your shared password</li>
<li>and other configurations you want for your RA.</li>
</ul>
</p>
</subsubsection>
<subsubsection name="AET BlueX">
<p>CMP has been tested with BlueX from <a href="http://www.aeteurope.nl/">AET Europe</a>. From EJBCA's point of view BlueX functions as an RA with the same configuration 
options as for jCert.
</p>
</subsubsection>
<subsubsection name="Aventra">
<p>CMP has been tested with <a href="http://aventra.fi/English/index_E.php">Aventra</a> card management system. Same configuration as above.</p>
</subsubsection>
<subsubsection name="Novosec BC extension">
<p>For internal testing a modified version of the Novosec extension to BouncyCastle is used.</p>
</subsubsection>
<subsubsection name="Cryptlib">
<p>CMP has been tested with <a href="http://www.cryptlib.com/">CryptLib</a>.</p>
<p>An old test program for running CryptLib against EJBCA can be downloaded <a href="http://download.primekey.se/ejbca/tests/ejbcaCryptLibTest.zip">here</a>.</p>
</subsubsection>
<subsubsection name="BouncyCastle">
<p>CMP has been tested with <a href="http://www.bouncycastle.org">BouncyCastle</a> CMP classes, available in BC 1.46 or later. Both client and RA mode should work.</p>
<p>Sample code for a HMAC protected (RA mode) certificate request (initial) message:</p>
<source>
// Just preparations
final BigInteger certReqId = BigInteger.valueOf(1);
final byte[] senderNonce = "12345".getBytes();
final byte[] transactionId = "23456".getBytes();
KeyPairGenerator kpi = KeyPairGenerator.getInstance("RSA");
kpi.initialize(1024);
KeyPair keyPair = kpi.generateKeyPair();
// Now on to the CMP 
CertificateRequestMessageBuilder msgbuilder = new CertificateRequestMessageBuilder(certReqId);
X500Name issuerDN = new X500Name("CN=ManagementCA");
X500Name subjectDN = new X500Name("CN=user");
msgbuilder.setIssuer(issuerDN);
msgbuilder.setSubject(subjectDN);
final byte[]                  bytes = keyPair.getPublic().getEncoded();
final ByteArrayInputStream    bIn = new ByteArrayInputStream(bytes);
final ASN1InputStream         dIn = new ASN1InputStream(bIn);
final SubjectPublicKeyInfo keyInfo = new SubjectPublicKeyInfo((ASN1Sequence)dIn.readObject());
dIn.close();
msgbuilder.setPublicKey(keyInfo);
GeneralName sender = new GeneralName(subjectDN);
msgbuilder.setAuthInfoSender(sender);
// RAVerified POP
msgbuilder.setProofOfPossessionRaVerified();
CertificateRequestMessage msg = msgbuilder.build();
org.bouncycastle.asn1.crmf.CertReqMessages msgs = new org.bouncycastle.asn1.crmf.CertReqMessages(msg.toASN1Structure());
org.bouncycastle.asn1.cmp.PKIBody pkibody = new org.bouncycastle.asn1.cmp.PKIBody(org.bouncycastle.asn1.cmp.PKIBody.TYPE_INIT_REQ, msgs);
// Message protection and final message
GeneralName recipient = new GeneralName(issuerDN);
ProtectedPKIMessageBuilder pbuilder = new ProtectedPKIMessageBuilder(sender, recipient);
pbuilder.setMessageTime(new Date());
// senderNonce
pbuilder.setSenderNonce(senderNonce);
// TransactionId
pbuilder.setTransactionID(transactionId);
// Key Id used (required) by the recipient to do a lot of stuff
pbuilder.setSenderKID("KeyId".getBytes());
pbuilder.setBody(pkibody);
JcePKMACValuesCalculator jcePkmacCalc = new JcePKMACValuesCalculator();
final AlgorithmIdentifier digAlg = new AlgorithmIdentifier(new ASN1ObjectIdentifier("1.3.14.3.2.26")); // SHA1
final AlgorithmIdentifier macAlg = new AlgorithmIdentifier(new ASN1ObjectIdentifier("1.2.840.113549.2.7")); // HMAC/SHA1
jcePkmacCalc.setup(digAlg, macAlg);
PKMACBuilder macbuilder = new PKMACBuilder(jcePkmacCalc);
MacCalculator macCalculator = macbuilder.build("password".toCharArray());
ProtectedPKIMessage message = pbuilder.build(macCalculator);
</source>
<p>Sample code for a HMAC protected (RA mode) revocation request message:</p>
<source>
// Just preparations
final byte[] senderNonce = "12345".getBytes();
final byte[] transactionId = "23456".getBytes();
BigInteger serNo = new BigInteger("aabbccdd");
X500Name issuerDN = new X500Name("CN=ManagementCA");
X500Name userDN = new X500Name("CN=user");
// Cert template too tell which cert we want to revoke
CertTemplateBuilder myCertTemplate = new CertTemplateBuilder();
myCertTemplate.setIssuer(issuerDN);
myCertTemplate.setSubject(userDN);
myCertTemplate.setSerialNumber(new ASN1Integer(serNo));
// Extension telling revocation reason
ExtensionsGenerator extgen = new ExtensionsGenerator();
CRLReason crlReason = CRLReason.lookup(CRLReason.cessationOfOperation);
extgen.addExtension(Extension.reasonCode, false, crlReason);        
Extensions exts = extgen.generate();
ASN1EncodableVector v = new ASN1EncodableVector();
v.add(myCertTemplate.build());
v.add(exts);
ASN1Sequence seq = new DERSequence(v);
RevDetails myRevDetails = RevDetails.getInstance(seq);
RevReqContent myRevReqContent = new RevReqContent(myRevDetails);
PKIBody myPKIBody = new PKIBody(PKIBody.TYPE_REVOCATION_REQ, myRevReqContent); // revocation request
// Message protection and final message
GeneralName sender = new GeneralName(userDN);
GeneralName recipient = new GeneralName(issuerDN);
ProtectedPKIMessageBuilder pbuilder = new ProtectedPKIMessageBuilder(sender, recipient);
pbuilder.setMessageTime(new Date());
// senderNonce
pbuilder.setSenderNonce(senderNonce);
// TransactionId
pbuilder.setTransactionID(transactionId);
// Key Id used (required) by the recipient to do a lot of stuff
pbuilder.setSenderKID("KeyId".getBytes());
pbuilder.setBody(myPKIBody);
JcePKMACValuesCalculator jcePkmacCalc = new JcePKMACValuesCalculator();
final AlgorithmIdentifier digAlg = new AlgorithmIdentifier(new ASN1ObjectIdentifier("1.3.14.3.2.26")); // SHA1
final AlgorithmIdentifier macAlg = new AlgorithmIdentifier(new ASN1ObjectIdentifier("1.2.840.113549.2.7")); // HMAC/SHA1
jcePkmacCalc.setup(digAlg, macAlg);
PKMACBuilder macbuilder = new PKMACBuilder(jcePkmacCalc);
MacCalculator macCalculator = macbuilder.build("password".toCharArray());
ProtectedPKIMessage message = pbuilder.build(macCalculator);
</source>
<p>Sample code for a signature protected (Client mode) message:</p>
<source>
CertificateRequestMessageBuilder msgbuilder = new CertificateRequestMessageBuilder(BigInteger.valueOf(certReqId));
X509NameEntryConverter dnconverter = new X509DefaultEntryConverter();
X500Name issuerDN = X500Name.getInstance(new X509Name("CN=ManagementCA").toASN1Object());
X500Name subjectDN = X500Name.getInstance(new X509Name("CN=user", dnconverter).toASN1Object());
msgbuilder.setIssuer(issuerDN);
msgbuilder.setSubject(subjectDN);
final byte[]                  bytes = keyPair.getPublic().getEncoded();
final ByteArrayInputStream    bIn = new ByteArrayInputStream(bytes);
final ASN1InputStream         dIn = new ASN1InputStream(bIn);
final SubjectPublicKeyInfo keyInfo = new SubjectPublicKeyInfo((ASN1Sequence)dIn.readObject());
msgbuilder.setPublicKey(keyInfo);
GeneralName sender = new GeneralName(subjectDN);
msgbuilder.setAuthInfoSender(sender);
Control control = new RegTokenControl("foo123");
msgbuilder.addControl(control);
Provider prov = Security.getProvider("BC");
ContentSigner popsigner = new JcaContentSignerBuilder("SHA1withRSA").setProvider(prov).build(keyPair.getPrivate());
msgbuilder.setProofOfPossessionSigningKeySigner(popsigner);
CertificateRequestMessage msg = msgbuilder.build();
GeneralName recipient = new GeneralName(issuerDN);
ProtectedPKIMessageBuilder pbuilder = new ProtectedPKIMessageBuilder(sender, recipient);
pbuilder.setMessageTime(new Date());
// senderNonce
pbuilder.setSenderNonce(senderNonce);
// TransactionId
pbuilder.setTransactionID(transactionId);
org.bouncycastle.asn1.crmf.CertReqMessages msgs = new org.bouncycastle.asn1.crmf.CertReqMessages(msg.toASN1Structure());
org.bouncycastle.asn1.cmp.PKIBody pkibody = new org.bouncycastle.asn1.cmp.PKIBody(org.bouncycastle.asn1.cmp.PKIBody.TYPE_INIT_REQ, msgs);
pbuilder.setBody(pkibody);
ContentSigner msgsigner = new JcaContentSignerBuilder("SHA1withRSA").setProvider(prov).build(keyPair.getPrivate());
ProtectedPKIMessage message = pbuilder.build(msgsigner);
</source>
</subsubsection>
<subsubsection name="CMP for OpenSSL">
<p>CMP has been tested with <a href="http://cmpforopenssl.sourceforge.net/">cmpforopenssl</a>.</p>
<p>
Cmpforopenssl works with EJBCA. The current client tool, cmpclient, works with EJBCA CMP in RA mode and client mode. 
</p>
<p><strong>RA mode</strong></p>
<p>
Cmpforopenssl works with with EJBCA in RA mode with the following EJBCA configuration with alias tex. "opensslra" (unmentioned configurations = default):</p>
<source>
CMP Operational Mode : RA Mode
CMP Response Protection : pbe
CMP Authentication Module : HMAC
CMP Authentication Parameters : password
</source>
<p>
You can then use cmpforopenssl (as an RA):</p>
<source>
./openssl cmp -cmd ir -server localhost:8080 -path ejbca/publicweb/cmp/opensslra -srvcert ManagementCA.cacert.pem -user NewUser -pass password -certout clcert1.pem -newkey key1.pem -keyfmt PEM -certfmt PEM -subject "/CN=NewUser/O=My Organization/C=SE"
</source>
<p>or, with other version of cmpforopenssl:</p>
<source>
./cmpclient --server localhost --port 8080 --path ejbca/publicweb/cmp --cacert AdminCA1.der --ir --user mykeyid --password password --newclcert clcert.der --newkey key.pem --subject "CN=User Name;O=My Organization;C=SE"
</source>
<p>This requests a certificate, defining the subject DN that will be used. The CA used to sign the certificate is specified in the EJBCA cmp configuration, and can be taken from the keyid.
EJBCA authenticated the request using the HMAC protection with the password, and accepts any request upon correct authentication. See the CMP documentation above for more advanced configuration.
</p>
<p><strong>Client mode, HMAC password authentication</strong></p>
<p>
Cmpforopenssl works with with EJBCA in client mode, with HMAC password authentication, using the following EJBCA configuration with alias tex. "opensslclient" (unmentioned configurations = default):</p>
<source>
CMP Authentication Module : HMAC
CMP Authentication Parameters : password
Extract Username Component : CN
</source>
<p>You can now add a new user in EJBCA:</p>
<source>
bin/ejbca.sh ra addendentity user1 --password password "CN=user1,O=My Organization,C=SE" ManagementCA 1 USERGENERATED
bin/ejbca.sh ra setclearpwd user1 password
bin/ejbca.sh ra setendentitystatus user1 10
</source>
<p>
You can then use cmpforopenssl (as a client):</p>
<source>
./openssl cmp -cmd ir -server localhost:8080 -path ejbca/publicweb/cmp/opensslclient -srvcert ManagementCA.cacert.pem -user user1 -pass password -certout clcert1.pem -newkey key1.pem -keyfmt PEM -certfmt PEM -subject "/CN=user1/O=My Organization/C=SE"
</source>
<p>or, with other version of cmpforopenssl:</p>
<source>
./cmpclient --server localhost --port 8080 --path ejbca/publicweb/cmp --cacert AdminCA1.der --ir --user mykeyid --password password --newclcert clcert.der --newkey key.pem --subject "CN=user1;O=My Organization;C=SE"
</source>
<p>This requests a certificate, and the requested subject DN must match the registered subject DN.
EJBCA authenticates the request using the HMAC protection with the password of the registered user. See the CMP documentation above for more advanced configuration.</p>

<p><strong>Client mode, client certificate authentication</strong></p>
<p>
Cmpforopenssl works with with EJBCA in client mode, with certificate authentication, using the following EJBCA configuration with alias tex. "openssleec" (unmentioned configurations = default):</p>
<source>
CMP Authentication Module : EndEntityCertificate
CMP Authentication Parameters : ManagementCA (use the CA that issues your client authentication certificate)
Extract Username Component : CN
</source>
<p>You can now issue a certificate using certificate authentication in EJBCA (the end entity needs a certificate before so we re-use user1 from above):</p>
<source>
bin/ejbca.sh ra setclearpwd user1 password
bin/ejbca.sh ra setendentitystatus user1 10
</source>
<p>
You can then use cmpforopenssl (as a client):</p>
<source>
./openssl cmp -cmd ir -server localhost:8080 -path ejbca/publicweb/cmp/openssleec -srvcert ManagementCA.cacert.pem -cert clcert.pem -key key.pem -certout clcert1.pem -newkey key1.pem -keyfmt PEM -certfmt PEM -subject "/CN=user1/O=My Organization/C=SE"
</source>
<p>This requests a certificate, and the requested subject DN must match the registered subject DN.
EJBCA authenticates the request using the signature protection with the certificate of the registered user. See the CMP documentation above for more advanced configuration.</p>
<p>You can also use a 'cr' instead of an 'ir';</p>
<source>
bin/ejbca.sh ra setendentitystatus user1 10
./openssl cmp -cmd cr -server localhost:8080 -path ejbca/publicweb/cmp/openssleec -srvcert ManagementCA.cacert.pem -cert clcert.pem -key key.pem -certout clcert1.pem -newkey key1.pem -keyfmt PEM -certfmt PEM -subject "/CN=user1/O=My Organization/C=SE"
</source>

<p><strong>Client mode, Vendor certificate authentication (EJBCA Enterprise only)</strong></p>
<p>
If the end entity has a Vendor certificate with which it should identify itself for initial enrollment, as specified in 3GPP for example, it can also do that. 
In this case the CA issuing the end entity certificate is not the same as the Vendor CA. The vendor CA must be imported in EJBCA as an External CA ('Import CA certificate' in the admin GUI).
To enable vendor certificate authentication add the following to the CMP configuration with alias tex. "3gpp" for client certificate authentication:
</p>
<source>
Use Vendor Certificate Mode : checked
Vendor CA : 3GPP-CA
</source>
<p>With this configuration you can now request an initial certificate with the following command:
</p>
<source>
./openssl cmp -cmd ir -server localhost:8080 -path ejbca/publicweb/cmp/3gpp -srvcert ManagementCA.cacert.pem -cert devicecert.pem -key devicekey.pem -certout clcert1.pem -newkey key1.pem -keyfmt PEM -certfmt PEM -subject "/CN=device/O=My Organization/C=SE"
</source>
<p>
In this configuration 'devicecert.pem' and 'devicekey.pem' are the device's private key and the certificate issued by the Vendor CA (3GPP-CA). 
ManagementCA.cacert.pem is the CA certificate of the CA in EJBCA issuing the new certificate for the device.
</p>
<p>
It is possible to specify more than one vendor CA. The vendor CA names should, in this case, be separated by ';'.
</p>
</subsubsection>
</subsection>
<subsection name="Custom handling of certificate request">
<p>
It is possible to add a custom plug-in class to handle a certificate request.
The class implementing this plug-in must implement the org.ejbca.core.protocol.ExtendedUserDataHandler interface.
</p><p>
The idea is that the implementation uses information from the certificate profile or name and the request itself to manipulate the request before it is 
processed the normal way. This is done when 'processRequestMessage' (see source code of the interface) is called. The used certificate profile name is 
passed as 'otherData'.
</p><p>
In the Admin GUI under "CMP Configuration", set "Certificate Request Handler Class" to the name of the plug-in class to enable it. You may then add 
additional properties that you can use in your implementation.
</p><p>
In EJBCA there is already an implementation included. This implementation writes to the unid-fnr DB (see separate <a href="unid.html">unid document</a>). 
To activate this plug-in just set the following configurations:
</p>
<source>
Certificate Request Handler Class : org.ejbca.core.protocol.unid.UnidFnrHandler
Unid Data Source : java:/UnidDS
</source>
</subsection>
<subsection name="CMP Proxy (EJBCA Enterprise only)">
<p>
In some installations it may be desirable to terminate the client connection in a DMZ before connecting further to the CA. In this case the client never has a direct 
network connection to the CA machine. In such a scenario you can use the CMP proxy module. Clients use the CMP proxy, as it would otherwise use EJBCA. 
The proxy in turn connects to EJBCA gets the answer and forwards it back to the client.
</p><p> 
The proxy is a stand alone module that runs on another mahing than the CA itself.
</p><p>
See EJBCA_HOME/modules/cmpProxy/resources/README for information how to build and use the proxy.
</p>
</subsection>

<subsection name="CMP Response Message">
<p>
When a CMP request is successfull, EJBCA returns a protected CMP response message. The protection type of the response message can also be configered in the 
Adminb GUI under "CMP Configuration".
EJBCA supports two types of response message protection: 'pbe' and 'signature'.
</p>
<p>If a CMP request fails, EJBCA returns an unprotected, unencrypted CMP error message.</p>
<subsubsection name="pbe">
<p>
This type of protection of the response message can be used only when the request was authenticaed using HMAC authentication module. The parameters used for 
the 'pbe' protection are based on the parameters used in the recieved HMAC authentication.
</p>
</subsubsection>
<subsubsection name="signature">
<p>
The CA used to handle the CMP request signs the CMP response message using the same protection algorithm specified in the CMP request. If a conflict occures 
between the protection algorithm in the request and the CA's signature algorithm, the CA's key algorithm will be used in combination with a digest algorithm 
based on the protection algorithm in the CMP request. If a conflict occures even on the digest algorithm level, a default digest algorithm will be used.
For example, if the CMP request uses the protection algorithm ECDSA with SHA1 and the CA's signature algorithm is RSA with SHA256, the CMP response will be 
signed using RSA with SHA1.
</p>
<p>
The 'signature' type of response protection can be used regardless of what authentication module was used to authenticate the CMP request.
</p>
</subsubsection>
</subsection>

</section>

<section name="OCSP">
<p>
Note! Some OCSP clients do not handle external OCSP responders very well unfortunately. You should be aware of this.
</p>
<p>
OCSP is used by PKI-clients to verify the validity of certificates in real-time. 
This is done by sending a request for the status of a specific certificate to an OCSP responder. 
The responder may or may not be the same as the CA. The OCSP responder sends a signed reply, 
containing the requested status information back to the client. 
The client uses this status information to determine whether the certificate is valid for use or revoked.
</p><p>
The OCSP servlet receives OCSP request by http(s) and send back a status response signed by the CA.
</p><p>
The OCSP service receives requests on http://localhost:8080/ejbca/publicweb/status/ocsp. The 
servlet can process requests for certificates signed by a CA running in EJBCA, as long as the CAs OCSP 
service has not been deactivated. 
</p><p>
For a CA to be valid as an OCSP-responder it must have the KeyUsage 'Digital Signature' in the certificate profile used to create the CA.
This KeyUsage must be included if the CA is to sign OCSP-responses.
The default certificate profiles for CAs includes the key usage 'Digital Signature'.
</p>
<p>
Example to generate an OCSP request using OpenSSL (works with both internal and external OCSP responders):
</p>
<source>
openssl ocsp -issuer Test-CA.pem -CAfile Test-CA.pem -cert Test.pem -req_text -url http://localhost:8080/ejbca/publicweb/status/ocsp
</source>
<p>
If Firefox is to request and accept OCSP-responses from a CA it must be configured:
<ol>
<li>'Use OCSP to validate all certificates using this URL and signer' in 'Privacy &amp; Security->Validation'.
Choose the CA from EJBCA (which you should have made Trusted by right clicking in 
'Privacy &amp; Security->Certificates->Manage Certificates->Authorities' and checking the appropriate checkboxes).
</li>
<li>If using a Certificate Profile that includes a OCSP Service URL for client certificates, the Validation option in Firefox 
'Use OCSP to validate only certificates that specify an OCSP service URL' also works fine. When this option is checked you may need to restart Mozilla.
</li>
</ol>
</p><p>
When the validation settings are set, Firefox will query the OCSP server when for example double-clicking on a certificate in the 
certificate manager.
An appropriate URL for validation is: http://<i>hostname</i>:8080/ejbca/publicweb/status/ocsp
</p><p>
If using a dedicated OCSP responder certificate, this certificate must probably not be imported in Firefox as a Trusted CA certificate.
But if you want to, you can do this through 'View Certificates' in EJBCA 
(http://<i>hostname</i>:8080/ejbca/retrieve/ca_certs.jsp).
</p><p>
In doc/samples it is a sample how to check revocation with OCSP using the new APIs in JDK 1.5.
</p>

<subsection name="Stand-alone OCSP responder">
<p>
You can set up separated OCSP responders in EJBCA. Using this you can isolate the CA from the Internet and still be
able to answer OCSP request. You can set up firewalls so that only outgoing traffic is allowed from the CA, and
nothing to the CA.
</p><p>
Separated OCSP responders is also good when you don't require high-performance clustering for the CA, but you do need
high-performance for the OCSP responders. This is a common setup, if the CA only issues certificates once every year
for one million users, this does not put much pressure on the CA, but the OCSP responders can be put under high load continuously.
</p>
<p>
See the <a href="installation-ocsp.html">OCSP Installation document</a> for information how to set up stand-alone, separated OCSP responders.
</p>
</subsection>

<subsection name="OCSP User Guide">
    <p>More information about certain features, such as OCSP extensions, can be found in the <a href="userguide-ocsp.html">OCSP User Guide</a>.
    </p>
</subsection>

<subsection name="Simple OCSP client">
<p>
To try out and test your OCSP installation you can use the EJBCA client toolbox, (see below). You can also use the API directly from your 
java program.
</p>
</subsection>

<subsection name="Adobe Reader">
<p>
A good example of using OCSP is to check digitally signed PDF documents using Adobe Reader.
</p>
<p>
To be able to verify certificates in Adobe Reader, you must first add the CA certificate as trusted in Adobe Reader. 
You can do that in the menu Document->Trusted Identities. Choose Certificates in the drop-down list and click 'Add contacts',
now you can browse to the CA-certificate that you have downloaded in DER format (for example by choosing download to IE on the public EJBCA pages).
The CA certificate must have been saved with a name ending with '.cer'.
After adding the new contact, you have to click 'Edit trust' and check at least 'Signatures and as trusted root' and 'Certified documents'.
This works the same using both internal and external OCSP responders.
</p>
<p>
Certificates that have an 'OCSP service locator' will be verified against the OCSP responder. 
You can configure this in the certificate profile used to issue certificates.
</p>
<p>
If you sign PDF documents with embedded OCSP responses those responses must include a nextUpdate field, and the timestamp must be within the thisUpdate and nextUpdate 
period of the OCSP response. 
</p>
</subsection>

</section>
<section name="EJBCA Web Service Interface">
<p>
EJBCA 3.4 introduced the JAX-WS 2.0 Web Service Interface used to access the basic functions remotely over client
authenticated HTTPS. The functionality currently available through the Web Service Interface are documented in the
<a href="ws/index.html" target="_blank">EJBCA Web Service API Reference</a>.
</p><p>
There is also a CLI that can be used for scripting WS calls remotely. See following section for more information.
Note: All web service calls are not available through the CLI.
</p><p>
If you are running on JBoss 5.x, make sure that you configured JBoss WS correctly as described in the <a href="installation.html#Configure">installation</a> document.
</p>

<subsection name="Web Services authentication">
<p>
The Web Services interface requries client certificate authentication from administrators, in the same way as the admin GUI does.
If you have a client certificate that works on the admin GUI you should also be able to use it for the web service interface. 
</p>
</subsection>

<subsection name="Configuring Web Services behavior">
<p>
The sample property file conf/jaxws.properties.sample contains more information on how to configure the behaviour of
the EJBCA WS. Copy this to conf/jaxws.properties, edit and redeploy.
</p><p>
    If the end entity profile informations must be used to define default values when you create a user, the flag "Allow 
    merge DN Webservices" must be checked in the end entity profile.
</p>
<p>
    If multiple instances of a component exist, the merge is done from end to begining, and the remaining values of this component type will be placed at the end. 
    For example, if you want to merge:
</p>
    <source>dn=cn=foo,..., dc=dc1, ..., dc=dc2, ...</source>
    <p>with</p>
    <source>dn=..., dc=mdc1, ..., dc=mdc2, ..., dc=mdc3, ...</source>
    <p>the result will be:</p>
    <source>dn=cn=foo, ..., dc=mdc1, ..., dc=mdc2, ..., dc=mdc3, ...</source>

</subsection>

<subsection name="Configuring Web Services CLI">
<p>
Edit dist/ejbca-ws-cli/ejbcawsracli.properties before running the EJBCA WS CLI. This files contains descriptions of
what can be configured. Please note that this directory is recreated each time you build EJBCA, so copy it to a
separate location if you intend to rebuild or redeploy EJBCA and keep the configuration.
</p><p>
Configuration for the Web Services CLI requires a P12 or JKS keystore. You can easily try the WS CLI using the
superadmin.p12 keystore generated during the installation or generate a new JKS using the Admin GUI.
Below is a short description how to create a JKS for a user on the command line, and adding the new user to the superadministrator role.
</p>
<source>
bin/ejbca.sh ra addendentity &lt;1> &lt;2> "C=..,O=..,CN=&lt;1>" AdminCA 1 JKS
bin/ejbca.sh ra setclearpwd &lt;1> &lt;2>
bin/ejbca.sh batch &lt;1>
bin/ejbca.sh roles addadmin "Temporary Super Administrator Group" AdminCA WITHCOMMONNAME EQUALCASEINS &lt;1>
</source>
</subsection>

<subsection name="Using the Web Services CLI">
<p>
Included in the <a href="userguide.html#EJBCA client toolbox">EJBCA Client Tool Box</a> is a Web Service CLI tool. 
</p><p>
To use the client do the following, copy the directory with all included files to
the computer you want to remote administrate from. Then create a JKS or P12 file with
the appropriate access rights (See the Using API section for details) and 
finally configure the file ejbcawsracli.properties. In this file you should specify
the hostname of the CA server, the name of the keystore and the password to unlock it. 
Documentation for each setting is in the file ejbcacsracli.properties.
</p><p>
Use 'ejbcaClientToolBox.sh EjbcaWsRaCli' for a list of each subcommand and 'ejbcaClientToolBox.sh EjbcaWsRaCli "subcommand"'
for detailed help how to use the cli.
</p><p>
Example usage:
ejbcaClientToolBox.sh EjbcaWsRaCli pkcs12req testuser2 foo123 2048 NONE tmp
</p><p>
ejbcaClientToolBox.sh EjbcaWsRaCli revokeendentity testuser2 SUPERSEDED false
</p>
</subsection>

<subsection name="Using the Web Service API for Integration">
<p>
You can use the Web Service interface to integrate EJBCA from other applications.
</p><p>
If you are using another language than Java you should start by downloading the WSDL
file at http://hostname:8080/ejbca/ejbcaws/ejbcaws?wsdl
</p><p>
When using java you can find the required libs in 'dist/ejbcawscli' and it's 'lib' 
subdirectory. 
</p><p>
Some programming examples:
</p><p>
To initialize the web service:
</p>
<source>
  CryptoProviderTools.installBCProvider();	
  String urlstr = "https://localhost:8443/ejbca/ejbcaws/ejbcaws?wsdl";
	
  System.setProperty("javax.net.ssl.trustStore","p12/wstest.jks");
  System.setProperty("javax.net.ssl.trustStorePassword","foo123");  
	
  System.setProperty("javax.net.ssl.keyStore","p12/wstest.jks");
  System.setProperty("javax.net.ssl.keyStorePassword","foo123");      
                             
  QName qname = new QName("http://ws.protocol.core.ejbca.org/", "EjbcaWSService");
  EjbcaWSService service = new EjbcaWSService(new URL(urlstr),qname);
  ejbcaraws = service.getEjbcaWSPort();  
</source>
<p>
Example call to find all users having 'Vendil' in their subject dn:
</p>
<source>
  UserMatch usermatch = new UserMatch();
  usermatch.setMatchwith(UserMatch.MATCH_WITH_DN);
  usermatch.setMatchtype(UserMatch.MATCH_TYPE_CONTAINS);
  usermatch.setMatchvalue("Vendil");
  List&lt;UserDataVOWS&gt; result = ejbcaraws.findUser(usermatch);
</source>
<p>
Example generating a certificate from a PKCS10 request:
</p>
<source>
  UserDataVOWS user1 = new UserDataVOWS();
  user1.setUsername("WSTESTUSER1");
  user1.setSubjectDN("CN=WSTESTUSER1");
  user1.setCaName("ManagementCA");
  user1.setEmail(null);
  user1.setSubjectAltName(null);
  user1.setEndEntityProfileName("EMPTY");
  user1.setCertificateProfileName("ENDUSER");
			
  KeyPair keys = KeyTools.genKeys("1024", AlgorithmConstants.KEYALGORITHM_RSA);
  PKCS10CertificationRequest  pkcs10 = new PKCS10CertificationRequest("SHA256WithRSA",
  CertTools.stringToBcX500Name("CN=NOUSED"), keys.getPublic(), null, keys.getPrivate());

  CertificateResponse certenv =  ejbcaraws.certificateRequest(user1,
                                                              CertificateHelper.CERT_REQ_TYPE_PKCS10,
                                                              new String(Base64.encode(pkcs10.getEncoded())),
                                                              null,
                                                              CertificateHelper.RESPONSETYPE_CERTIFICATE);
		
  X509Certificate cert = certenv.getCertificate(); 		
</source>
<p>
Example checking the revocation status of a certificate:
</p>
<source>
  RevokeStatus revokestatus = ejbcaraws.checkRevokationStatus(cert.getIssuerDN.toString,cert.getSerialNumber().toString(16));
  if(revokestatus != null){
    if(revokestatus.getReason() != RevokeStatus.NOT_REVOKED)){
      // Certificate is revoked
    }else{
	  // Certificate isn't revoked
    }
  }else{
	// Certificate doesn't exist
  }	  
</source>
</subsection>

<subsection name="Sample code">
<p>
See the file modules/ejbca-ws/src/org/ejbca/core/protocol/ws/common/IEjbcaWS
for more detailed instructions of the API. 

Sample code can be taken from:
<ul>
<li>The JUnit tests for the WS-API: modules/systemtests/src/org/ejbca/core/protocol/ws/EjbcaWSTest.java</li>
<li>The WS-API CLI: modules/ejbca-ws-cli/src/org/ejbca/core/protocol/ws/client/*.java</li>
<li>A fully working RA Admin sample program written in Java and using the web services API; this may be downloaded from <a href="http://sourceforge.net/projects/ejbca/files/WebServiceRA">the WebServiceRA project on SourceForge</a>.  
For more information, see the <a href="howto.html#Creating and Running a custom RA Administrator application using EJBCA Web Services and Java">Web Services section of the howto file</a>.
A short movie demonstrating the program may be downloaded from 
<a href="http://sourceforge.net/projects/ejbca/files/WebServiceRA/WebServiceRA_Demo.m4v">SourceForge</a>
or
<a href="http://www.youtube.com/watch?v=QRpPMze7BBE">YouTube</a>.
</li>
</ul>
</p>
</subsection>

<subsection name="Accessrules required when using the Web Service API">
<p>
All the calls requires HTTPS client authentication. The keystore used
must be set up as a regular administrator and access rules according to the following:
</p><p>
Common for all calls (except isAuthorized, existsHardToken, isApproved that only needs a valid trusted certificate):
</p>
<ul>
<li>/administrator</li>
<li>/ca/'related CA'</li>
</ul>
<p>
editUser:
</p>
<ul>
<li>/ra_functionality/create_end_entity and/or edit_end_entity</li>
<li>/ra_functionality/'end entity profile of user'/create_end_entity and/or edit_end_entity</li>
</ul>
<p>
findUser, findCert:
</p>
<ul>
<li>/ra_functionality/view_end_entity</li>
<li>/ra_functionality/'end entity profile of the user'/view_end_entity</li>
</ul>
<p>
pkcs10Request, pkcs12req:
</p>
<ul>
<li>/ra_functionality/view_end_entity</li>
<li>/ra_functionality/'end entity profile of the user'/view_end_entity</li>
<li>/ca_functionality/create_certificate</li>
</ul>
<p>
certificateRequest, softTokenRequest:
</p>
<ul>
<li>/ra_functionality/create_end_entity and/or edit_end_entity</li>
<li>/ra_functionality/'end entity profile of user'/create_end_entity and/or edit_end_entity</li>
<li>/ca_functionality/create_certificate</li>
</ul>
<p>
revokeCert, revokeToken: These calls support approvals.
</p>
<ul>
<li>/ra_functionality/revoke_end_entity</li>
<li>/ra_functionality/'end entity profile of the user owning the cert'/revoke_end_entity</li>
</ul>
<p>
revokeUser: This call support approvals.
</p>
<ul>
<li>/ra_functionality/revoke_end_entity</li>
<li>/ra_functionality/'end entity profile of the user'/revoke_end_entity</li>
<li>/ra_functionality/delete_end_entity  (only if users should be deleted)</li>
<li>/ra_functionality/'end entity profile of the user'/delete_end_entity  (only if users should be deleted)</li>
</ul>
<p>
fetchUserData:
It is possible to turn of authorization of this call in the jaxws.properties
</p>
<ul>
<li>/userdatasourcesrules/'user data source'/fetch_userdata</li>
</ul>
<p>
genTokenCertificate:
Important this call also supports approvals, and the default behaviour is when
someone without the '/administrator' access is creating a call then will a GenerateTokenApprovalRequest
be created. This behaviour can be turned off in the jaxws.properties file.
</p>
<ul>
<li>/ra_functionality/create_end_entity and/or edit_end_entity</li>
<li>/endentityprofilesrules/'end entity profile of user'/create_end_entity and/or edit_end_entity</li>
<li>/ra_functionality/revoke_end_entity (if overwrite flag is set)</li>
<li>/endentityprofilesrules/'end entity profile of user'/revoke_end_entity (if overwrite flag is set)</li>
<li>/ca_functionality/create_certificate</li>
<li>/ca/'ca of all requested certificates'</li>
<li>hardtoken_functionality/issue_hardtokens</li>
</ul>
<p>
getHardTokenData:
Important this call also supports approvals, and the default behaviour is when
someone without the '/administrator' access is creating a call then will a ViewHardTokenApprovalRequest
be created. This behaviour can be turned off in the jaxws.properties file.
</p>
<ul>
<li>/ra_functionality/view_hardtoken</li>
<li>/endentityprofilesrules/'end entity profile of user'/view_hardtoken</li>
<li>/endentityprofilesrules/'end entity profile of user'/view_hardtoken/puk_data (if viewPUKData = true)</li>
</ul>
<p>
getHardTokenDatas:
</p>
<ul>
<li>/ra_functionality/view_hardtoken</li>
<li>/endentityprofilesrules/'end entity profile of user'/view_hardtoken</li>
<li>/endentityprofilesrules/'end entity profile of user'/view_hardtoken/puk_data (if viewPUKData = true)</li>
</ul>
<p>
republishCertificate:
</p>
<ul>
<li>/ra_functionality/view_end_entity</li>
<li>/endentityprofilesrules/'end entity profile of the user'/view_end_entity</li>
<li>/endentityprofilesrules/'end entity profile of user'/view_hardtoken/puk_data (if viewPUKData = true)</li>
</ul>
<p>
customLog:
No CA access rule is required.
</p>
<ul>
<li>/secureaudit/log_custom_events (must be configured in advanced mode when editing access rules)</li>
</ul>
<p>
deleteUserDataFromSource:
</p>
<ul>
<li>/userdatasourcesrules/'user data source'/remove_userdata (for all the given user data sources)</li>
</ul>
<p>
getCertificate:
no requirement of the '/administrator' flag
</p>
<ul>
<li>/ca_functionality/view_certificate</li>
</ul>
<p>
caCertResponse, caRenewCertRequest:
</p>
<ul>
<li>/ca_functionality/renew_ca</li>
</ul>
</subsection>
<subsection name="Error codes on web services">
    <p>
        Business error code have been added in order to discriminate exception of type <code>EjbcaException</code>.
    </p>
    <p>
        The following code sample shows how to use error codes :
    </p>
    <source>
try {
    ejbcaraws.editUser(user1);
} catch(EjbcaException_Exception e) {
    if(org.cesecore.ErrorCode.CERT_PROFILE_NOT_EXISTS.getInternalErrorCode().equals(e.getFaultInfo().getErrorCode().getInternalErrorCode())) {
        log.error("No such certifcate profile.");
    }
}
    </source>
    <p>All error codes are described in <code>org.cesecore.ErrorCode</code>.</p>
    <p> You can also take a look at <code>src/test/org/ejbca/core/protocol/ws/CommonEjbcaWSTest.java</code> to see how the error code can be used.</p>
</subsection>
<subsection name="WS transaction logging">
<p>
The logging is done the same way as the logging for the OCSP responder is done.
See <a href="installation-ocsp.html#Audit and Account Logging">OCSP Audit and Account Logging</a>.
But different tags are used:
</p>
<ul>
<li>LOG_TIME : The time the call took place</li>
<li>SESSION_ID : A random 32 Byte long String generated when the OCSP-responder is started.</li>
<li>LOG_ID : An integer identifying that starts from 1 and is increased for every received request.</li>
<li>REPLY_TIME : The time it took to return from the WS method.</li>
<li>METHOD : Name of the called WS method.</li>
<li>ERROR_MESSAGE : An error message with information of the error. If the call returned successfully then 'NO_ERROR'.</li>
<li>ADMIN_DN : Subject DN for the client certificate in the call.</li>
<li>ADMIN_ISSUER_DN : Issuer DN of the client certificate in the call</li>
</ul>
<p>
The configuration is done in conf/jaxws.properties.
</p><p>
In jboss-log4j.xml 'org.ejbca.core.protocol.ws.logger.TransactionLogger' should be used as category name for the appender.
</p>
</subsection>
</section>

<section name="Certificate Transparency (Enterprise only)">
<subsection name="Introduction">
<p>EJBCA Enterprise Edition implements Certificate Transparency (CT) as specified in <a href="http://tools.ietf.org/html/rfc6962">RFC 6962</a>.
The purpose of CT is to create public audit logs of all certificates issued by the public SSL/TLS CAs. The presence of audit records is planned to be required for EV certificates in Google Chrome from February 2015 (and other web browsers and non-EV certificates later on as well). Note that CT is only relevant for CAs issuing <em>public SSL/TLS</em> certificates; other types of CAs should not use CT. More information can be found on the <a href="http://www.certificate-transparency.org/">CT website</a>.</p>

<p>From a CA's point of view, CT works by publishing certificates from the CA to the log servers and retrieving Signed Certificate Timestamps (SCTs) in response (this is a single operation, so requesting an SCT for a certificate publishes it also). The resulting SCTs can then be sent to end-users in a TLS handshake three ways: in a certificate extension, in a stapled OCSP response extension and/or in a TLS extension. 
EJBCA supports all of those, including combinations. The following sections describe how to configure EJBCA in one or more of these modes.</p>
</subsection>

<subsection name="Prerequisites">
<p>Your EJBCA installation needs the <code><strong>ct</strong></code> module, which is only present in the enterprise edition (contact <a href="mailto:sales@primekey.se">PrimeKey</a> for details). Depending on the CT modes you need, there are some extra preparations.</p>

<subsubsection name="CT in certificates">
<p>No extra preparations are needed. Just configure the logs and enable CT in the certificate profiles as described in the following sections "Adding CT logs" and "Activating CT".</p>
</subsubsection>
<subsubsection name="CT in OCSP responses">
<p>EJBCA supports CT in OCSP responses, both in live OCSP responders and for pre-production of responses. By default, EJBCA will cache up to approximately <nobr>100 000</nobr> CT response extensions in memory. Excess cached response extensions that haven't been requested for 10 seconds are randomly evicted from the cache. These parameters may be adjusted in <code>conf/cesecore.properties</code>. In order to use CT OCSP you must also enable the corresponding extension class in <code>conf/ocsp.properties</code>:</p>

<source>
ocsp.extensionoid=*1.3.6.1.4.1.11129.2.4.5
ocsp.extensionclass=org.ejbca.core.protocol.ocsp.extension.certificatetransparency.OcspCtSctListExtension
</source>

<p>After enabling the extension, please redeploy EJBCA. Then proceed with configuring CT logs and certificate profiles. See the following sections "Adding CT logs" and "Activating CT".</p>
</subsubsection>
<subsubsection name="CT in a TLS extension">
<p>In this mode, the certificate holder requests SCTs himself from the logs and includes them in a TLS extension.
The CA is not required to do anything, but it is possible to reduce the time it takes until full (merged) audit log
records are available by publishing certificates to the logs as soon as they are issued. See the following section for configuration details.</p>
</subsubsection>
<subsubsection name="Publishing to logs without using the SCTs">
<p>EJBCA can asynchronously publish certificates to one or more CT logs, using a Custom Publisher. This feature is intended to be used mainly when using CT in TLS mode or OCSP mode.
To enable this feature, go to CA Functions, Publishers and add a new publisher with the following configuration:</p>

<ul>
<li>Publisher Type - Custom Publisher</li>
<li>Class Path - org.ejbca.code.model.ca.publisher.CTCustomPublisher</li>
<li>Properties - Leave blank</li>
<li>No direct publishing, only use queue - Yes</li>
<li>Keep successfully published items in database - No</li>
<li>Use queue for CRLs - No</li>
<li>Use queue for certificates - Yes</li>
</ul>

<p>Click Save. <em>The publisher has to be enabled in the certificate profiles before publishing becomes active</em>. You should also create a service for the publisher, under System Functions, Services:</p>

<ul>
<li>Worker - Publisher Queue Process Worker</li>
<li>Publishers to check - The publisher created before</li>
<li>Period - The default of 5 minutes is fine, but can be up to several hours.</li>
<li>Active - Yes</li>
</ul>
</subsubsection>

</subsection>
<subsection name="Adding CT logs">
<p>CT log servers are configured under System Configuration. They do not become active until they are enabled per certificate profile.
The following parameters have to be configured in a log:</p>

<ul>
<li>Log URL : The log URL, e.g. <code>http://something/ctlog/v1/</code>, for example <code>https://ct.googleapis.com/testtube/ct/v1/</code>.</li>
<li>Public Key : The log's public key, in PEM or DER format. Usually this is an Elliptic Curve key.</li>
<li>Timeout : Connection timeout in milliseconds. Five seconds is the default. Note that certificate
issuing and/or OCSP response generation must wait for the log server to respond, so do not set it too high.</li>
</ul>

<p>The log server needs to accept certificates issued by your CAs. For local testing you can install your own instance of the sample log server from the <a href="https://code.google.com/p/certificate-transparency/">CT open source project</a>, and add your root CA to the list of trusted CAs. For a production system (or testing of one) you must contact the log operator to have your root CA added.</p>

<p>For best performance and redundancy, please use multiple logs with short timeouts.
You can have more logs than you require in the certificate profiles. In this case, EJBCA will
connect to as few logs as possible to satisfy the certificate profile requirements.
Logs are connected to in the order they appear in the list, so fast logs (e.g. geographically close) should be added before slow logs.
</p>
</subsection>
<subsection name="EJBCA audit logging">
<p>The submission of pre-certificates is logged to the EJBCA audit log. When a pre-certificate
has been submitted to the required number of CT log servers, then a SUCCESS is audit logged.
Otherwise a FAILURE is logged. If the <em>generation</em> of the pre-certificate fails, then no CT log submission is performed and nothing is logged.</p>
</subsection>
<subsection name="Activating CT">
<p>CT logs must be activated in your certificate profiles. See the <a href="userguide.html#Certificate%20Transparency%20(Enterprise%20only)">user guide</a>.</p>
</subsection>
<subsection name="Redacting DNS labels in SubjectAlternativeName">
<p>
In the SubjectAlternativeName extension, if part of the DNS should be a secret, that part can be redacted and replaced by the String "(PRIVATE)" in the 
precertificate that will be published to the Certificate Transparency Log. See the <a href="userguide.html#Certificate%20Transparency%20(Enterprise%20only)">user guide</a>.
</p>
</subsection>
<subsection name="Using an outgoing proxy server to send to CT logs">
<p>
For security reasons using an outgoing proxy server from the CA to the CT logs is a common request. The CT log function will make use of Java/JBoss proxy configurations.
There are two ways to configure the proxy properties in JBoss:
</p>
<ul>
<li>In standalone.sh append to JAVA_OPTS:</li>
</ul>
<source>
-Dhttp.proxyHost=HostName/IPaddress
-Dhttp.proxyPort=PortNumber
-Dhttps.proxyHost=HostName/IPaddress
-Dhttps.proxyPort=PortNumber
</source>
<ul>
<li>In standalone.xml append to system-properties:</li>
</ul>
<source>
&lt;property name="http.proxyHost" value="HostName/IPaddress"/>
&lt;property name="http.proxyPort" value="PortNumber"/>
&lt;property name="https.proxyHost" value="HostName/IPaddress"/>
&lt;property name="https.proxyPort" value="PortNumber"/>
</source>
<p>
Both ways works, but don't forget to reconfigure the proxy settings if you upgrade/change the JBoss instance.</p>
</subsection>
</section>


<section name="XKMS Service">
<subsection name="Introduction">
<note>It is a rather old, generally unused protocol with poor interoperability and client suppport. There are many better options, like CMP, available.</note>
<p>
From EJBCA 6.0 the XKMS protocol is usable on selected platforms, see more in the installation guide.
<ul>
<li>JBoss 5.1.0.GA and JBoss EAP 5.1 on Java 6.</li>
<li>JBoss EAP 6.1 on Java 7.</li>
</ul>
</p><p>
It's disabled in the standard installation (from EJBCA 3.10) and have the Web Service URL http://"hostname":8080/ejbca/xkms/xkms
</p>
<note>The XKMS client that comes with EJBCA 4+ does not work properly with signed responses.</note>
</subsection>
<subsection name="How to configure the XKMS Service">
<p>
The XKMS service is configured in the file conf/xkms.properties, just edit the file before building the application.
</p><p>
The following settings exists:
</p>
<ul>
<li>xkms.enabled: Enables the XKMS Service (default: false)</li>
<li>xkms.request.requiresignature: id signed XKMS request should be required  (default: false)</li>
<li>xkms.request.acceptedcas: List of CA names that are accepted for XKMS signed requests. Use ';' as a separate for multiple. (default 'ManagementCA')</li>
<li>xkms.response.acceptsignrequest: Accept signed responses on request (default: true)</li>
<li>xkms.response.alwayssign: Always sign responses (default: false)</li>
<li>xkms.response.causedforsigning: Specify which CA that should be used with the signed responses. Only one can be specified. (default 'ManagementCA')</li>
<li>xkms.keyusage.signatureisnonrep: Setting specifying the keyusage in a X509 certificate that is mapped to XKMS KeyUsage Signature, Default is non-repudiation but if set to false will XKMS KeyUsage Signature be mapped against digital signature X509 key usage.</li>
<li>xkms.serviceport=This is a development setting that is set in the WSDL to instruct the client use a non default port. This is only needed if a WS tap listener is used to review the messages. (default: 8080)</li>
<li>xkms.krss.poprequired=Defines if proof of possession of the private key is required (default: true)</li>
<li>xkms.krss.servergenkeylength=Defines the key length of server generated keys (default: 1024)</li>
<li>xkms.krss.allowrevokation=Defines it should be possible for users to revoke their certificate with a revocation code (default: true)</li>
<li>xkms.krss.allowautomaticreissue=Setting to allow the user to renew automatically as long as the current key isn't revoked  (default: false)</li>
</ul>
<p>
Important, if signing of responses is needed, must the XKMS CA service for the configured CA be activated in the
'Edit CA' page. The XKMS Signer have it's own certificate for each CA that is created during the installation or upgrade of a CA.
</p>
</subsection>
<subsection name="Implementation Specific Notes">
<subsubsection name="What is implemented">
<p>
Currently are the methods locate, validate, register, reissue, revoke and recover implemented. The Compond request isn't implemented.
</p><p>
The XKMS Service only supports synchronized calls, not asynchronized or two-phase requests.
</p><p>
The TimeInstant attribute of QueryKeyBinding is not supported
</p>
<p>
In the NotBoundAuthentication isn't the 'Protocol' attribute used.
</p>
<p>
The register listener expects a UseKeyWith=urn:ietf:rfc:2459 (PKIX) with the subjectDN as identifier and is mapped to the user.
The password of the user Must be marked as cleartext in order for KRSS to work. In KeyInfo is one RSAKeyInfo required if
the user have the type 'USERGENERATED'. All other UseKeyWith or KeyUsage is ignored.
since it is the register userdata that is used when issuing the certificate. If the user have the type "P12" in it's userdata
then will a server generated key be inserted in a PrivateKey in the response. It is the same password to encrypt the key as 
for the enrollment. RespondWith RSAPublicKey, X509Certificate, X509CertificateChain and PrivateKey is supported.
</p>
<p>
The reissue listener expects one X509Certificate KeyInfo in the request and the subjectDN and public is extracted
and used for the new certificate. Revoked certificates cannot be renewed. The generated key will be inserted in a PrivateKey in the response. It is the same password to encrypt the key as 
for the enrollment. RespondWith RSAPublicKey, X509Certificate and X509CertificateChain.
</p>
<p>
The recover listener expects one X509Certificate KeyInfo in the request and is used to select the user in
the database. Before a key can be recovered the key have to be marked for recovery and a password set for the user in 
the usual way. RespondWith RSAPublicKey, X509Certificate, X509CertificateChain and PrivateKey is supported.
</p>
<p>
The revoke listener expects one X509Certificate KeyInfo in the request and is used to select the certificate
that should be revoked. A revokation code is required, authentication tag is not supported.
RespondWith RSAPublicKey, X509Certificate and X509CertificateChain is supported.
</p>
</subsubsection>
<subsubsection name="XKMS Mappings">
<p>
The RespondWith tag supports X509Certificate, X509CertificateChain, X509CRL, KeyName, KeyValue (and PrivateKey for register and recover).
</p><p>
<i>The QueryKeyBinding</i> 
The query of a QueryKeyBinding is performed in the following way:
If KeyInfo is included, the certificate is extracted and the is used for checking the key usage and validity of the certificate
If UseKeyWith is included (and no KeyInfo) is the user database queried using the UseKeyWith mappings (if several UseKeyWith are the queried with an 'AND' operator. Then are all certificates that fulfills all the KeyUsage mappings returned.
</p><p>
In KeyInfo is only X509Certificate and X509CertificateChain supported 
</p><p>
KeyUsage Mappings, 
The key usage constants is mapped against the following X509 key usages 
<ul>
<li>SIGNATURE : either non-repudiation or digital signature depending on configuration</li>
<li>ENCRYPTION: data encipherment</li>
<li>EXHANGE: digital signature and key encipherment</li>
</ul>
</p><p>
UseKeyWith Mappings,
All queries find their data using beginwith (except PKIX) of the identifier.
<ul>
<li>XKMS: Subject Altname, UNIFORMRESOURCEIDENTIFIER</li>
<li>XKMS/profile: Subject Altname, UNIFORMRESOURCEIDENTIFIER</li>
<li>S/MIME: Subject Altname, RFC822 addr-spec</li>
<li>PGP: Subject Altname, RFC822 addr-spec</li>
<li>TLS: Subject Altname, UNIFORMRESOURCEIDENTIFIER</li>
<li>TLS/HTTPS: SubjectDN, Common Name</li>
<li>TLS/SMTP:Subject Altname, DNS Name</li>
<li>IPSEC:Subject Altname, IP Address</li>
<li>PKIX: Entire SubjectDN</li>
</ul>
</p>
</subsubsection>
</subsection>

<subsection name="Using the XKMS client">
<p>
When building EJBCA with XKMS enabled, a XKMS CLI tool is also generated. The tool is placed
in the directory dist/ejbca-xkms-cli and consists of the all the necessary files needed to run the cli.
</p><p>
To use the client do the following, copy the directory with all included files to
the computer you want to remote administrate from. (Optionally create a JKS keystore from
one XKMS Service trusted CAs) and configure the file xkmscli.properties. In this file you should specify the hostname of the CA server, the name of the JKS keystore, the alias and the password to unlock it.
</p><p>
Use 'xkmscli.sh/cmd' for a list of each subcommand and 'xkms.sh/cmd "subcommand"'
for detailed help how to use the cli.
</p>
</subsection>
<subsection name="Running the XKMS test script">
<p>
To automatic test the XKMS Service do the following:
</p><p>
1. Start with a fresh installation with all the default values. Then activate the XKMS CA service in the Edit CA page for ManagementCA.
</p><p>
2. Run 'ant test:xkms' and a link to the report will be shown.
</p>
</subsection>
</section>

<section name="External RA API (Enterprise Edition Only)">
<p>
Information on how to use the External RA API is available <a href="externalra.html">here</a>.
</p>
</section>

<section name="Key Recovery">
<p>
Key Recovery can be used to re-use or restore a users private key.
Key recovery means that <i>server generated</i> keys (and the certificate) of a user is stored, encrypted, in the CAs database.
The purpose of this is to be able to recover an encryption key if the user looses the key. Without possibility of key recovery
encrypted data will be lost forever if the encryption key is lost.
<br/>
Key recovery should only be used for encryption keys and not authentication or signature keys, where this need for recovery does not exist.  
</p>
<p>
To enable key recovery, use the Admin GUI:
</p>
<ol>
<li>Set 'Enable Key Recovery' in 'System Configuration'.</li>
<li>Create a new End Entity Profile and check 'use' for 'Key Recoverable'.</li>
<li>Add users with this End Entity Profile. Use a keystore type other than 'User Generated', for example P12, and check 'Key Recoverable'.</li>
<li>Enroll the user with 'Create keystore' in Public Web. A private and public key pair is now generated by the CA, encrypted and stored in CA database (KeyRecoveryData table).</li>
</ol>
<p>
Key recovery can <strong>not</strong> be used with 'user generated' keys. this is because the CA does not have access to the 
private key in this case, and can thus not store it.
</p><p>
The following is an example of a sequence of commands that can be used to generate a new certificate for a user using the
same key pair, if the key and certificate was generated key recoverable as descibed above:
</p>
<p>
# Mark the generated certificate for keyrecovery,
</p>
<source>
bin/ejbca.sh ra keyrecovernewest &lt;username&gt;
</source>
<p>
# then set clear text password for Batch session to use
</p>
<source>
bin/ejbca.sh ra setclearpwd &lt;username&gt; &lt;userpass&gt;
</source>
<p>
# and finally reissue the certificate.
</p>
<source>
bin/ejbca.sh batch &lt;username&gt;
</source>
<p>
The same can be accomplished using a browser:
<ul>
<li>Admin GUI - List/Edit End Entities - View_Certificates for user - Recover Key, Close.</li>
<li>Admin GUI - List/Edit End Entities - Edit_End_Entity for user - Enter new password for user, Save (user status should now be 'Key Recovery')</li>
<li>Public Web - Create Keystore - Enter username and password - Fetch the keystore.</li>
</ul>
</p>
<subsection name="Technical details">
<p>
What the operation "bin/ejbca.sh ra keyrecovernewest", or "recover key" in the Admin GUI, or keyRecoverNewest in the WS API actually does is 
that it <strong>marks</strong> the user/certificate for key recovery. This means that the next time you make a call to generate a keystore (p12/jks/pem) 
for the user the CA will get the private key, held encrypted in the recovery database, and the existing user certificate or a new certificate, and 
create a keystore for the user with this old key pair. 
The actual recovery would then happen when you make a call to i.e. pkcs12Req in the WS API, or if keystore type is P12, JKS or PEM in the Admin GUI. 
</p>
<p>
The keys are stored in the database in the table KeyRecoveryData. The data is stored encrypted in a CMS message, as a serialized Java KeyPair. 
The certificate is not stored in KeyRecoveryData, but only in CertificateData. The encryption key used for the CMS message encryption
is the issuing CAs 'keyEncryptKey', and can thus be a key on the HSM. The actual CMS data encryption (RFC ??) is performed with AES256_CBC, using a random generated 
AES key (for this specific CM message). The AES key is wrpped using the RSA key in 'keyEncryptKey'. This is fully according to the best practices, open, stable, CMS standard.
</p>
<p>There are additional columns in the KeyRecoveryData table enabling change of the 'keyEncryptKey' of the issuing CA. The columns cryptoTokenId and keyAlias gives an exact pointer 
to the Crypto Token, and specific key, used to encrypt the data. When decrypting data this specific key, with this alias, on the CAs Crypto Token, is first tried, and only if that fails
the CAs 'keyEncryptKey' is tried. In additon the public Key Id (same as exists in CertificateData) of the public key used to encrypt the data is stored in the column publicKeyId. 
This means that even if keys changed it is possible to identify the exact public key used to decrypt the data.</p> 
<p>
Similarly the column serialNumber column of the table KeyRecoveryData matches the column serialNumber in the table CertificateData.</p>
</subsection>
</section>

<section name="Email notifications">
<p>
Mail settings in JBoss is created when running the 'ant deploy' or 'ant deploy-service' using the values
specified in conf/mail.properties (or default).
<br></br>
It is (automatically) configured in 
$APPSRV_HOME/server/default/deploy/ejbca-mail-service.xml for JBoss.
For other containers you must create a mail service with the same JNDI name as specified in 
conf/mail.properties.
</p>

<subsection name="End entity email notifications">
<p>
Email notification can be sent when status changes for an end entity, for example when a new user is added (status changes to new).
</p>
<p>
To configure email notifications in EJBCA:
<ol>
<li>
You must create a new end-entity profile to be able to issue certificates 
to end users using email notifications. Under the RA functions, choose "Edit End Entity Profiles" 
and add a new profile. Select the profile and go into 
'Edit End Entity profile'. In this page you can Enable Send Notifications 
and create the notification message. Make sure the checkbox 'Use Send Notification' is checked.
</li>
<li>
Add a new end entity. You must select the new end entity profile you
created above. Make sure the checkbox 'Send Notification' is checked.
Enter the from-address and subject. Enter a message using the variables defined
for dynamic substitution in the next section. Use ${NL} for newline in the mail message.
</li>
</ol>
</p>
<p>
The Notification Recipient can have a few different values:
<ul>
<li>USER: send notification to the email registered for the end entity.</li>
<li>foo@bar.com: send notification to the specified email address. Multiple email addresses can be entered comma separated.</li>
<li>CUSTOM: plug-in mechanism to retrieve addresses your own way. See interface org.ejbca.core.model.ra.raadmin.ICustomNotificationRecipient 
for implementation details. Enter a string like "CUSTOM:org.ejbca.MyCustomPluginClass" to use.</li>
</ul> 
</p>
<p>
You can also use substitution variable in the notification sender and recipient fields. See samples below.
</p>
<p>
The Notification Events specify which status changes for a user that will trigger a notification.
The default values are suitable to send an email to a user when he/she should go and pick up a 
certificate. You can also select for example STATUSGENERATED to send email notifications to an administrator
when the user picks up the certificate.
</p>
<p>
<strong>Tip:</strong>
If you configure autogenerated password in end entity profile you don't
need to enter one in the adduser page. A generated one will automatically be
sent with the email.
</p><p>
If you want to re-send a notification for a user, reset the status to NEW.
</p>
</subsection>

<subsection name="Dynamic Substitution Variables">
<p>
Parameters that can be used with different usages of email notification. All parameters isn't always set, it depends on the input data.
</p><p>
The following parameters can be set:
<ul>
<li>
${NL}                           = New Line in message
</li>
<li>
${DATE} or ${current.DATE}      = The current date
</li>
</ul>
</p><p>
Variables used with userdata:
<ul>
<li>
  ${USERNAME} or ${user.USERNAME} = The user's username.
</li>
<li>
  ${PASSWORD} or ${user.PASSWORD} = The user's password, or "enrollment code" as it is called in most pages in the public web. 
</li>
<li>
  ${UID} or ${user.UID}           = The user's unique identifier.
</li>
<li>
  ${CN} or ${user.CN}             = The common name of the user.
</li>
<li>
  ${SN} or ${user.SN}             = The serial number (in DN) of the user.
</li>
<li>
  ${O} or ${user.O}               = The user's organization.
</li>
<li>
  ${OU} or ${user.OU}             = The user's organizational unit.
</li>
<li>
  ${C} or ${user.C}               = The user's country.
</li>
<li>
  ${user.E}                       = The user's email address from Subject DN.
</li>
<li>${user.EE.EMAIL}				= Ther user's email address from the End Entity data.</li>
<li>${user.SAN.EMAIL}			  	= The user's email address from Subject Alternative Name, RFC822Name field.</li>
<li>${user.TIMECREATED}             = The time the user was created.</li>
<li>${user.TIMEMODIFIED}            = The time the user was modified.</li>
<li>${requestAdmin.CN}				= The common name of the requesting administrator.</li>
<li>${requestAdmin.EE.EMAIL}		= The email address of the administrator adding the end entity according to the administrator's End Entity data.</li>
<li>${requestAdmin.SAN.EMAIL}		= The email address of the administrator adding the end entity according to the administrator's Subject Alternative Name, RFC822Name field.</li>
<li>${approvalAdmin.XX} variables from below can be used to get the administrator who adds an end entity.</li>
</ul>
</p><p>
Variables used with approvals:
<ul>
<li>
  ${approvalRequest.DATE}            = The time the approval request was created
</li>
<li>
  ${approvalRequest.ID}              = The id of the approval request
</li>
<li>
  ${approvalRequest.ABS.ID}          = The id of the approval request with out any '-' sign, used for presentation purposes.
</li>
<li>
  ${approvalRequest.TYPE}            = The type of approval request
</li>
<li>
  ${approvalRequest.APROVEURL}       = A URL to the review approval page with the current request.
</li>
<li>
  ${approvalRequest.APPROVALSLEFT}   = The number of approvals remaining.
</li>
<li>
  ${approvalRequest.APPROVALCOMMENT} = The comment made by the approving/rejecting administrator
</li>
<li>
  ${requestAdmin.USERNAME}         = The requesting administrator's username
</li>
<li>
  ${requestAdmin.CN}               = The common name of the requesting administrator.
</li>
<li>
  ${requestAdmin.SN}               = The common name of the requesting administrator.
</li>
<li>
  ${requestAdmin.O}                = The requesting administrator's organization
</li>
<li>
  ${requestAdmin.OU}               = The requesting administrator's organization unit
</li>
<li>
  ${requestAdmin.C}                = The requesting administrator's country
</li>
<li>
  ${requestAdmin.E}                = The requesting administrator's email address from Subject DN
</li>
<li>
 ${approvalAdmin.USERNAME}        = The approving administrator's username
</li>
<li>
 ${approvalAdmin.CN}              = The common name of the approving administrator.
</li>
<li>
 ${approvalAdmin.SN}              = The common name of the approving administrator. 
</li>
<li>
 ${approvalAdmin.O}               = The approving administrator's organization
</li>
<li>
 ${approvalAdmin.OU}              = The approving administrator's organization unit
</li>
<li>
 ${approvalAdmin.C}               = The approving administrator's country
</li>
<li>
 ${approvalAdmin.E}               = The approving administrator's email address from Subject DN
</li>
</ul>
</p><p>
Variables used with  expiring certificates:
<ul>
<li>
  ${expiringCert.CERTSERIAL}      = The serial number of the certificate about to expire
</li>
<li>
  ${expiringCert.EXPIREDATE}      = The date the certificate will expire
</li>
<li>
  ${expiringCert.CERTSUBJECTDN}   = The certificate subject DN
</li>
<li>
  ${expiringCert.CERTISSUERDN}    = The certificate issuer DN
</li>
</ul>
</p>
</subsection>

<subsection name="Examples">
<p>
In certain circumstances, e.g. when you need to comply with PCI
or the lighter levels of FIPS-140/160, it may be required to
configure a 2 step issuance process.

This can by done by using the notifications.

Create 3 email notifications:
<ol>
<li>To: USER<br/>
	Email notification to -just- the user with the URL to
	pick up the cert and the username. Make clear in
	the message that he or she will be contacted by
	the approving admin with the password.
	</li>
<li>To: ${approvalAdmin.E}<br/>
	Email notification to the apporiving admin with 
	the password (but not the username) and a message
	which makes clear that this password is to be
	passed to the user - by phone or f2f (but not
	by email).
</li>
<li>To: ca-team@foo... **<br/>
	Email notification of the issuing to the auditor
	mailing lists - without above username/password.
</li>
</ol>
</p>
</subsection>

</section>

<section name="Printing of User Data">
<p>
User data can be sent to a printer whenever an end entity is added or edited. The functionality is
practically the same as for notifications.
</p><p>
This is configured in the end entity profiles by selecting a printer,
the number of copies and uploading a SVG formatted template. There 
exists a template in 'src/cli/svgTemplate/Batch PIN envelope print.svg' 
that can be used for testing.
</p><p>
For more information how to write EJBCA SVG templates see: http://wiki.ejbca.org/ (Administration->hardtokenprofiles). 
</p><p>
A good SVG client can be downloaded from inkscape.org 
</p><p>
In order to renew the list of available printers you must restart
the http session since the list is cached for performance reasons.
</p></section>

<section name="Approving Actions">
<p>
It is possible to have other administrators (1-5) to approve an action in order to make sure the correct data is entered.
</p>
<p>
Currently are the following actions are enabled for approvals :
<ul>
<li>Add End Entity</li>
<li>Edit End Entity</li>
<li>Change User Status</li>
<li>Revoke End Entity</li>
<li>Revoke Token (approval for each certificate)</li>
<li>Revoke Certificate</li>
<li>Reactivate Certificate On Hold</li>
</ul>
</p><p>
In the main menu there is a new option 'Approve Actions' that lets the 
administrator to search for waiting requests and review its data and finally 
gives his approval or reject the action.
</p><p>
<i>Configuring Approvals</i>
</p><p>

Approvals are configured for each CA, in the 'Edit Certificate Authorities' page and for each certificate profile in 
the 'Certificate Profiles' page. 
Just select the actions that needs approval and the number of approvers required and save. The actions 'Add End Entity', 
'Change End Entity' and 'Change User Status' are all covered by the setting 'Add/Edit End Entity'. 'Revoke End Entity',
'Revoke Certificate', 'Revoke Token' and 'Reactivate Certificate' are covered by setting 'Revocation'. 
Approvals will be required if the CA or the certificate profile enforces it and in case the number of approvers differs 
between the CA and the certificate profile the largest number of approvers will be used.
</p><p>
<i>Authorizing Approving Administrators</i>
</p><p>
In order to authorize an administrator to review approval requests do one of the following.
</p><p>
Using Basic Rule Sets:
</p><p>
Give an role the role of SuperAdmin, CAAdmin or RAAdmin with Approve End Entities selected.
</p><p>
The SuperAdmin and CAAdmin gives access to approve rules not associated with any end entity profile 
(I.e dual authenticated CA configuration (Not implemented yet)) while the RAAdmin only can approve actions 
related to authorized end entity profiles.
</p><p>
Using Advanced Rule Sets:
</p><p>
There are three new access rules: 
<ul>
<li><i>'/cafunctionality/approve_caaction'</i>, a rule that gives access to non end entity profile related actions 
like approving CA editing and creation (not implemented yet).  An administrator must have either this rule or the 
'/rafunctionalty/approve_end_entity' in order to access the 'Approve Actions' web pages.</li>
<li><i>'/rafunctionalty/approve_end_entity'</i>, a rule (along with the corresponding end entity profile rule) that 
gives access to end entity profile related access rules, like adding and editing end entities. The administrator must 
also have the 'approve_end_entity rule' for at least one of the '/endentityprofilerules/' in order to approve any 
actions.</li>
<li><i>'/endentityprofilerules/&lt;endentityprofilename&gt;/approve_end_entity'</i>see previous rule.</li>
</ul>
</p><p>
<i>Two Different Approval Requests</i>
</p><p>
In the system there are basically two different classes of requests. One is requests to do some action, like adding an 
end entity, and that is executed directly after the last required administrator has approved the action. This type is 
called 'Executable Action Request'. The other type are requests to get hold of some information, like hard token 
PUK codes or archived keys. This kind of request is approved when the last administrator gives his consent and is valid 
for a defined period of time (in conf/ejbca.properties). In this case the requesting administrator is supposed to poll the 
approval request if it has been approved or not. These requests are called 'Non-Executable Action Requests'. 
</p><p>
<i>Explanation of approval status</i>
</p><p>
Here follows an explanation of what the different approval requests statuses.
<ul>
<li><i>Waiting</i>: Means that the action request is waiting to be processed by authorized administrators, request are 
valid for the time specified by approval.defaultrequestvalidity in conf/ejbca.properties before it is set to status Expired.</li>
<li><i>Approved</i>: Means that the action request is approved and is valid for the amount of time specified by 
approval.defaultapprovalvalidity in conf/ejbca.properties. After this it is set to Expired. Used by action requests that are 
not executable.</li>
<li><i>Rejected</i>: Means that the action request is rejected and won't be allowed. The rejection lasts the amount of time 
specified by approval.defaultapprovalvalidity in conf/ejbca.properties. After this it is set to Expired and a new request can 
be done. Used by action requests that are not executable.</li>
<li><i>Expired</i>: Means that the action request isn't valid any more and cannot be processed. The requesting administrator 
has to make a new request in order to approve it.</li>
<li><i>Expired and Notified</i>: Same as 'Expired' but also indicates that the requesting administrator has been notified 
about that his request have expired.</li>
<li><i>Executed</i>: Means that the action request have been executed successfully. Used by action requests that are executable.</li>
<li><i>Execution Failed</i>: Means that the action request failed for some reason during execution, see log for more information.
 Used by action requests that are executable.</li>
<li><i>Execution Denied</i>: Means that the action request hasn't been approved and will not be executed. The difference with status 
'Rejected' is that this status is only used with executable requests and do not have any expire time. This means that the requesting 
administrator can apply again directly after the rejection.</li>
</ul>
</p><p>
<i>Approval Notification</i>
</p><p>
EJBCA approval functionality have been enhanced to sent notifications about approval requests.
</p><p>
To enable approval notification go to the system configuration page and check the 'Use Approval Notification' checkbox.
You are also required to set the email-address to the approving administrators. This should be a mail-alias to all administrators that should be able to review approval requests and the from address that should be used when EJBCA sends emails.
</p><p>
Then whenever an approval request is created an e-mail is sent both to the requesting admin (if he has an e-mail configured in his user data) and to the approval administrators.
</p><p>
When the approving administrators have recieved the mail, there is a link directly to the approve request page where he can review the requests. When he has approved and rejected the requested all the other administrators in notified about this.
</p><p>
The text of notifications is configured in src/intresources/ejbcaresources.xx.properties and intresources.xx.properties. The relevant properties starts with "notification". See the ' Dynamic Substitution Variables' section in this manual for a list of available variables.
</p><p>
Remember to configure mail-server settings in the mail.properties file.
</p>
</section>

<section name="Self Registration">
<p>
It is possible to allow users of the public web to create approval requests for new end-entities (under 'Request Registration'). The users' choice of end-entity type and DN fields is confined, for instance it could be limited to end-user certificates with only the name and e-mail fields being available. The DN fields can then be verified by an administrator. 
</p>
<p>
    Note the following properties of the basic solution:
    <ol>
        <li>The approval process verifies end entity account creation.</li>
        <li>The approval process does <strong>not</strong> verify CSR public key binding to a specific end entity.</li>
    </ol>
    Possible usages of self registration includes an almost unlimited set of use cases. The default solution is suitable and configurable for a large set of these use cases, and can function as a platform to customize other 
    more specialized use cases. Customization of self registration work flows is a pretty straight forward process.
</p>
<subsection name="Configuration">
<p>
Setting up self registration consists of three steps: creating end-endity and certificate profiles that should be available, configuring <a href="#Email notifications">email notifications</a>, and configuring self registration in <code>web.properties</code>.
<br/>
First, at least one <a href="userguide.html#End Entity profiles">end-entity profile</a> should be created as follows:
</p>
<ul>
<li>The SubjectDN and SubjectAltName fields that should be available must be added. Fields that are marked as <em>modifiable</em> can be modified freely, otherwise only pre-defined values can be selected by the user. See <a href="userguide.html#Subject DN Fields">the user guide</a> for further information.</li>
<li>The user's e-mail can be verified by sending an auto-generated password to it (but this is not the only way to verify the user). The email domain field must be enabled with the <em>Use</em> checkbox, and auto-generated passwords must be enabled. Optionally the domain field may be constrained to particular choices, see the user guide section on end-entity profiles.</li>
<li>E-mail validation works by sending the password in a notification message. For this reason, <em>Send Notification</em> must be enabled (check Use and Default), and the other notification fields below it should be filled in. See the section on <a href="#Email notifications">email notifications</a>.</li>
<li>By the default the user will be prompted to fill in the username, but the username can also be generated from a field in the end-entity profile such as CN (common name), see below.</li>
</ul>
<p>
    Note that sending of a password in an email is not the only way to do things. You can for example use multiple notifications where an enrollment link is sent to the user, but the password is sent to an administrator, or an out-of-band delivery service (through local email), or printed on paper. The solutions are highly configurable and adaptable. 
</p>
<p>
E-mail sending must be configured in <code>mail.properties</code> to work. You may also want to enable notifications to the administrators when there are new approval requests, under System Functions / System Configuration.
</p>
<p>
To make the end-entity profiles available in the user interface, <em>certificate types</em> must be added in <code>web.properties</code> using the <code>web.selfreg.certtypes.<em>&lt;identifier&gt;</em>.*</code> properties (the identifier can be chosen arbitrarily). Each certificate type defines an end-entity profile and a certificate profile, and what name should be displayed in the user interface. If the username should be generated from a field, then this can be configured using the <code>usernamemapping</code> sub-property. Finally, to enable self registration, the property <code>web.selfreg.enabled</code> must be set to true.
</p>
</subsection>
<p>
Note that the approval requests will be shown in the administration GUI as coming from a <em>Command Line Tool</em>. This is normal, since all actions that aren't initiated by an administrator are shown as coming from the command line.
</p>
</section>

<section name="Framework for External User Data Sources">
<p>
A basic framework for importing user data from existing databases exists. The intention of this
framework is to be able to import user the user data from an LDAP and AD, but currently no such
implementations exist or any way to use such implementation from the Admin GUI. The rest of this
section is intended for EJBCA developers.
</p>
<p>A custom userdatasource have two extra fields of data:</p>
<ul>
<li>The first one is a set of CA ids that the userdatasource is applicable to. 
It can have a constant BaseUserDataSource.ANY_CA.</li>
<li>The second is a set of fields instructing the RA interface GUI which fields that 
should be modifyable by the RA and which that should be fixed. Important, there 
is not connection between the user data source, isModifyable data and the end entity profile 
isModifyable data. The userdata source is only an instruction to the RA gui then when the 
userdata is added will it be matched against the end entity profile, and it's the data 
in the end entity profile that really counts.</li>
</ul>
<p>
To implement a custom user data source do the following: 
<ol>
<li>Create a class implementing the interface 
org.ejbca.core.model.ra.userdatasource.ICustomUserDataSource containing the methods: 
init(), fetch() and testConnection(), see org.ejbca.core.model.ra.userdatasource.DummyCustomUserDataSource 
for an simple example implementation. 
</li>
<li>Create a JAR file containing the class and deploy it to the application server.</li>
<li>Make the user data source available to EJBCA by adding a userdata source, choose 'Custom user data source' 
as type and enter it's classpath and properties (using the same semantics as a regular java property file). 
</li>
<li>
Now it is possible to fetch userdata from the userdata source from custom implemented webpages using the 
UserDataSourceSessionBean.fetch(AuthenticationToken admin, Collection&lt;Integer&gt; userdatasourceids, String searchstring) method. 
</li>
</ol>
</p>
</section>

<section name="Services Framework">
<p>
EJBCA has a framework for timer services, i.e. procedures 
that should be run on a timely basis. Currently there exists five types of 
services:
<ul>
<li>a 'CRL Updater' that automatically updates the CRL.</li>
<li>a 'Certificate Expiration Checker' that checks if a CA have certificates about to expire and 
sends an email notification to the end user and/or the administrator.</li>
<li>a 'User Password Expire Service' that checks if a user have not enrolled for a new certificate within a 
certain amount of time after been registered, and expires the users possibility to enroll.</li>
<li>a 'Renew CA Service' that checks if CA certificates are about to expire and renews them.</li>
<li>a 'Publisher queue process service' that retries failed publishing.</li>
<li>a 'HSM Keepalive Service' that periodically tests crypto tokens to avoid connection timeouts.</li>
<li>a 'Remote Internal Key Binding Updater' that automatically renews expiring OCSP signing certificates and keys at a connected VA.</li>
</ul>
It is also possible to easily write plug-ins for customized services.
</p><p>
A service consists of the components, a worker doing the actual work, an interval 
determining the time to the next time the service should run and an action (optional) 
of what should be done if a certain condition occurs.
</p>

<subsection name="Configuration">
<subsubsection name="Workers">
<p>
The worker is the class that will be executed when the service runs. Each worker can have different worker specific configuration. 
</p>
</subsubsection>
<subsubsection name="Intervals">
<p><i>Periodical Interval</i></p>
<p>
Defines in days/hours/minutes/seconds of how often the worker will be run. <b><i>A worker should never be configured to run more often than the time a single invocation takes.</i></b>
</p>
</subsubsection>
<subsubsection name="Actions">
<p><i>Mail Action</i></p>
<p>
Action that sends an email notification when the service is executed and have the following settings:
<ul>
<li>
<i>Sender Address</i> - The from-address used in the email.
</li>
<li>
<i>Receiver Address</i> - The to-address of the email of it 
isn't specified by the worker.
</li>
</ul>
</p>
</subsubsection>
<subsubsection name="Pin to Specific Node(s)">
<p>With this option, it is possible to choose on which nodes the service is allowed to execute. By not choosing any nodes in the list the service can be executed on any of the nodes.</p>
<p>On startup of EJBCA each node adds its hostname to the list of nodes. The list can also be manually edited on the System Configuration page.</p>
</subsubsection>
</subsection>

<subsection name="Implementation details">
<p>
A service worker should never run simultaneously on two nodes, or simultaneously on one node.
To avoid running more than one instance on a single node there is a semaphore that inhibits more than one 
instance of the worker to run in a single JVM. If a worker starts and another worker is already running
the worker is rescheduled to run on the next planned interval, and immediately terminated.
<br/>
To avoid running any two services on two nodes simultaneously, the service have a time stamp that is set when it runs, and 
schedules the next run before the actual work is started. This time stamp makes it possible for another node to determine of 
the service is already running on another node and not start running.
</p><p>
In practice what this leads to is that a service will always run on a single node, the same node every time.  
</p>
</subsection>

<subsection name="Currently Available Services">
<p><b>CRL Update Service</b></p><p>
The CRL Updater checks if any of the configured CAs need a new CRL and updates it if necessary. The worker have no
additional settings and only supports the periodical interval and no action.
</p>
<p><b>Certificate Expiration Check Service</b></p><p>
A worker that checks if a CA have certificates about to expire and sends an email 
notification the the end user and/or administrator. 
The worker have the following settings:
<ul>
<li>
<i>CAs to Check</i> - Select here which CAs that should be searched for expiring certificates.
</li>
<li>
<i> Certificate Profiles to Check</i> - If any certificate profile is selected from this list, the notification service will require that 
certificates are issued by the selected CAs AND that they are issued using one of the selected certificate profiles. Leaving this list empty will 
cause the service to search for certificates just based on the CA selection.   
</li>
<li>
<i>Time before notification is sent</i> - The number of Days/Hours/Minutes/Seconds that should 
remain of the certificates validity before the notification is sent.
</li>
<li>
<i>Send notification to end user</i> - Check this if a notification should be sent to 
the owner of the certificate. Observe that the end user must have an email set in 
the user database (not necessarily in the certificate) in order for the service to 
send the notification.
</li>
<li>
<i>Notification Subject to End User</i> - The e-mail subject.
</li>
<li>
<i>End User Message</i> - Message body of the notification. Substitution 
variables can be used here as defined in the 'Email Notifications' section.
</li>
<li>
<i>Send notification to Administrator</i> - Check this if a notification should be sent 
to some defined administrator-mail address. The address of the administrator is 
configured in the Mail Action component.
</li>
<li>
<i>Notification Subject to Administrator</i> - The e-mail subject.
</li>
<li>
<i>Administrator Message</i> - Message body of the notification. Substitution 
variables can be used here as defined in the 'Email Notifications' section.
</li>
</ul>
</p>
<p>Note: you may configure <i>multiple</i> certificate expiration services set with different
<i>Time before notification is sent</i> values in order to further alert the user or administrator
that a certificate is about to expire.</p>
<p><b>User Password Expire Service</b></p>
<p>
A worker that checks if a user has not enrolled for a new certificate within a specified amount of time
after the user was last edited. If the user has not enrolled within this time, the user's status is set to 
Generated and the user will not be able to enroll. 
The worker have the same basic setting as the 'Certificate Expiration Check Service', except for 
'Time before notification is sent' which is replaced by:
<ul>
<li>
<i>Time until user password expire</i> - The number of Days/Hours/Minutes/Seconds that a user should be able to 
enroll for a certificate, i.e. the time before the user's password expire.
</li>
</ul>
</p>

<p><b>Renew CA Service</b></p>
<p>
The renew CA service can be used to automatically renew CAs that are about to expire. This might be used for SubCAs that
are valid only short periods of time. The specific settings are:
<ul>
<li><i>CAs to Check</i> - which CAs should be checked, and renewed if they are about to expire.</li>
<li><i>Time before CA expires to renew</i> - the amount of time before the CA actually expires that the service should renew the CA.</li>
</ul>
For CAs using soft keystores and not using the default password, auto-activation is required. 
</p>

<p><b>Publisher Queue Process Service</b></p>
<p>
The publisher queue process service processes the publisher queue. In the publisher queue, entries where publishing failed is collected. 
This service will try to re-publish entries from this queue. The specific settings are:
<ul>
<li><i>Publishers to check</i> - which publishers should this service check and re-publish for. You can run one service for each publisher or one service for all publishers.</li>
</ul>
</p>
<note>
<p>
If you run one service for each publisher you should onle configure one publisher in every service. Do not let two services handle the same publisher.
</p>
</note>
<p>To read on how the algorithm to prevent excessive database load etc is done, the easiest way is to read in the java file for class PublishQueueProcessWorker.
</p>
<p>The same algorithm as for the CRL update worker is used to make sure the service only runs in one instance on one node.</p>

<p><b>HSM Keepalive Service</b></p>
<p>
The service periodically (with configured interval) goes through all available Crypto Tokens and makes a test signature if the following conditions are met:
<ul>
<li>The crypto token is a PKCS#11 crypto token, i.e. have a PKCS#11 library path configured.</li>
<li>The crypto token is active.</li>
<li>The crypto token have a key with alias 'testKey'.</li>
</ul>
If these conditions are met, a test signature with the 'testKey' is performed. In addition, if security audit log protection is configured, a test string is protected with the security audit log protection, 
also testing this crypto token (which is not available in the crypto tokens in the GUI). 
</p><p>
This will ensure that all configured PKCS#11 slots are used regularly, preventing connection timeouts that could lead to service downtime. You only need to enable this service if you encounter HSM timeouts. 
The occurance of such timeouts depend on the specific HSM used, neworking equipment etc. 
</p>

<p><b>Remote Internal Key Binding Updater</b></p>
<p>
The service periodically (with configured interval) connects to the configured peer system using a Peer Connector and checks expiration of visible, usable and
enabled Internal Key Bindings' certificates.
For renewal to work, the issuing CA has to be usable on the system where this service is running and the same end entity that was used to issue the
previous certificate must still exist.
<ul>
<li>Time before certificate expires: How long before the current bound certificate expires it should be renewed.</li>
<li>Renew key pair: Option to renew the key pair automatically before issuing a new certificate.</li>
</ul>
</p>

</subsection>

<subsection name="Writing Customized Services">
<p>
It is possible to write customized component plug-ins that can be used with 
other standard (or customized plug-ins) and this section explains the steps 
necessary.
</p><p>
Common for all the components is that it is required to create a class implementing 
the components interface. Then you have to create a special jar containing the necessary 
plug-in classes and meta-data (described below), and deploy it to application server so it is included in the 
class-path. The next step is to create a service using the custom class
and optionally the custom properties used by the component. 
The properties field have the same syntax as a regular Java property file.
</p><p>
The Jar must contain meta-data that describes which classes implement which
interfaces. This is necessary since EJBCA enumerates all implementations using the
<a href="https://docs.oracle.com/javase/6/docs/api/java/util/ServiceLoader.html">ServiceLoader</a>
facility of Java. For each implemented interface the Jar must contain a file named
<code>META-INF/services/name.of.interface</code>, for example
<code>META-INF/services/org.ejbca.core.model.services.IWorker</code>. Each such file
should contain a list of implementing classes, one per line. For example:
</p>
<source>
# Example file. Should be named META-INF/services/org.ejbca.core.model.services.IWorker
com.example.ejbca.MyWorker
com.example.ejbca.MyOtherWorker
</source>
<note>
<p>
It is not possible to hot-deploy EJBCA when customized services are used.
</p>
</note>
<note>
<p>
Service components made for EJBCA 5.0 and earlier do not use the ServiceLoader facility and will not
be auto-detected. To use a service component made for version 5.0 please set
<code>web.manualclasspathsenabled</code> to true in <code>conf/web.properties</code>
and specify the qualified class name manually (i.e. including package name).
</p>
</note>

<subsection name="CustomWorker">
<p>
A Custom worker must implement the org.ejbca.core.model.services.IWorker interface. 
But a simpler way is to inherit the BaseWorker class. Then you have to implement one 
method 'void work()'  doing the actual work every time the service framework decides 
it is time. The work method can make a call to the action (optional) component by 
'getAction().performAction(someActionInfo);' The action info can vary depending on 
the action component but it must implement the ActionInfo interface.
</p><p>
If something goes wrong during the work should a ServiceExecutionFailedException be 
thrown with a good error message.
</p><p>
See org.ejbca.core.model.services.workers.DummyWorker for an example implementation.
</p>
</subsection>
<subsection name="CustomInterval">
<p>
A Custom Interval must implement the org.ejbca.core.model.services.IInterval 
interface. But a simpler way is to inherit the BaseInterval class. You then have to 
implement one method 'public long getTimeToExecution();' which should return the 
time in seconds until the next time the service is run. Or it should return 
DONT_EXECUTE if the service should stop running.
</p><p>
See org.ejbca.core.model.services.intervals.DummyInterval for an example implementation.
</p>
</subsection>
<subsection name="CustomAction">
<p>
A Custom Action must implement the org.ejbca.core.model.services.IAction interface. 
</p><p>
A simpler way is to inherit the BaseAction class. Then only the method 'performAction(ActionInfo actionInfo)' needs to
be implemented. The methods should perform the action according to the defined properties and the ActionInfo (all
optional). If something goes wrong during the processing of the action should a ActionException be thrown.
</p><p>
See org.ejbca.core.model.services.actions.DummyAction for an example implementation.
</p>
</subsection>
</subsection>
</section>
<section name="Hardware Security Modules (HSM)">
<p>
EJBCA have support for several HSMs. Each HSM has it's own interface for key generation and maintenance, specific
to the HSM and independent of EJBCA. You should make sure you are familiar with how your HSM works.
</p>
<subsection name="HSM modules available in the Admin GUI">
<p>
Since EJBCA 6.0 you can manage crypto tokens fully in the Admin GUI or CLI.
The admin GUI tries to be user friendly and automatically show you the HSMs available in your system.
When creating a new Crypto Token (Crypto Tokens-&gt;Create New) you can select between Soft and PKCS#11 crypto tokens. 
</p>
<ul>
<li>The PKCS#11 option is only available if EJBCA can find any known PKCS#11 modules in the file system.</li>
</ul>
<p>
If EJBCA finds any available known PKCS#11 modules in the file system, you can select PKCS#11 as <i>Type</i>. As <i>PKCS#11 Library</i> there is a
list of the available known HSMs found in the file system.
</p>
<p>If the PKCS#11 option is not available or your desired HSM is not in the list of available Libraries there are a few options to configure:
</p>
<ul>
<li>If you are using JBoss 7 you must make the java PKCS#11 classes exportable. See <a href="installation.html#JBoss">JBoss specific installation notes</a>.</li>
<li>You can configure PKCS#11 modules that are not already known to EJBCA in conf/web.properties. See conf/web.properties.sample how to add new known modules and override existing (overriding should not be needed since you can add new locations with the same name).</li>
</ul>
<p>
How to create and use Crypto Tokens for HSMs in the Admin GUI is describe in the User Guide, <a href="userguide.html#Managing%20Crypto%20Tokens">Managing Crypto Tokens</a> and <a href="userguide.html##Managing%20CAs">Managing CAs</a>.
</p>
<p>The rest of this chapter will mostly be more technical and describe the underlying operations and technical features of using HSMs and PKCS#11.</p>
</subsection>
<subsection name="Configuring HSMs">
<p>
The GUI configuration of CAs is actually backed by a properties field where properties unique to a particular CAs usage of the HSM is specified. All implemented HSM modules are using the same property keywords to define the identity and the purpose of the keys to be used. 
These keywords are:
<ul>
<li>certSignKey      - the key to be used when signing certificates, can be RSA or ECDSA.</li>
<li>crlSignKey       - the key to be used when signing CLSs, can be RSA or ECDSA.</li>
<li>keyEncryptKey    - the key to be used for key encryption and decryption, this must be an RSA key.</li>
<li>testKey          - the key to be used by HSM status checks, can be RSA or ECDSA.</li>
<li>hardTokenEncrypt - the key to be used for hardtoken encryption and decryption. PUK will be decrypted by this key.</li>
<li>defaultKey       - the key to be used when no other key is defined for a purpose. If this is the only definition then this key will be used for all purposes.</li>
<li>pin              - optional pin code used for auto-activation of CA token, see below. Not recommended for high security set-ups, but very useful in some cases.</li>
</ul>
</p><p>
You may omit defaultKey if you want to be sure that the right key is used, but then all the other keys must be specified. It's recommended that the certificate and CRL signing keys are linked to the same key since different keys are rarely supported by verifying applications.
</p><p>
When implementing support for a new HSM the 'KeyStrings' class could be used to manage the key properties described above. When it is an JCA/JCE API for the HSM it could also be wise to extend the BaseCAToken class.
</p><p>
The same activation code must be used for all keys used by a CA. 
</p><p>
There are four additional key properties that can (optionally) be used when renewing CA keys and to produce roll-over certificates. Some of these (in particular the 'next' keys) are only used when using API methods (such as WS).
<ul>
  <li>previousCertSignKey - this is the alias of the previous signature key, as opposed to 'certSignKey' which is the current signature key.</li>
  <li>previousSequence - this is the sequence identifying the previous signature key, as opposed to the current sequence that is held in the CA token.
  This sequence will replace the current sequence in the caRef field when signing a request with the CAs previous key.</li>
  <li>nextCertSigningKey - this is the alias of a new generated key on the HSM. When updating a CA signed by an external CA this is used to send a request, 
  but the CA is still active using the old key. When the certificate response is received this key is activate and moved to certSignKey/crlSignKey.</li>
  <li>nextSequence - this is the sequence identifying the next signature key.</li>
</ul>
</p><p>
Supported and tested HSMs are described below, with sample configurations and HSM specific documentation.
</p><p>
Since EJBCA 3.6 the recommended HSM connector is to use the PKCS#11 interface. Older JCE implementations are deprecated and removed (contact us if you need to migrate). 
</p>
</subsection>
<subsection name="Testing PKCS#11 keys for use by EJBCA">
<p>
To test keys on the HSM for use by EJBCA you can use the <a href="userguide.html#EJBCA%20client%20toolbox">EJBCA Client Toolbox</a>. 
</p>
<source>
ant clientToolBox
cd dist/clientToolBox
./ejbcaClientToolBox.sh PKCS11HSMKeyTool test
</source>
<p>
The command will give further instructions about the parameters requires, PKCS#11 library and slot.
</p>
</subsection>
<subsection name="Auto-activation of Crypto Tokens">
<p>
The 'pin' property is used to be able to automatically activate a CA token. The activation code may be specified in the property field with the keyword 'pin'. 
If this property is not specified then the CA has to be manually activated after each restart or re-deployment of EJBCA. 
<br/>
Manual activation is done in the admin-GUI under 'Basic Functions->View Information', or using the cli 'bin/ejbca.sh ca activateca'.
</p><p>
The 'pin' property can use a clear text password or an encrypted (obfuscated) one.
</p>
<source>
pin foo123
pin 6bc841b2745e2c95e042a68b4777b34c
</source>
<p>
These two properties contains the same password. The obfuscated pin value can be obtained with the command 'bin/ejbca.sh encryptpwd':
</p>
<source>
$ bin/ejbca.sh encryptpwd foo123
Using JBoss JNDI provider...
Please note that this encryption does not provide absolute security, ....
Enter word to encrypt:
hidden
Encrypting pwd...
6bc841b2745e2c95e042a68b4777b34c
</source>
<p>
NOTE: This obfuscated is not high security encryption, it is only meant to protect the password for accidental viewing. 
The obfuscated algortihm uses a built in encryption key in EJBCA. With an encrypted pin you can for example bring up
the 'Edit CAs' page in the Admin GUI without everyone around immediately seeing your password. If an attacker gets hold
of the obfuscated value it is easy to decrypt using the source code of EJBCA.
</p>
</subsection>

<subsection name="HSMs and DSA or ECDSA">
<p>
Support for DSA or ECDSA in HSMs are dependant on the support for the algorithms in the HSM. You have to check if that support is available.
</p>
  <p>
  See <a href="adminguide.html#Using%20ECDSA%20with%20an%20HSM">Using ECDSA with an HSM</a> in for some details and issues with HSMs and ECDSA. 
  </p>  
</subsection>

<subsection name="Generic PKCS#11 provider">
<p>
A PKCS#11 wrapper has been used to implement support for tokens with PKCS#11 libraries. The PKCS#11 provider have been 
tested with Utimaco CryptoServer and nCipher nShield/netHSM and SafeNet ProtectServer and SafeNet Luna and AEP Keyper and ARX CoSign and Bull TrustWay.
</p>
<p>
Besides the keys previously described the Crypto Token property field (matching with user friendly values of the Crypto Token in the Administration GUI) should contain the following properties:
<ul>
<li>sharedLibrary - the path to the HSM PKCS#11 library (/etc/utimaco/libcs2_pkcs11.so, /usr/safenet/lunaclient/lib/libCryptoki2_64.so etc)</li>
<li>slotLabelType - the type of slot reference, see below</li>
<li>slotLabelValue - the value of the slot reference (1, myslot etc).</li>
</ul>
</p><p>
The slot label type can be one of the following
<ul>
<li>SLOT_NUMBER - Any positive integer, can be used to refer to slots in any HSM with consecutive slot numbering.</li>
<li>SLOT_INDEX  - Any positive integer, prefaced by an 'i'. </li>
<li>SLOT_LABEL  - The PKCS#11 standard allows for using strings for labeling slots. This label may also be an integer or an 'i' followed by an integer (like a number or an index)</li>
<li>SUN_FILE    - The slot specified by a SUN config file. The slot label can be left blank.</li>
</ul>
</p><p>
</p>
<p>Optionally a few extra properties fields can be used:
<ul>
<li>attributesFile - a file specifying PKCS#11 attributes (used mainly for key generation).</li>
<li>keyspec        - key specification used when generating new HSM keys from within the admin GUI. Keyspec that is used as first choice when generating new keys in the GUI of form "1024" for RSA keys, "DSA1024" for DSA keys and secp256r1 for EC keys.
If keyspec is not given EJBCA tries to generate a key with the same specification as the current cert signing key.</li>
</ul>
</p><p>
An attributes file is in the format specified in the <a href="http://download.oracle.com/javase/7/docs/technotes/guides/security/p11guide.html">JavaTM PKCS#11 Reference Guide</a> and the examples further down in this file.
</p><p>
Before EJBCA 3.11 there were no default attributes used when no 'attributesFile' existed. Now there is a built in default configuration used when no attributesFile is specified.
Unless you have some strange HSM not working well with the defaults(see below) you should NOT use an 'attributesFile'. Below is an example of an 'attributesFile' (that should not be used) which will give generated keys
same attribute values as the default:
</p>
<source>
name=SafeNet
library=/opt/PTK/lib/libcryptoki.so
slot=1
attributes(*, CKO_PUBLIC_KEY, *) = {
  CKA_TOKEN = false
  CKA_ENCRYPT = true
  CKA_VERIFY = true
  CKA_WRAP = true
}
attributes(*, CKO_PRIVATE_KEY, *) = {
  CKA_TOKEN = true
  CKA_PRIVATE = true
  CKA_SENSITIVE = true
  CKA_EXTRACTABLE = false
  CKA_DECRYPT = true
  CKA_SIGN = true
  CKA_UNWRAP = true
}
disabledMechanisms = {
  CKM_SHA1_RSA_PKCS
  CKM_SHA256_RSA_PKCS
  CKM_SHA384_RSA_PKCS
  CKM_SHA512_RSA_PKCS
  CKM_MD2_RSA_PKCS
  CKM_MD5_RSA_PKCS
  CKM_DSA_SHA1
  CKM_ECDSA_SHA1
}
</source>
<p>The only occasion that we know of where the default is not working is when the module protected slot of a Thales/nCipher HSM is used; then the file must exist and have 'CKA_PRIVATE = false' (see below).
</p>
<p>
The default attributes that are applied to each key generated by EJBCA will assure that:
<ul>
<li>All needed operations could be done.</li>
<li>The private part of the key is stored in the HSM but not the public part (which is in a certificate that is stored on the HSM).</li>
<li>It will be impossible to read the private part of the key from the HSM.</li>
</ul>
</p>
<p>
The default configuration will also disable some signing mechanisms. The disabled mechanisms are for signing when the data to be signed is hashed by PKCS#11 before using the private key in the HSM.
When these mechanism are disabled the sun PKCS#11 wrapper provider will do the hashing instead of the of the HSM. This will speed up the signing in most cases, especially when your HSM is on another host.
This will not have any security impacts since no secret in the HSM is used for the hashing.
</p>
<p>
However it will be possible not disable these hash/signing mechanisms, see the PKCS#11 section of '$EJBCA_HOME/conf/cesecore.properties'.
You could try not to disable the mechanisms if you get the error CKR_FUNCTION_NOT_SUPPORTED (0x54) from PKCS#11 when signing.
</p>
<note>
If you are using an attributesFile and have more than one CA using the same slot it is very important that BOTH CA token properties configurations contains the attributesFile. 
This is because the attributes are applied when the provider is installed during startup. If one configuration does not have the attributesFile it can not be applied later on by the other configuration. 
</note>
<p>
The tool "EJBCA_HOME/dist/clientToolBox/ejbcaClientToolBox.sh PKCS11HSMKeyTool" is used administrate and generate keys. Use it without parameters to get all valid options.
Keys may be generated in two ways. Examples:
</p>
<source>
dist/clientToolBox/ejbcaClientToolBox.sh PKCS11HSMKeyTool generate hsmp11.so 2048 defaultKey 1
</source>
<source>
dist/clientToolBox/ejbcaClientToolBox.sh PKCS11HSMKeyTool generate hsmp11.conf 2048 defaultKey
</source>
<p>
The first example is using built in default and are then using specified slot and PKCS#11 library.
The second is using a configuration file.
The contents of the file is specified in the PKCS#11 wrapper documentation from Oracle.
Often it is enough to use the default but with some HSM it necessary to define some PKCS#11
attributes for the generated key.
</p>
<p>
All keys to be used has to be generated before the application server is started.
</p>

<subsubsection name="Generated HSM objects">
<p>
EJBCA needs (via the Java PKCS#11 provider) two object on the HSM, which are all generated by the generate commands above:
<ul>
<li>A private key</li>
<li>A certificate - this is simply a holder of the public key used by java, and not the real certificate of a CA</li>
</ul>
</p>
<note>
A java keystore entry has no reference to a publickey pkcs#11 object, just a
private key object and a certificate object, hence the public key object is
not needed after the certificate object has been written to the keystore.
By setting the CKA_TOKEN attribute to false for the public key its object will not be
stored on the HSM. If CKA_TOKEN is true then all public keys will be on
the HSM forever since no public key is deleted when a private key is deleted from
the keystore. So in order not to waste memory on the HSM CKA_TOKEN must be false
for the public key.
</note>
<note>
When generating keys with clientToolBox each private key have the CKA_LABEL
attribute set to the 'alias' of the key prefixed with 'priv-'. But when generating
a key in ejba there will normally not be a CKA_LABEL for the private key.
If you want to have a label even when the key is generated by ejbca you got to
use an attribute file with a CKA_LABEL definition in your configuration.
The value of the attribute is a hexadecimal string starting with "0h". These labels
are normally seen only when you use the native HSM tools to list and manipulate objects.
</note>
<p>
The above example would then include:
</p>
<source>
attributes(*,CKO_PRIVATE_KEY,*) = {
  .
  .
  CKA_LABEL = 0h6b657931
}
</source>
<p>The example above gives the label 'key1' to the private key. You can give any label by simply looking up the hex codes of characters in the ascii table.
</p>
</subsubsection>

<subsubsection name="SUN or IAIK PKCS#11 Provider">
<p>
The IAIK PKCS#11 provider have support for more algorithms than the SUN provider, and therefore you can choose which provider to use.
EJBCA first tries to load the IAIK provider, and if that is not available it uses the SUN provider. The SUN provider is always available in 
JDK 5 and later. To enable the IAIK provider you must do the following:
<ul>
<li>Purchase server licenses for the IAIK PKCS#11 provider and obtain the files. Visit their website for more information.</li>
<li>Copy three jar files to the application servers class path, for JBoss this is usually APPSRV_HOME/server/default/lib. The jar files needed are:
iaikPkcs11Provider.jar, iaikPkcs11Wrapper.jar and iaik_jce.jar.</li>
<li>Copy the PKCS#11 provider shared library to the library search path for your platform. On linux this might be done by copying libpkcs11wrapper.so to /usr/lib.</li>
<li>Start JBoss, EJBCA should now use the IAIK PKCS#11 provider instead of the SUN provider.</li>
</ul>
</p>
</subsubsection>
</subsection>

<subsection name="Utimaco CryptoServer">
<p>
The Utimaco PKCS11 module have a configurable timeout (AppTimeout) that clears all session information if you do not use the keys for some time.
The default time-out is 30 minutes, which may be way too short if your CA is not very very active.
We recommend that you set this timeout to a longer value, several days.
<br/>Put a configuration file in /etc/utimaco/cs2_pkcs11.ini:
</p>
<source>
[Global]
Timeout = 5000
Logging = 0
Logpath = /tmp

[CryptoServer]
Device     = TCP:3001@172.16.175.128
Timeout    = 600000
AppTimeout = 172800
SlotCount  = 100
</source>
<p>
The timeout in this example of 172800 seconds will allow your CA to idle for a long time.
</p>
<p>
When using a PKCS#11 token you should first create keys with the command: $EJBCA_HOME/dist/clientToolBox/ejbcaClientToolBox.sh PKCS11HSMKeyTool generate
</p><p>
Each CA should have its own slot.
</p><p>
Each slot must have been initialized before keys could be generated on the them. This includes setting a user PIN for it. The slot must also require login. Tools for doing this is not provided from EJBCA. The HSM vendor should provide this tool.
</p><p>
Here follows an example on how to initialize a slot and generate keys to be used by EJBCA. The password is user1:
</p>
<source>
./p11tool Slot=1 InitToken=officer1
./p11tool Slot=1 Label=CVCA LoginSO=officer1 InitPin=user1
$EJBCA_HOME/dist/clientToolBox/ejbcaClientToolBox.sh PKCS11HSMKeyTool generate ./libcs2_pkcs11.so 4096 signKey 1
PKCS11 Token [SunPKCS11-libcs2_pkcs11.so-slot1] Password:
Creating certificate with entry signKey.
$EJBCA_HOME/dist/clientToolBox/ejbcaClientToolBox.sh PKCS11HSMKeyTool generate ./libcs2_pkcs11.so 2048 defaultKey 1
PKCS11 Token [SunPKCS11-libcs2_pkcs11.so-slot1] Password:
Creating certificate with entry defaultKey.
$EJBCA_HOME/dist/clientToolBox/ejbcaClientToolBox.sh PKCS11HSMKeyTool generate ./libcs2_pkcs11.so 512 testKey 1
PKCS11 Token [SunPKCS11-libcs2_pkcs11.so-slot1] Password:
Creating certificate with entry testKey.
</source>
<p>You can view the pkcs11 objects created with the command:
</p>
<source>
./p11tool Slot=1 Login=user1 ListObjects
</source>
<p>
This is a example of a property field when creating the CA:
</p>
<source>
defaultKey defaultKey
certSignKey signKey
crlSignKey signKey
testKey testKey
pin user1
sharedLibrary /opt/utimaco/p11/libcs2_pkcs11.so
slotLabelType=SLOT_NUMBER
slotLabelValue=1
</source>
<p>
Utimaco have an emulator for their CryptoServer LAN HSM that can be used for test and development. 
If you have the emulation kit there is a howto in doc/howto/cryptoserver-lan-emulator.txt with steps to follow 
in order to use it with EJBCA.
</p>
<p>
You can check the status of a CryptoServer LAN device, for example the emulator with:
</p>
<source>
./csadm Device=TCP:3001@172.16.175.128 GetState
</source>
<subsubsection name="Import a PKCS#12 file in Utimaco CryptoServer">
<p>Although not recommended it is possible to import keys from a p12 file to CryptoServer. These steps were contributed by Philipp Vogt and Helmut Edlhaimb-Rexeis.
The tools used are a combination of p11tool that ships with Utimaco HSMs and "ejbcaClientToolBox.sh PKCS11HSMKeyTool".
</p>
<ul>
<li>Import the .p12 file with p11Tool from Utimaco (into slot 20 in this example).
<br/>p11tool Slot=22 AuthRSASign=GenPKIAd,:cs2:cyb:/dev/ttyS0 Login=123456 ID=TestCA2XYID ImportP12=mycert.p12,1234 
<br/>It is absolutely necessary to set an unique id (ID=...) at import time.
<br/>The key alias for the imported key is set to "X509 Certificate" (taken from the imported certificate) and cannot be change at import time. 
</li>
<li>Rename the key alias to an unique key alias with "PKCS11HSMKeyTool rename" from ejbcaClientToolbox.
<br/>ejbcaClientToolBox.sh PKCS11HSMKeyTool rename /etc/utimaco/libcs2_pkcs11.so 20 "X509 Certificate" "TestCA2Key" 
<br/>The new key alias is set to the label and the id of the CKO_CERTIFICATE and the id of the CKO_PRIVATE_KEY.
</li>
<li>
Optional: Delete the public key with p11Tool using Label="RSA Public Key".
<br/>p11tool Slot=20 Login=123456 Label="RSA Public Key" DeleteObject
</li>
<li>Test the keys, to make sure they are usable from EJBCA.
<br/>ejbcaClientToolBox.sh PKCS11HSMKeyTool test ./libcs2_pkcs11.so 20 1 
</li>
</ul>
<p>Make sure no other public keys using this label are present in the HSM.
Even if more than one .p12 file needs to be imported only one at a time can be imported and renamed.
The import and the rename process are tied together and cannot be separated.
</p>
</subsubsection>
</subsection>

<subsection name="nCipher nShield/netHSM">
<p>
This subsection describes how the nShield card from nCipher is used.
</p><p>
First the card has to be installed and admin and operator card sets has to be created. This is described in step 1.
</p><p>
Step 2 describes environments variables that must be set before generating keys and installing a new CA.
</p><p>
Step 3-5 describes PKCS#11 keys are generated and how different CAs within an installation is configured to use these keys.
In earlier versions of this manual it was also described how the nCipher JCA provider could be used by EJBCA. This has been removed since PKCS#11 keys are better in every respect.
</p>
<strong>1. Install the nShield card</strong>
<p>
Make sure you have all necessary software and drivers installed and created the user and group nfast. In Linux should the software be installed to /opt/nfast or the location environment variable NFAST_HOME is pointing to.
</p>
<p>
login as the nfast user: 'sudo su nfast'
</p>
<p>
Set the nCipher box to initialization mode by setting the switch to mode 'I'.
</p>
<p>
Clear the nCipher box by pressing the reset button on the device
</p>
<p>
Check that the mode is in 'pre-initialization mode' and not in 'operational':
</p>
<source>
nfast@donny:/home/lars/work$ /opt/nfast/bin/enquiry
Server:
 enquiry reply flags  none
 enquiry reply level  Six
 serial number        41C5-BA04-6D2C
 mode                 operational
 version              2.23.6
 speed index          147
 rec. queue           442..642
 level one flags      Hardware HasTokens
 version string       2.23.6cam5, 2.22.6cam7 built on Apr 25 2005 18:15:46
 checked in           00000000431dca98 Tue Sep  6 18:58:00 2005
 level two flags      none
 max. write size      8192
 level three flags    KeyStorage
 level four flags     OrderlyClearUnit HasRTC HasNVRAM HasNSOPermsCmd ServerHasPollCmds FastPollSlotList HasSEE HasKLF HasShareACL HasFeatureEnable HasFileOp HasLongJobs ServerHasLongJobs AESModuleKeys NTokenCmds LongJobsPreferred
 module type code     0
 product name         nFast server
 device name
 EnquirySix version   4
 impath kx groups
 feature ctrl flags   none
 features enabled     none
 version serial       0
 remote server port   9004

Module #1:
 enquiry reply flags  none
 enquiry reply level  Six
 serial number        41C5-BA04-6D2C
 mode                 pre-initialisation
 version              2.22.6
 speed index          147
 rec. queue           9..152
 level one flags      Hardware HasTokens InitialisationMode PreMaintInitMode
 version string       2.22.6cam7 built on Apr 25 2005 18:15:46
 checked in           00000000426636cd Wed Apr 20 13:02:37 2005
 level two flags      none
 max. write size      8192
 level three flags    KeyStorage
 level four flags     OrderlyClearUnit HasRTC HasNVRAM HasNSOPermsCmd ServerHasPollCmds FastPollSlotList HasSEE HasKLF HasShareACL HasFeatureEnable HasFileOp HasLongJobs ServerHasLongJobs AESModuleKeys NTokenCmds LongJobsPreferred
 module type code     6
 product name         nC1002P/nC3022P
 device name          #1 nFast PCI device, bus 0, slot 13.
 EnquirySix version   5
 impath kx groups     DHPrime1024
 feature ctrl flags   LongTerm
 features enabled     StandardKM
 version serial       24
 rec. LongJobs queue  8
 SEE machine type     gen1AIF
</source>
<p>
Create the security world with the command :
</p>
<source>
$ /opt/nfast/bin/new-world -i -Q 1/1
15:04:50 WARNING: Module #1: preemptively erasing module to see its slots!

Create Security World:
 Module 1: 0 cards of 1 written
 Module 1 slot 0: empty
 Module 1 slot 0: unknown card
 Module 1 slot 0:- passphrase specified - overwriting card
Card writing complete.

security world generated on module #0; hknso = 6807e0b031c4f797b739ec33ca7dba05279cf54f
$
</source>
<p>
The '-Q K/N' option tells how many administration cards that are created N. K of these cards will be needed to restore a module with a backup of the security world.
'1/1' is a bad choice in production but will do in this example. Choose K>=3 and N>K in production.
</p>
<p>
Change mode on the switch on the device to mode 'O'.
</p>
<p>
Press the 'Clear' button again.
</p>
<p>
Check with 'enquiry' that the mode have changed to 'Operational'
</p>
<p>
Example on creation of operator cards:
</p>
<source>
$ /opt/nfast/bin/createocs -m 1 -Q 2/3 -N ejbca -M -p -T 0

Creating Cardset:
 Module 1: 0 cards of 3 written
 Module 1 slot 0: Admin Card #1
 Module 1 slot 0: empty
 Module 1 slot 0: blank card
 Module 1 slot 0:- passphrase specified - writing card (naming `EJBCA card 1')
 Module 1: 1 card of 3 written
 Module 1 slot 0: remove already-written card #1
 Module 1 slot 0: empty
 Module 1 slot 0: blank card
 Module 1 slot 0:- passphrase specified - writing card (naming `EJBCA card 2')
 Module 1: 2 cards of 3 written
 Module 1 slot 0: remove already-written card #2
 Module 1 slot 0: empty
 Module 1 slot 0: blank card
New passphrases do not match; please try again.
 Module 1 slot 0:- passphrase specified - writing card (naming `EJBCA card 3')
Card writing complete.

cardset created; hkltu = 8d30f2ab5bdccacd8a4333aefed2c0ea1ff0e6db
$
</source>
<p>
This will generate 3 cards of the card set named 'ejbca'. Any 2 of these cards will be needed when generating keys and starting ejbca. Different card sets could be used for different CAs.
</p>
<note>
The preload command (see below) must always be called as the same user unless the directory /opt/nfast/kmdata/preload is removed.
<br/>If you get a "HostDataAccessDenied" error when running preload or starting JBoss, it is because the
file permissions on the directory /opt/nfast/kmdata/preload is wrong. It's probably because you (sometime) ran 
preload as another user, such as root or nfast.
</note>
<p>
Load the card set so that keys protected by the card set could be generated:
</p>
<source>
$ /opt/nfast/bin/preload -c ejbca pause
Loading cardsets:
ejbca on modules 1

Loading `ejbca':
 Module 1 slot 0: `ejbca' #3 (`EJBCA card 3')
 Module 1 slot 0:- passphrase supplied - reading card
 Module 1 slot 0: `ejbca' #3 (`EJBCA card 3'): already read
 Module 1 slot 0: empty
 Module 1 slot 0: `ejbca' #2 (`EJBCA card 2')
 Module 1 slot 0:- passphrase supplied - reading card
Card reading complete.

Loading complete; now pausing
</source>
<strong>Step 2. Setup the environment.</strong>
<p>
Login as the user that is running the application server. This user must be a member of the nfast group. 
<br/>
The following environment variables should be set for this user:
<ul>
<li>JAVA_HOME (/usr/local/jdk1.6.0_16 or similar)</li>
<li>APPSRV_HOME (/home/jboss/jboss-5.1.0.GA or similar)</li>
<li>EJBCA_HOME (/home/jboss/ejbca or similar)</li>
<li>NFAST_HOME (/opt/nfast)</li>
</ul>
</p>

<strong>Step 3. Create PKCS#11 keys that should be used on the nShield card</strong>
<p>
Start a new window and login as the same user (jboss user).
</p>
<note>
An ECC key could not be used with preload (at least not the curve secp160r1). Such a key is generated OK and could be used as long as the current preload is running. But if all preload processes are stopped and then if then preload is restarted the key could not be used. This means that ECC could only be used with a 1/n OCS.
</note>
<p>
Now 3 keys protected by the key set 'ejbca' are created like this:
</p>
<source>
$ ~nfast/bin/preload -c ejbca $EJBCA_HOME/dist/clientToolBox/ejbcaClientToolBox.sh PKCS11HSMKeyTool generate /opt/nfast/toolkits/pkcs11/libcknfast.so 4096 defaultRoot i1
Executing ejbcaClientToolBox.sh PKCS11HSMKeyTool generate /opt/nfast/toolkits/pkcs11/libcknfast.so 4096 defaultRoot i1
PKCS11 Token [SunPKCS11-NFastJava] Password: 
Creating certificate with entry default.

$ ~nfast/bin/preload -c ejbca $EJBCA_HOME/dist/clientToolBox/ejbcaClientToolBox.sh PKCS11HSMKeyTool generate /opt/nfast/toolkits/pkcs11/libcknfast.so 2048 cryptRoot i1
Loaded pkcs11 uc17cfc7c330e613af5709789ff823a476177e233c-d165e440baa8dc9963780c682836ba17513e8cbf key (RSAPrivate) on modules 1
Executing ejbcaClientToolBox.sh PKCS11HSMKeyTool generate /opt/nfast/toolkits/pkcs11/libcknfast.so 2048 cryptRoot i1
PKCS11 Token [SunPKCS11-NFastJava] Password: 
Creating certificate with entry crypt.

$ ~nfast/bin/preload -c ejbca $EJBCA_HOME/dist/clientToolBox/ejbcaClientToolBox.sh PKCS11HSMKeyTool generate /opt/nfast/toolkits/pkcs11/libcknfast.so 1024 test i1
Loaded pkcs11 uc17cfc7c330e613af5709789ff823a476177e233c-27cfdae84bf4298f2dde83cd00980a81bcf095bf key (RSAPrivate) on modules 1
Executing ejbcaClientToolBox.sh PKCS11HSMKeyTool generate /opt/nfast/toolkits/pkcs11/libcknfast.so 1024 test i1
PKCS11 Token [SunPKCS11-NFastJava] Password: 
Creating certificate with entry test.
</source>
<strong>Step 4. Start EJBCA with nShield HSM</strong>
<p>
To start EJBCA, preload must be running with the required key stores loaded. In this example this was done in step 2. Preload is now used to start jboss:
</p>
<source>
$ ~nfast/bin/preload -c ejbca $APPSRV_HOME/bin/run.sh
</source>
<strong>Step 5. Create a new CA in the web GUI of EJBCA</strong>
<p>
Choose PKCS#11 as "CA Token Type".
</p><p>
Properties are defined according to the "Generic PKCS#11 provider" section above.
</p><p>
All preloaded operator card sets (OCSs) has it's own slot. It is not possible to predict the slot ID. But the index of the slot in the slot list is predictable. "slotListIndex" must therefore be used. If only one OCS is preloaded this index is always 1.
</p><p>
If several CAs is sharing same OCS (and hence slot) each key (identified by a key label) may only be used for one CA but the test key. Same test key could be used for all CAs.
</p><p>
Example with previous generated keys where signRoot is used for CAs signing, and defaultRoot is used for everything else (encryption):
</p><p>
When preload is used no authentication code is needed to activate a CA. You could give any value for the authentication code when activating.
The 'pin' property could be used in the configuration to automatically activate a CA. The value of this property could be anything.
</p>
<source>
defaultKey defaultRoot
testKey test
keyEncryptKey cryptRoot
hardTokenEncrypt cryptRoot
pin dummy
slotLabelType SLOT_INDEX
slotLabelValue 1
sharedLibrary /opt/nfast/toolkits/pkcs11/libcknfast.so
</source>
<strong>Using module protected keys</strong>
<p>
Module protected keys do not need an operator card set. Hence no PIN code is needed to active such a key. A CA could be configured to use a keystore with module protected keys.
</p><p>
When using PKCS#11 slot 0 is used to indicate module protection. The only other thing except using slot 0 you have to do is to use a configuration file when creating the key. The file could look like this:
</p>
<source>
name=NFastJava
library=/opt/nfast/toolkits/pkcs11/libcknfast.so
slotListIndex=0
attributes(*,CKO_PUBLIC_KEY,*) = {
  CKA_TOKEN = false
}
attributes(*,CKO_PRIVATE_KEY,*) = {
  CKA_TOKEN = true
  CKA_PRIVATE = false
  CKA_SIGN = true
  CKA_DECRYPT = true
}
disabledMechanisms = {
  CKM_SHA1_RSA_PKCS
  CKM_SHA256_RSA_PKCS
  CKM_SHA384_RSA_PKCS
  CKM_SHA512_RSA_PKCS
  CKM_MD2_RSA_PKCS
  CKM_MD5_RSA_PKCS
  CKM_DSA_SHA1
  CKM_ECDSA_SHA1
}
</source>
<strong>Not using preload.</strong>
<p>
If a 1/N card set is used then preload don't have to be used (but it can be used). If preload is not used then jboss could be made to start automatically
at boot time.
</p><p>
For PKCS#11 simple do not use the preload command. The authentication code is now needed when activating the CA.
</p>
<strong>Using more than one OCS.</strong>
<p>
It is also possible to use more than one OCS. This is needed when you want different CAs protected by different OCSs.
</p>
<p>
The key to get this working is to set the environment variable <strong>CKNFAST_LOADSHARING=1</strong>. This environment variable is also implicitly set when running with preload.
</p>
<p>
To get a list of all available slots do:
</p>
<source>
$ CKNFAST_LOADSHARING=1 ~nfast/bin/ckinfo
PKCS#11 library CK_INFO
       interface version 2.01
                   flags 0
          manufacturerID "nCipher Corp. Ltd               "
      libraryDescription "nCipher PKCS#11 1.58.48         "
  implementation version 1.58

slots[0] CK_SLOT_INFO
         slotDescription "                                                                "
          manufacturerID "nCipher Corp. Ltd               "
                   flags 5
                   flags &amp; CKF_TOKEN_PRESENT
                   flags &amp; CKF_HW_SLOT
        hardware version 0.00
        firmware version 0.00


slots[0] CK_TOKEN_INFO
                   label "loadshared accelerator          "
          manufacturerID "nCipher Corp. Ltd               "
                   model "                "
            serialNumber "                "
                   flags 201
                   flags &amp; CKF_RNG
                   flags &amp; CKF_DUAL_CRYPTO_OPERATIONS
       ulMaxSessionCount 1024
     ulMaxRwSessionCount 1024
             ulMaxPinLen 18446744073709551615
             ulMinPinLen 0
     ulTotalPublicMemory CK_UNAVAILABLE_INFORMATION
      ulFreePublicMemory CK_UNAVAILABLE_INFORMATION
    ulTotalPrivateMemory CK_UNAVAILABLE_INFORMATION
     ulFreePrivateMemory CK_UNAVAILABLE_INFORMATION
        hardware version 0.00
        firmware version 0.00
                 utcTime "                "

slots[1] CK_SLOT_INFO
         slotDescription "1of2_0                                                          "
          manufacturerID "nCipher Corp. Ltd               "
                   flags 6
                   flags &amp; CKF_REMOVABLE_DEVICE
                   flags &amp; CKF_HW_SLOT
        hardware version 0.00
        firmware version 0.00


slots[1] Token not present
slots[2] CK_SLOT_INFO
         slotDescription "2of3_0                                                          "
          manufacturerID "nCipher Corp. Ltd               "
                   flags 6
                   flags &amp; CKF_REMOVABLE_DEVICE
                   flags &amp; CKF_HW_SLOT
        hardware version 0.00
        firmware version 0.00


slots[2] Token not present
slots[3] CK_SLOT_INFO
         slotDescription "ejbca                                                           "
          manufacturerID "nCipher Corp. Ltd               "
                   flags 6
                   flags &amp; CKF_REMOVABLE_DEVICE
                   flags &amp; CKF_HW_SLOT
        hardware version 0.00
        firmware version 0.00


slots[3] Token not present
slots[4] CK_SLOT_INFO
         slotDescription "2of3_1                                                          "
          manufacturerID "nCipher Corp. Ltd               "
                   flags 6
                   flags &amp; CKF_REMOVABLE_DEVICE
                   flags &amp; CKF_HW_SLOT
        hardware version 0.00
        firmware version 0.00


slots[4] Token not present
slots[5] CK_SLOT_INFO
         slotDescription "1of2_1                                                          "
          manufacturerID "nCipher Corp. Ltd               "
                   flags 7
                   flags &amp; CKF_TOKEN_PRESENT
                   flags &amp; CKF_REMOVABLE_DEVICE
                   flags &amp; CKF_HW_SLOT
        hardware version 0.00
        firmware version 0.00


slots[5] CK_TOKEN_INFO
                   label "1of2_1                          "
          manufacturerID "nCipher Corp. Ltd               "
                   model "                "
            serialNumber "ee6071c52a77370c"
                   flags 20D
                   flags &amp; CKF_RNG
                   flags &amp; CKF_LOGIN_REQUIRED
                   flags &amp; CKF_USER_PIN_INITIALIZED
                   flags &amp; CKF_DUAL_CRYPTO_OPERATIONS
       ulMaxSessionCount 1024
     ulMaxRwSessionCount 1024
             ulMaxPinLen 18446744073709551615
             ulMinPinLen 0
     ulTotalPublicMemory CK_UNAVAILABLE_INFORMATION
      ulFreePublicMemory CK_UNAVAILABLE_INFORMATION
    ulTotalPrivateMemory CK_UNAVAILABLE_INFORMATION
     ulFreePrivateMemory CK_UNAVAILABLE_INFORMATION
        hardware version 0.00
        firmware version 0.00
                 utcTime "                "
</source><p>
You then got to identify your OCSs with the slot index. The "label" in the list gives the name you gave to your OCS when creating it. Then you get the slot list index from the x in "slot[x]. Use this for "slotListIndex" in the CA properties.
</p><p>
When using a 1/n OCS one card of the OCS must be inserted when activating a CA. If the OCS is persistent then the card could be removed and you could then activate another CA by inserting its OCS.
</p><p>
To make the OCS persistent use the "-p" argument at "createocs" time, if this is not the case as soon as the card is removed then the cardset will unload itself.
</p><p>
When using k/n OCS where k>1 you got to load all OCSs to be used with preload and then start the application server also with preload. Example:
</p><source>
$ ~nfast/bin/preload -c 2of3_0 pause
-- follow instruction to insert cards and enter pins. --
-- then press ctr-z --
$ bg 
$ ~nfast/bin/preload -c 2of3_1 exit
-- follow instruction to insert cards and enter pins. --
</source><p>
When the application server then is started with preload, CAs defined for slot list index 2 and 4 could be activated. When activating a CA when running preload no PIN has to be given. Also when the application server is started with preload then only CAs of preloaded slots could be activated (not preloaded 1/n slots could not be used).
</p>
</subsection>
<subsection name="nCipher load balancing">
<p>
If you want to use the Loadsharing with multiple modules, be it PCI 
cards of NetHSM's then you must ensure you have a 1/N OCS and the N 
quorum to be able to have enough cards to be inserted in every HSM you 
want to load balance the key at server/CA start up when logging in.
</p><p>
Same security world got to be loaded in all modules participating.
</p><p>
After setting up the first netHSM, do the following on the second:
<ul>
<li>Use the panel of the second netHSM to configure the rfs</li>
<li>Use the panel of the second netHSM to load the security world</li>
<li>Use the panel of the second netHSM to configure clients</li>
<li>on each client run: /opt/nfast/bin/nethsmenroll</li> 
</ul>
</p><p>
With load balancing you need to have CKNFAST_LOADSHARING=1. Preload implicitly sets CKNFAST_LOADSHARING.
</p><note>
If preload is used fail-over to the other HSM if one of the HSMs is broken is not working.
</note><p>
Example of starting jboss:
</p><source>
ejbca@host:/usr/local/ejbca> CKNFAST_LOADSHARING=1 ../jboss/bin/run.sh
</source><p>
When activating a CA you need a smart card from the OCS of the corresponding slot inserted in both HSMs. The OCS got to be 1/n since preload can not be used.
</p>
<p>Sample catoken.properties for generating the initial AdminCA on the netHSM.</p>
<source>
defaultKey defaultKey
certSignKey defaultSign
crlSignKey defaultSign
testKey testKey
sharedLibrary /opt/nfast/toolkits/pkcs11/libcknfast.so
slotLabelType=SLOT_INDEX
slotLabelValue 1
</source>
</subsection>

<subsection name="AEP Keyper">
<p>
The document xxxxxxKeyperInstallation.pdf (xxxxxx is six digits) in the KeyPer UserGuides describes how the HSM is installed, the details start in section 3.5 (Configuring the Keyper HSM for the first time).
As default there is only one slot - 0. The document xxxxxxKeyperP11.pdf describes the PKCS#11 interface in details.
</p>
</subsection>

<subsection name="ARX CoSign">
<p>
This HSM only works on Windows. The installation is done with an installer and the setup with a GUI.
</p><p>
All generated keys will be on slot 1. The PIN code used when activating the keys could be anything since the authentication is made when login on to the user that runs EJBCA.
The shared library is called C:\windows\system32\sadaptor.dll 
</p>
</subsection>

<subsection name="Bull Trustway Proteccio">
<p>
The "Installation and User's Guide" describes how the HSM is installed and how how PKCS#11 tokens are created and how a backup of a token is done. But it might be helpful to mention some additional things:
</p>
<ol>
<li>A virtual HSM correspond to a PKCS#11 token.</li>
<li>The number of the virtual HSM corresponds to the PKCS#11 slot ID of the token.</li>
<li>The PKCS#11 user PIN is the "PKCS#11 application authentication" in the "Personalizing a virtual HSM" step.</li>
<li>If "CIK startup mode" is selected for the virtual HSM personalization you must start the HSM manually before EJBCA can use it.</li>
<li>Make sure that backup-restore work before taken the HSM in production since the first versions did not backup the certificate of a key which is needed by the java wrapper.</li>
</ol>
</subsection>
<subsection name="Bull Trustway PCI Crypto Card">
<p>
This is an old HSM. New installations will probably use <a href="#Bull Trustway Proteccio">Proteccio</a>.
</p>
<p>
Do the installation of the card according to Install_and_Use_cc2000.pdf. When the card is "installed" it is ready to use with EJBCA. Only one slot (slot index 0) is available. The slot is not protected by any PIN so an undefined 'pin' (empty) property may be used in the configuration.
</p><p>
When using PKCS11HSMKeyTool and starting EJBCA, libcc2000_tok.so and libgpkcs11cc2000.so must be in the library path. Examples:
</p>
<source>
lars@maud:~/work/test/ca$ ls -al ../../bullInstall/linux
total 412
dr-xr-xr-x 4 lars lars   4096 28 nov 14.28 .
drwxr-xr-x 4 lars lars   4096 20 apr 21.05 ..
dr-xr-xr-x 6 lars lars   4096 20 apr 21.38 CardAdmin_java
-r-xr-xr-x 1 lars lars  35804 28 nov 14.15 cc2000_lx24.tgz
-r-xr-xr-x 1 lars lars  74955 28 nov 14.15 cc2000_src.tgz
-r-xr-xr-x 1 lars lars     14 28 nov 14.15 cc2000S_release
-r-xr-xr-x 1 lars lars    633 28 nov 14.15 desinstall
-r-xr-xr-x 1 lars lars    171 28 nov 14.15 gpkcs11cc2000.rc
dr-xr-xr-x 2 lars lars   4096 28 nov 14.28 include
-r-xr-xr-x 1 lars lars   7209 28 nov 14.15 install
-r-xr-xr-x 1 lars lars 101788 28 nov 14.15 libcc2000_tok.so
-r-xr-xr-x 1 lars lars 146820 28 nov 14.15 libgpkcs11cc2000.so
-r-xr-xr-x 1 lars lars   3843 28 nov 14.15 LisezMoi.txt
-r-xr-xr-x 1 lars lars   3410 28 nov 14.15 ReadMe.txt
lars@maud:~/work/test/ca$ LD_LIBRARY_PATH=../../bullInstall/linux ../../java/jboss/bin/run.sh
</source>
<source>
$ LD_LIBRARY_PATH=~/work/bullInstall/linux $EJBCA/dist/clientToolBox/ejbcaClientToolBox.sh PKCS11HSMKeyTool generate ../../bullInstall/linux/libgpkcs11cc2000.so 2048 defaultkey i0
</source>
</subsection>

<subsection name="SafeNet Luna">
<subsubsection name="Install HW and SW">
<p>
Please consult the SafeNet documentation regarding the installation of HW and SW.
</p>
</subsubsection>
<subsubsection name="Configuration">
<p>
Do all steps (1-7 in the section) in "A - Configuration (Setup Appliance after Installing)" of in the html document "Luna SA Online Help -- Document # 800274-xxx" that should be found on your installation CD.
Some notes about our test setup:
</p><p>
<strong>Step 3:</strong> You may do nothing here. But note that changing many of the policies will reset the HSM. This means that you can't change any of these policies later on.
</p><p>
<strong>Step 4:</strong> Note that a new partition could be added at any time. Each partition will be represented as a PKCS#11 slot. Make sure to write the Record Partition Client Password (TP) in a text file. In the example the password is btqx-EFGH-3456-7/K9 for the first created partition (slot 1). The TP will later be used as PIN for the slot. 
</p><p>
<strong>Step 5:</strong> A good idea is to allow partitions (p11 slots) to be "activated". If a partition is not activated you got to insert the black key in the PED and give PIN each time a resource in the HSM is used by the client. So in most cases you want to be able to activate a partition:
lunash:>partition changePolicy -partition partition1 -policy 22 -value 1
</p><p>
<strong>Step 6:</strong>
You don't have to be in the '/usr/LunaSA/bin' directory as the documentation says. We think it is preferable to be in a directory owned by yourself so you don't have to use sudo.
Example of running in your own directory:
</p><source>
$ /usr/lunasa/bin/ctp admin@lunasa.int.primekey.se:server.pem .
</source><p>
Example of occasions when sudo must be used is registration of server and adding client certificates (root owned files and directories are used and updated):
</p><source>
$ sudo /usr/lunasa/bin/vtl addServer -n lunasa.int.primekey.se -c server.pem
$ sudo /usr/lunasa/bin/vtl createCert -n milton
</source><p>
<strong>Step 7:</strong>
Each partition assigned to a client will be represented by a PKCS#11 slot for this client. It seems that each new added partition will be put last in the slot list and the number of a slot will be slot list index plus 1 (list index starting with 0 and slot number starting with 1).
To get the partition slot mapping on the client do:
</p><source>
$ /usr/lunasa/bin/vtl verify

The following Luna SA Slots/Partitions were found: 

Slot    Serial #        Label
====    ========        =====
 1      950784001       partition1
 2      950784002       partition2
</source><p>
Now the client may use these slot with EJBCA and it's tools
</p>
</subsubsection>
<subsubsection name="Activating slots">
<p>
Before a partition (slot) could be used by a client it must be activated. This is described in 'B - Administration &amp; Maintenance  > Activating and AutoActivating Partitions'. The partition policy required do the activation must have been set (see step5 above). Example to activate a partition:
</p><source>
lunash:>hsm login
lunash:>partition activate -partition partition1 -password btqx-EFGH-3456-7/K9
</source><p>
The password is from the configuration step 4. See above.
</p>
</subsubsection>
<subsubsection name="Generate keys on a slot">
<source>
$ ./ejbcaClientToolBox.sh PKCS11HSMKeyTool generate /usr/lunasa/lib/libCryptoki2_64.so 2048 rsa2048_1 1
0    [main] INFO  org.ejbca.util.keystore.KeyTools  - Using SUN PKCS11 provider: sun.security.pkcs11.SunPKCS11
PKCS11 Token [SunPKCS11-Luna] Password: 
Created certificate with entry rsa2048_1.
$ ./ejbcaClientToolBox.sh PKCS11HSMKeyTool generate /usr/lunasa/lib/libCryptoki2_64.so secp160r1 secp160r1_1 1
0    [main] INFO  org.ejbca.util.keystore.KeyTools  - Using SUN PKCS11 provider: sun.security.pkcs11.SunPKCS11
PKCS11 Token [SunPKCS11-Luna] Password: 
Created certificate with entry secp160r1_1.
</source><p>
The password btqx-EFGH-3456-7/K9 (see above) is used.
</p>
</subsubsection>
<subsubsection name="List and test all keys that could be used by EJBCA">
<source>
$ ./ejbcaClientToolBox.sh PKCS11HSMKeyTool test /usr/lunasa/lib/libCryptoki2_64.so 1
Test of keystore with ID 1.
0    [main] INFO  org.ejbca.util.keystore.KeyTools  - Using SUN PKCS11 provider: sun.security.pkcs11.SunPKCS11
PKCS11 Token [SunPKCS11-libCryptoki2_64.so-slot2] Password: 

Testing of key: rsa2048_1
SunJCE version 1.7SunPKCS11-libCryptoki2_64.so-slot2 version 1.7; modulus length: 2048; byte length 245. The docoded byte string is equal to the original!
Signature test of key rsa2048_1: signature length 256; first byte 28; verifying true
Key statistics. 
Signings per second: 369; Decryptions per second: 135

Testing of key: secp160r1_1
Signature test of key secp160r1_1: signature length 48; first byte 30; verifying true
Key statistics. 
Signings per second: 68 No crypto available for this key.
</source>
</subsubsection>
<subsubsection name="Sample Hard Token Properties">
<p>This is a sample configuration of the Hard Token Properties for PKCS#11 token when creating a new CA.</p>
<source>
sharedLibrary=/usr/lunasa/lib/libCryptoki2_64.so
slotLabelType=SLOT_NUMBER
slotLabelValue=1
certSignKey=myECCKey
crlSignKey=myECCKey
defaultKey=default
</source>
</subsubsection>
<subsubsection name="Some useful Luna commands">
<p>Here are some useful native Luna cmu commands.
</p><p> 
List objects and their handles:
</p>
<source>
./cmu list -display=index,handle,class,keyType,label
</source>
<p>
If you have created keys with native commands, or imported keys, there is probably no certificate object as required by Java PKCS#11 provider.
Create a self signed certificate referencing the private handle:
</p>
<source>
./cmu selfSign -privatehandle=87 -CN="caSign00001" -startDate=20020101
-endDate=20451231 -serialNum=0133337f
</source>
<p>
Notice that they will have to replace 87 with the handle of the private
key they found when running the list command.
</p>
</subsubsection>
</subsection>

<subsection name="SafeNet ProtectServer">
<subsubsection name="install SW">
<p>Install the software according to the installation instructions for the ProtectServer. 
Below are sample commands for installing the SDK rpm on an Ubuntu system, wich means first converting it to a deb.</p>
<p>Using the SDK you can use the SDK as a good emulator for testing and development.
If you are installing with a real ProtectServer you should install the Runtime instead of the SDK. When using the SDK you may use 
/opt/ETcpsdk/lib/linux-x86_64 instead of /opt/PTK/lib
</p>  
<source>
fakeroot alien -c $CDROM/Linux64/ptkc_sdk/ETcpsdk-3.32.00-1.x86_64.rpm
sudo dpkg -i ./etcpsdk_3.32.00-2_amd64.deb
</source>
</subsubsection>
<subsubsection name="Set passwords for admin SO och admin user">
<source>
LD_LIBRARY_PATH=/opt/PTK/lib /opt/PTK/bin/ctconf
</source>
</subsubsection>
# skapa 10 slottar
<subsubsection name="create 10 slots">
<source>
LD_LIBRARY_PATH=/opt/PTK/lib /opt/PTK/bin/ctconf -c10
</source>
</subsubsection>
<subsubsection name="Set no public crypto">
<p>See "Programming in FIPS mode" in the Protect Toolkit-C Programmers Manual for information about this flag.</p>
<source>
LD_LIBRARY_PATH=/opt/PTK/lib /opt/PTK/bin/ctconf -fc
</source>
</subsubsection>
<subsubsection name="Initialize slot 5. Sets SO and user password">
<source>
LD_LIBRARY_PATH=/opt/PTK/lib /opt/PTK/bin/ctkmu t -s5 -lroot
</source>
</subsubsection>
<subsubsection name="Generate keys on slot 5">
<source>
./ejbcaClientToolBox.sh PKCS11HSMKeyTool generate /opt/PTK/lib/libcryptoki.so 2048 defaultSign 5
./ejbcaClientToolBox.sh PKCS11HSMKeyTool generate /opt/PTK/lib/libcryptoki.so 2048 default 5
./ejbcaClientToolBox.sh PKCS11HSMKeyTool generate /opt/PTK/lib/libcryptoki.so 512 test 5
</source>
<p>If JBoss was started you have to restart JBoss before the keys becomes available in EJBCA.</p>
</subsubsection>
<subsubsection name="Contents of CA Token Properties">
<p>When you create the CA in EJBCA you can now use the simple CA token properties below.</p>
<source>
certSignKey defaultSign
crlSignKey defaultSign
defaultKey default
testKey test
sharedLibrary=/opt/PTK/lib/libcryptoki.so
slotLabelType=SLOT_NUMBER
slotLabelValue=5
</source>
</subsubsection>
<subsubsection name="Test and list keys on slot 5">
<source>
./ejbcaClientToolBox.sh PKCS11HSMKeyTool test /opt/PTK/lib/libcryptoki.so 5
...
Testing of key: test
SunJCE version 1.7SunPKCS11-libcryptoki.so-slot3 version 1.7; modulus length: 2048; byte length 53. The docoded byte string is equal to the original!
SunPKCS11-libcryptoki.so-slot3 RSA private key, 512 bits (id 4, token object, sensitive, extractable)
Signature test of key test1: signature length 64; first byte 3d; verifying true
Signings per second: 257
Decryptions per second: 260
</source>
<p>The attributes are listed as "token object, sensitive, extractable", and here is important that is says 'sensitive' (extractable only means that the key can be backed up securely using SafeNet tools).
</p>
</subsubsection>
<subsubsection name="Backup and restore">
<p>
When you have tested that all keys are working you should back them up. Read about how this is done in the ProtectServer documentation.
Then clear the slot that you has just backed up:
</p>
<source>
ctkmu -s &lt;slot nr&gt; t
</source>
<p>
Then restore the backup according to the ProtectServer documentation and run the clientToolBox test as above. Now when you now that the keys of the slot could be restored from the backup medium you should set the attributes of them so that they could not be extracted from the HSM by any means. Unfortunate this could not be done with the ctkmu CLI tool since the private key got no label. Use the GUI 'kmu' instead. For each key do:
</p>
<ol>
<li>Select the token and login to it.</li>
<li>Double click on the private key that you want to protect.</li>
<li>Uncheck the 'Exportable' box and press OK</li>
<li>Verify that the 'Exportable' and the 'Extractable' boxes are unchecked and can't be changed</li>
<li>Verify that the 'Private' and the 'Sensitive' boxes are checked and can't be changed</li>
</ol>
<p>
Now it should be impossible to do any backup of the key. If you got a key ceremony protocol it could be a good idea to note that keys was made "unexportable". Also note that the 'Exportable' attribute has to be unchecked each time the backup is restored.
</p>
</subsubsection>
<note>
The emulator has an annoying feature (only emulator not real HSM). Each key of same length that are generated is the same, because the seed for the random number generator is static. 
This means that a slot may only have one key. If a second key is generated for a slot the certificate object for the first key is deleted before writing the certificate object for the new key. This is done since the Sun p11 wrapper provider does not allow two keys that are equal to be present in a keystore.
To fix this you should set the environment variable ET_PTKC_SW_AUTOSEEDRNG=true.
</note>
<subsubsection name="Generating keys using ProtectServer tools">
<p>
You can also generate keys, and the needed self signed certificate, using the SafeNet tools delivered with the HSM. This is for example suitable when you want
to generate ECC keys with curves not supported by JDK (although you may still have to patch the JDK in order to use them anyhow).
</p>
<p>
For example, the below commands generates an ECC key with curve P-256 on slot 1, storing it on the HSM with alias 'foo', assigning a selfsigned certificate to it and finally listing the object of slot 1.
</p>
<source>
cd /opt/ETCprt/bin/linux-x86-64
./ctkmu c -tec -nfoo -aPSVXxTRD -s1 -CP-256
./ctcert c -s1 -lfoo
./ctkmu l -s1
</source>
<p>Or you can wrap it all up in a single command...</p>
<source>
./ctcert c -k -lfoo -tec -s1 -CP-256 -d30y
</source>
<p>If JBoss was started you have to restart JBoss before the keys becomes available in EJBCA.</p>
</subsubsection>

</subsection>

<subsection name="Support for new HSMs">
<p>
EJBCA uses PKCS#11 so in theory can support any HSMs that provide a decent PKCS#11 implementation.
If the HSM is peculiar you may have to provide specific attribute parameters as descibed for an 'attributesFile' above.
</p>
</subsection>

<subsection name="Using SHA256WithRSAandMGF1 (RSASSA-PSS)">
<p>Out of the box in Java PKCS#11 RSASSA-PSS is not supported. The software in EJBCA supports it, but the Java PKCS#11 provider does not.</p>
<p>
At the time of writing, Oracle Java does not have support for SHA256WithRSAandMGF1 (also known as RSASSA-PSS) in the PKCS#11 provider. 
PrimeKey has made a patch which is waiting for approval in the OpenJDK. 
You can get a compiled patch together with an installation script for Debian-based operating systems from <a href="http://www.primekey.se/">PrimeKey</a>. 
</p>
<p>This issue is registered in the EJBCA issue tracker as <a href="http://jira.primekey.se/browse/ECA-2014">ECA-2014</a>.</p>
<p>The patch should work on all HSMs that have support for SHA56WithRSAandMGF1.
</p><p>With the patch applied you can create CAs using HSMs with the SHA256WithRSAandMGF1 (and SHA384 and SHA512) algorithm.
</p>
</subsection>

</section>

<section name="ECDSA keys and signatures">
<p>
EJBCA support ECDSA signature keys in addition to RSA. You can create a CA using ECDSA keys both using the admin-GUI 
and using the cli (bin/ejbca.sh ca init).
</p>
<subsection name="Generated keys and certificate">
<p>
When generating a CA in EJBCA up to three keys and certificates are generated:
<ul>
<li>A CA signing keypair and certificate</li>
<li>An encryption keypair, used for encrypting keyrecovery information</li>
<li>An OCSP signer keypair and certificate</li>
</ul>
When using ECDSA keys, the CA signing keypair and the OCSP signer keypair will be the ECDSA keytype you select when creating the CA.
The CA signing and OCSP signing certificate will be signed using your selected signature algorithm.
<br/>
The encryption keypair will always be RSA, using 1024 or 2048 bit key length. It uses the key length set in the admin-GUI or 2048 bit by default using the cli. A dummy encryption certificate will be created using SHA1WithRSA.
</p>
</subsection>
<subsection name="Using ECDSA with an HSM">
<p>
See the section about HSM property parameters to see which keys can be of different sorts. 
Note that the keyEncryptKey can not be ECDSA, but should be an RSA key. Your HSM must support both ECDSA and RSA keys. 
You can use PKCS11HSMKeyTool from the clientToolBox to generate keys and certificate requests from an HSM.
</p>
<p>
PrimeKey has made a patches for the java issues with ECDSA. These patches are waiting for approval in the OpenJDK 7. 
You can get a compiled patch together with an installation script for Linux operating systems (can be adapted for Windows as well) from <a href="http://www.primekey.se/">PrimeKey</a>. 
</p>
  <subsubsection name="Sun Java PKCS#11 ECC key issue (fixed in recent JDKs)">
  <p>If you are using an very old version of Java/JDK, and the clientToolBox tool in EJBCA to generate ECC keys in an HSM using the PKCS#11 interface you are likely
  to stumble on a bug in the JDK which prevents reading of the public key from the HSM. The clientToolBox tool needs to read the public key,
  generate a "dummy" certificate and assign that to the key label, so we have a public key certificate in the keystore retrieved from 
  the Sun PKCS#11 provider.
  </p><p>This bug is present at least up to and including Oracle JDK 1.6u23. A fix has been merged though and is available in new releases of OpenJDK and Oracle JDK.</p>
  <p>You can look at this issue in the EJBCA Jira for a solution to the problem: <a href="http://jira.primekey.se/browse/ECA-940">ECA-940</a>
  </p>
  </subsubsection>
  
  <subsubsection name="Using named Brainpool curves in Java PKCS#11">
  <p>
  At the time of writing, Oracle Java does not have named curve definitions for the Brainpool curves. 
  PrimeKey has made a patch which is waiting for approval in the OpenJDK 7. 
  You can get a compiled patch together with an installation script for Debian-based operating systems from <a href="http://www.primekey.se/">PrimeKey</a>. 
  </p>
  <p>This issue is registered in the EJBCA Jira as <a href="http://jira.primekey.se/browse/ECA-2012">ECA-2012</a>.</p>
  <p>The patch should work on all HSMs that have <i>named curve support</i> for Brainpool. It has been tested on SafeNet Luna SA and Utimaco CryptoServer. SafeNet ProtectServer supports Brainpool but not using named curves, see below for brainpool support on ProtectServer using custom domain parameters.</p>
  <p>With the patch applied you can create and use CAs with brainpool curves in the HSM. Example clientToolBox commands to generate a key:</p>
  <source>
./ejbcaClientToolBox.sh PKCS11HSMKeyTool generate /usr/lunasa/lib/libCryptoki2_64.so brainpoolP160r1 keyAliasBp160 1
./ejbcaClientToolBox.sh PKCS11HSMKeyTool test /usr/lunasa/lib/libCryptoki2_64.so 1

./ejbcaClientToolBox.sh PKCS11HSMKeyTool generate /etc/utimaco/libcs2_pkcs11.so brainpoolP160r1 keyAliasBp160 1
./ejbcaClientToolBox.sh PKCS11HSMKeyTool test /etc/utimaco/libcs2_pkcs11.so 1
  </source>
  </subsubsection>

  <subsubsection name="Using SHA224WithECDSA in Java PKCS#11">
  <p>
  At the time of writing, Oracle Java does not have support for SHA224WithECDSA in the PKCS#11 provider. 
  PrimeKey has made a patch which is waiting for approval in the OpenJDK 7. 
  You can get a compiled patch together with an installation script for Debian-based operating systems from <a href="http://www.primekey.se/">PrimeKey</a>. 
  </p>
  <p>This issue is registered in the EJBCA issue tracker as <a href="http://jira.primekey.se/browse/ECA-2013">ECA-2013</a>.</p>
  <p>The patch should work on all HSMs that have support for SHA224WithECDSA. It has been tested on SafeNet Luna SA and Utimaco CryptoServer.
  </p><p>With the patch applied you can create CAs using HSMs with the SHA224WithECDSA algorithm.
  </p>
  </subsubsection>
  
  <subsubsection name="Issue with explicit parameters in Java">
  <p>
  In order to use elliptic curves with explicit parameters (as opposed to the standard named curves) you need to apply a patch to the file ECParameters.java. It is the same file as patched above for the bug.
  </p>
  <ul>
  <li>Download the JDK source code and locate the file sun/security/ec/ECParameters.java.</li>
  <li>Starting at line 210 there is code for handling of non named curve EC parameters. Remove the Exception thrown in line 208 and enable the code that is commented out.</li>
  <li>Compile the class by running 'javac *.java' in the directory where the file is located.</li>
  <li>Replace the existing sun/security/ec/ECParameters.class file in jre/lib/rt.jar with your patched and compiled version.</li>
  </ul>
  </subsubsection>

  <subsubsection name="Using Brainpool ECC with SafeNet ProtectServer Gold HSM">
  <p>Here we provide a guide for using <a href="http://www.ecc-brainpool.org/download/Domain-parameters.pdf">Brainpool</a> curves with the SafeNet ProtectServer Gold HSM. These steps were contributed by DGBK, Netherlands.
  <br/>ProtectServer needs explicit parameters for the Brainpool curves. Using explicit parameters have one disadvantage, at least when using the Sun PKCS#11 provider, and that is that you can not use the EJBCA tools to generate keys, but have to use the HSM vendors tools.
  </p>
  <p>
  First you should apply the patch for <a href="#Issue with explicit parameters in Sun Java">explicit parameters</a>, above. Then you are ready to start generating domain parameters and keys. 
  These are the commands for <i>ProtectServer Gold software version 3.33, firmware version 2.07</i>.
  </p>
<p>
<b>1.</b> Create domain parameters file brainpoolP160r1.txt from
ptk_c_administration_manual_rev-c.pdf, Appendix G, Sample EC Domain Parameter Files. 
<br/>Note that you must add "cofactor=01" last in the parameters file, the cofactor is always one (in the spec document) for brainpool curves (cofactor=1 does  not work, it has to be 01).
</p><p>
<b>2.</b> We have to configure the HSM to accept custom domain parameters (E flag):
</p>
<source>
./ctconf -fcE
</source>
<p> 
<b>3.</b> Import the domain parameters to the HSM:
</p>
<source>
./ctkmu idp -s 1 -t ec -n brainpoolP160r1 brainpoolP160r1.txt
</source>
<p> 
<b>4.</b> Generate keys and a (dummy) certificate. The dummy certificate is needed for the java PKCS#11 provider, the DN does not matter.
</p>
<source>
./ctcert c -k -l bpkey -tec -s1 -CbrainpoolP160r1 -d30y
</source>
<p> 
<b>5.</b> Test the keys with: 
</p>
<source>
./ejbcaClientToolBox.sh PKCS11HSMKeyTool test /opt/PTK/lib/libcryptoki.so 1
</source>
<p> 
<b>6.</b> Start EJBCA and create a new CA with CAToken Properties:
</p>
<source>
sharedLibrary=/opt/PTK/lib/libcryptoki.so
defaultKey=bpkey
slotLabelType=SLOT_NUMBER
slotLabelValue=1
</source>
  </subsubsection>
</subsection>
<subsection name="ECC named curves vs explicit parameters">
<p>
Normally you want to generate requests and certificates using named curves encoded in certificates and requests, this is what IETF recommends. 
In some cases you need to generate the request and certificate with explicit parameters instead, this is for instance mandated by ICAO for usage in CSCA's and DS's for ePassports.
</p>
<ul>
<li>When generating requests with <i>clientToolBox PKCS11HSMKeyTool certreq</i> you can specify a flag to use explicit parameters instead of named curves. Named curves is the default.</li>
<li>When creating CAs with <i>ejbca.sh ca init</i> you can specify a flag to use explicit parameters instead of named curves. Named curves is the default.</li>
<li>When EJBCA issues certificate with public keys from certificate requests (csr's) the key in the certificate will be the same as in the csr. If the csr uses explicit parameters, so will the issued certificate.</li>
</ul>
<p>
If you generate a CA with explicit ECC parameters in the CA certifiate you will not be able to run commands like 'ejbca.sh ca listcas' because Java only supports named curves when serializing certificates.
You can resolve this by adding the BC provider as the first provider:
</p>
<source>
$ sudo vi /etc/java-7-openjdk/security/java.security

security.provider.1=org.bouncycastle.jce.provider.BouncyCastleProvider
(renumber the ones below)
</source>
<p>After editing this (make sure you edit the right file) you need to restart JBoss.</p>
</subsection>
<subsection name="Named curves">
<p>
EJBCA supports the curves that BouncyCastle supports, they include named curves from Nist, SEC and X9.62.
New curves may be supported without this list being updated, give it a try!
See <a href="http://www.bouncycastle.org/wiki/">Bouncycastle wiki</a> for more information about ECDSA curves.
</p>
<p>
X9.62 curves:
<ul>
<li>prime192v1</li>
<li>prime192v2</li>
<li>prime192v3</li>
<li>prime239v1</li>
<li>prime239v2</li>
<li>prime239v3</li>
<li>prime256v1</li>
</ul>
SEC curves:
<ul>
<li>sect571r1</li>
<li>sect409r1</li>
<li>sect283r1</li>
<li>sect233r1</li>
<li>sect163r2</li>
<li>secp521r1</li>
<li>secp256r1</li>
<li>secp224r1</li>
<li>secp384r1</li>
</ul>
Nist curves:
<ul>
<li>P-224</li>
<li>P-256</li>
<li>P-384</li>
<li>P-521</li>
<li>B-163</li>
<li>B-233</li>
<li>B-283</li>
<li>B-409</li>
<li>B-571</li>
</ul>
Teletrust curves:
<ul>
<li>brainpoolp160r1</li>
<li>brainpoolp160t1</li>
<li>brainpoolp192r1</li>
<li>brainpoolp192t1</li>
<li>brainpoolp224r1</li>
<li>brainpoolp224t1</li>
<li>brainpoolp256r1</li>
<li>brainpoolp256t1</li>
<li>brainpoolp320r1</li>
<li>brainpoolp320t1</li>
<li>brainpoolp384r1</li>
<li>brainpoolp384t1</li>
<li>brainpoolp512r1</li>
<li>brainpoolp512t1</li>
</ul>
</p>
</subsection>
<subsection name="ImplicitlyCA curves">
<p>
X9.62 provides 3 alternatives for the parameters that can be found in an EC public key.
One of these is named implicitlyCA and indicates that the parameters are defined else where, implicit in the name of the 
certification authority (CA) that issued the key. 
In this situation the actual parameters appear in the ASN.1 encoding of the key as a DER encoded NULL.
<br/>
As the definition says, when the key is used, the parameters will have to come from elsewhere. 
In EJBCA the parameters are configured in <i>conf/cesecore.properties</i>.
</p>
<p>
When creating a new CA using the implicitlyCA facility, you first configure your curve parameters in conf/cesecore.properties and issue commands:
<ul>
<li>ant clean</li>
<li>ant deploy</li>
</ul>
After restarting the application server you can now create a new CA using the name 'implicitlyCA' instead of a curve name as keyspec in the admin-GUI or CLI.
<br/>
The CA certificate will now be created with the NULL encoding of the public key.
</p>
<p>
When issuing client certificates where the client public key uses implicitlyCA, you must allow key length 0 in the certificate profile, because EJBCA can not read the 
key length, since the parameters are defined elsewhere.
</p>
<p>
See <a href="http://www.bouncycastle.org/wiki/">Bouncycastle wiki</a> for more information about the implicitlyCA facility.
</p>
<p>
The curve parameters in <i>conf/cesecore.parameters</i> are configured in Bouncycastle using the following code:'
</p>
<source>
ECCurve curve = new ECCurve.Fp(
    new BigInteger(ecdsa.implicitlyca.q), // q
    new BigInteger(ecdsa.implicitlyca.a, 16), // a
    new BigInteger(ecdsa.implicitlyca.b, 16)); // b
org.bouncycastle.jce.spec.ECParameterSpec implicitSpec = new org.bouncycastle.jce.spec.ECParameterSpec(
    curve,
    curve.decodePoint(Hex.decode(ecdsa.implicitlyca.g)), // G
    new BigInteger(ecdsa.implicitlyca.n)); // n
ConfigurableProvider config = (ConfigurableProvider)Security.getProvider("BC");
config.setParameter(ConfigurableProvider.EC_IMPLICITLY_CA, implicitSpec);
</source>
</subsection>
<subsection name="Creating client certificates">
<p>
You can also issue normal requests for client certificates using ECDSA keys. 
<br/>
All certificates signed by an ECDSA CA will naturally use ECDSA signatures, regardless if the client keys are RSA or ECDSA.
</p>
<p>
When batch generating client keys using the cli command 'bin/ejbca.sh batch' you configure the type of client keys that will 
be generated in the file <i>conf/batchtool.properties</i>. The possible parameters are explained there. 
If using the implicitlyCA facility the same parameters as configured for the ca in <i>conf/cesecore.properties</i> are used.
</p>
</subsection>
<subsection name="Limitations">
<p>
When using the 'implicitlyCA' mode only one set of curve parameters can be set for the whole EJBCA instance.
This means that if you have several CAs using ECDSA with 'implicitlyCA', they will all use the same curve parameters.
You can mix 'implicitlyCA' with named curves any way you like though.
</p>
</subsection>
</section>

<section name="LDAP and Publishers">
<p>
EJBCA has a modular support for something we call Publishers. A publisher
can be any external source where you want to send issued certificates and
CRLs to be stored. The most common cases of Publishers, which are
implemented by default in EJBCA are LDAP directories and Active Directory
(which is a special case of LDAP directory).
</p>
<p>
The Publisher architecture is modular and it's possible to implement custom
publishers that can also be easily integrated and set up in the Admin GUI.
</p>
<subsection name="Publisher Access Rules">
<p>The presumed administrator of publishers is the built in CA Administrator role, or more specifically a role with access to <i>/ca_functionality/edit_publishers</i>. Besided that, only
the following publishers will be available for a given role:</p>
<ul>
<li>Publishers assigned to a CA that the role has access to.</li>
<li>Publishers not assigned to any CA.</li>
<li><b>EJBCA Enterprise only</b>: Validation Authority Peer Publishers, given that the role has access to <i>/peer/view</i></li>
</ul>
</subsection>
<p>
Now we will look at the built-in publishers.
</p>
<subsection name="LDAP Naming">
<p>
A good book to understand LDAP naming is "Understanding and Deploying LDAP
Directory Services". The recommended method of choosing a naming suffix is
the one described in <a href="http://www.ietf.org/rfc/rfc2247.txt">RFC2247</a> that maps a DNS domain to a DN. If my DNS
domain is bigcorp.com it will map to the DN "dc=bigcorp,dc=com". The top
node in my LDAP directory will then be "dc=bigcorp,dc=com".
</p><p>
The dc component support is mandated by all of the X.509 RFCs now.
For example, if I have this directory:
</p>
<source>
dc=bigcorp,dc=com
    |
    +-dc=fi
    |
    |
    +-dc=se
        |
        +-cn=Mike Jackson
</source>
<p>
The most understandable method is taking the subject name in
forward order, like:
cn=Mike Jackson,dc=se,dc=bigcorp,dc=com
</p><p>
If the DN is ordered like this it should be published to the correct object
in the tree.
</p><p>
If the DN is ordered reverse, like:
dc=bigcorp,dc=com,dc=se,cn=Mike Jackson
EJBCA will reorder it incorrectly to forward order, so the publishing will
be wrong.
</p><p>
Therefore...
Use forward order like this:
'cn=Mike Jackson,dc=se,dc=bigcorp,dc=com' if using the dc model or
<br></br>
'cn=Mike Jackson,o=bigcorp,c=se' if using the o,c model.
</p><p>
An example image of an LDAP structure can be seen below in HOWTO-LDAP-tree.png.
<img src="screenshots/HOWTO-LDAP-tree.png" />
</p><p>
Making unique LDAP DNs is the next challenge. If you are in a small
organization having the CN will probably work fine, but in a larger
organization there are probably several people with the same name. Somehow
the names must be made unique, and one way is to introduce numbers, initials
etc in the CN. Another way that we recommend is to use uid in the LDAP DN
instead. LDAP DNs will then looks like "uid=tomas,dc=bigcorp,dc=com". Uid is
the users username, normally used for login etc, and you probably already
have some procedure to create unique usernames already.
</p>
</subsection>

<subsection name="LDAP Basics">
<p>
LDAP has an unusual structure, if you are not used to X.500 style naming.
Things are either branches, or leaf nodes. You can't just drop an object
anywhere you like; You need to create the framework to support it.
Sort of like if you wanted to put entries in /etc/hosts, if the directory
/etc did not exist.
</p><p>
First you mkdir /etc, Then you create the file. Then you start putting
things in the file. The difference with LDAP and x.500 is that instead of paths
separate by slashes, you have paths separated by commas and '=' signs.
</p><p>
For example, if you want to make an object
"cn=ldaphost,ou=hosts,dc=yourdom,dc=com",
you first have to make sure "dc=yourdom,dc=com" exists.
<br></br>
Then make sure
<br></br>
"ou=hosts,dc=yourdom,dc=com" exists.
<br></br>
THEN you can try
<br></br>
"cn=ldaphost,ou=hosts,dc=yourdom,dc=com"
</p><p>
EJBCA does not create branches in LDAP.
You have to put them there with other means, before you start publishing.
</p>

<subsubsection name="Using LDAP">
<p>
In Firefox you can for example enter a URL like:
<br></br>
ldap://ip-address-of-ldap-server:389/cn=Tomas Gustavsson,dc=se,dc=bigcorp,dc=com
<br></br>
and it will fetch an address book entry with the information about the user,
including the certificate.
</p><p>
The LDAP url format is described in <a
href="http://www.ietf.org/rfc/rfc2255.txt">RFC2255</a>.
</p><p>
Examples of using LDAP with Firefox can be found in the
howto-section of this web page.
</p><p>
To use LDAP top fetch user certificates and use them for encrypting email
there seems to be a requirement to use SSL connection to the LDAP server
(Account Options->Compositions &amp; Addressing->Edit directories->Edit->Use
Secure Connection), see also below how to configure OpenLDAP for SSL.
</p><p>
Note: When fetching certificates from LDAP with Firefox for example with
URL:
<br></br>
ldap://ldap-server-host/dc=bigcorp,dc=com??sub?(cn=MyName)?(objectclass=*)
<br></br>
To get a checkbox at the fetched certificate, the CA certificate must be
installed in the Windows truststore, not only in Firefox's.
</p><p>
To use SSL against an LDAP server with MS Outlook you must make sure the CN
in the LDAP servers certificate is the same as the hostname. 
An example of adding a user for the LDAP server with the CLI interface is:
</p>e
<source>
bin/ejbca.sh ra addendentity ldap password "C=SE,O=Foo,CN=ldap.foo.se" MyCA 1 PEM SERVER
</source>
<p>
where ldap.foo.se is the hostname of the LDAP server that Outlook should use.
</p><p>
The CA certificate must also be imported into Windows properly.
</p>
</subsubsection>


</subsection>

<subsection name="Configure LDAP publishers">
<p>
A Publisher is a session bean that implements the IPublishSession interface
and is used to store certificates and CRLs for entities.
EJBCA have support for endless number of publishers simply by defining
publishers in the Admin GUI. The user of EJBCA can implement own publishers, but EJBCA
already comes with a publisher for LDAP.
</p><p>
EJBCA uses a notion of base DN to publish to different LDAP structures. The
DN used in the certificate can be different from the LDAP structure.
</p>

<subsubsection name="Configuring EJBCA">
<p>
To configure the publisher for LDAP:
</p>
<ol>
<li>Choose 'Edit Publishers' in the Admin GUI.</li>
<li>Add a new publisher with a name you define yourself. Edit the publisher and
fill in all the necessary fields.</li>
</ol>
<p>
Generic parameters to LDAP Publisher:
</p>
<ul>
<li>'Hostnames' is ';'-separated list of the hosts where the LDAP servers are
located. E.g. "ldap.company.com" or "ldap1.company.com;ldap2.company.com".
Only the first available of the listed hosts will be used.</li>
<li>'Port' is the port on which the LDAP server listens, default non-SSL is
389. There are three choices:
  <ul>
  <li>Plaintext Connection: unencrypted connection, the easiest to get started with, and the mosts robust if network is secure.</li>
  <li>STARTTLS Extension: this gives the server and client a chance to negotiate a TLS (encrypted) connection, if the server supports encrypted connections. It starts with a plaintext connection, and upgrades to a TLS connection using the same port as plaintext connection. Requires configuration both on the server (TLS server key and certificate) and on the client (CA certificate in truststore).</li>
  <li>TLS Connection: this always uses an encrypted TLS connection and fails if it is not available. Requires TLS configuration both on the server (TLS server key and certificate) and on the client (CA certificate in truststore).</li>
  </ul>
</li>
<li>'Login DN' is the DN of a user on the LDAP server with permissions to add
and update entities.</li>
<li>'Login Password' is the password for the user above.</li>
<li>'Connection timeout' is number of milliseconds a server has to respond before it is
considered unavailable and the next server in the list of hostnames (if any)
is used instead. This timeout is used to probe LDAP servers, to create connections, to bind and to disconnect.</li>
<li>'Read timeout' is number of milliseconds a server has to complete a LDAP search or read operation before it times out and fails.</li>
<li>'Store timeout' is number of milliseconds a server has to complete a LDAP store operation before it times out and fails. This can take a little longer if you store very large CRLs in LDAP.</li>
<li>'Create Nonexisting Users' defines if an LDAP object should be created by EJBCA if it is no existing object 
when EJBCA publishes the certificate.</li>
<li>'Modify Existing Users' defines if attributes (such as email) in existing LDAP objects are replaced with new values and/or added
when an entry is updated with a new certificate. If this option is not activated, existing users will not be touched at all, even not updated with a new certificate.</li>
<li> 'Overwrite Existing Attributes' When 'Modify Existing Users' is set to true this value determines whether to change values of attributes when 
they already exist.</li>
<li> 'Add Nonexisting Attributes' When 'Modify Existing Users' is set to true this value determines whether to add attributes when 
they do not already exist.</li>
<li>'Add multiple certificates per user' defines if we should use multiple certificate entries for each user or only one.
Default only one certificate is added to a user entry in LDAP and if the user gets a new certificate the old one is deleted and replaced with the new one.
If this checkbox is checked certificates are instead appended in LDAP so each user can have multiple certificate entries in LDAP.
Make sure your applications can handle this before enabling this option. Revoking a user will remove all certificates entries for the user.</li>
<li>'Remove certificates when revoked' if checked causes the publisher to remove a certificate from LDAP when the certificate is revoked or suspended.</li>
<li>'Remove ldap user when certificate revoked' if checked causes the publisher to remove the whole LDAP user entry when a certificate is revoked or suspended. </li>
<li>'Set userPassword attribute' specifies if the LDAP publisher should set the userPassword attribute in the LDAP object. If a user entry with a non-null password is published, 
and this checkbox is checked, the userPassword attribute will be populated with the user's password.</li>
<li>'User Object Class' is the objectclass for the LDAP entries for users,
where user certificates are published. The entry is hierarchical separated by ';' to
build a structure like:
<br></br>
objectclass: top
<br></br>
objectclass: person
<br></br>
objectclass: organizationalPerson
<br></br>
objectclass: inetOrgPerson
<br></br>
This objectclass must allow the attribute 'userCertificate;binary'.
<br></br>
Default 'top;person;organizationalPerson;inetOrgPerson'
</li>
<li>'CA Object Class' is the objectclass for the LDAP entries for CAs, where
CA certificates and CRLs are published. The entry is hierarchical separated by
';' to build a structure. This objectclass must allow the attributes
'cACertificate;binary', 'certificateRevocationList;binary' and
'authorityRevocationList;binary'.
<br></br>
Default 'top;applicationProcess;certificationAuthority'
</li>
<li>'User Certificate Attribute' is the attribute name, in the
userObjectClass, for the users certificate. 
<br></br>
Default 'userCertificate;binary'.
</li>
<li>'CA Certificate Attribute' is the attribute name, in the cAObjectClass,
for the CAs certificate. 
<br></br>
Default 'cACertificate;binary'.</li>
<li>'CRL Attribute' is the attribute name, in the cAObjectClass, for CRLs
(user CRLs) publisher by the CA. 
<br></br>
Default 'certificateRevocationList;binary'.
</li>
<li>'ARL Attribute' is the attribute name, in the cAObjectClass, for ARLs (CA
CRLs) publisher by the CA. 
<br></br>
Default 'authorityRevocationList;binary'
(note that pure ARLs are not implemented yet in EJBCA).
</li>
<li>'LDAP location fields from cert DN'
When configuring the LDAP publisher the BaseDN will be used as the base for
the DN published in LDAP,
and it will be appended to the LDAP location fields selected to be used.
example: If the user DN in EJBCA is "cn=tomas gustavsson, uid=tomasg,
O=PrimeKey Solutions AB, C=SE"
and the BaseDN is "dc=PrimeKey,dc=SE" and the selected LDAP location fields
are "CN".
The LDAP DN used for publishing will be "cn=tomas gustavsson, dc=PrimeKey,
dc=SE", and the "uid=tomasg"
will be added as an attribute in LDAP. The certificate stored under
"cn=tomas gustavsson, dc=PrimeKey, dc=SE"
will have the subjectDN "cn=tomas gustavsson, uid=tomasg, O=PrimeKey
Solutions AB, C=SE".
</li>
</ul>
</subsubsection>

<subsubsection name="Setting up certificate profiles">
<p>
You MUST make a custom certificate profile to publish to LDAP!
</p><p>
To publish in LDAP you must create a Certificate profile in EJBCA that
publishes to LDAP. If the above is configured, there will be a section for
'Publishers' available when creating/editing a certificate profile (with 'Edit Certificate
Profiles').
Choose this, and then when adding end-entities, make sure they use the new
certificate profile and voila, the certs will be published.
</p>
</subsubsection>

<subsubsection name="Different LDAP publishers">
<strong>LDAP Publisher</strong>
<p>
The regular LDAP Publisher works by searching the DN in LDAP.
</p><p>
When ejbca creates an object to publish a certificate to LDAP it firsts builds the DN from the
baseDN and 'LDAP location fields for cert DN'. It checks if the entry exists in the
ldap and either creates or modifies the entry.
</p>
<p>Example: The certificate DN is "CN=Tomas Gustavsson,O=Foo,C=SE", 
the BaseDN in the publisher is "DC=primekey,DC=se" and the CN is selected in "LDAP location fields from cert DN".
<br></br>The resulting DN that EJBCA will search for in the LDAP and create if it does not already exist is 
"CN=Tomas Gustavsson,DC=primekey,DC=se".
</p>
<p>
Using this publisher, if you have multiple trees in your LDAP (for example "ou=foo,dc=primekey,dc=se" and "ou=bar,dc=primekey,dc=se")
you can either:
<ol>
<li>Include both CN and OU in 'LDAP location fields from cert DN' and have your cert DNs like "CN=Tomas,OU=foo,O=MyOrg,C=SE.</li>
<li>Use different publishers for ou=foo and ou=bar and issue certificates for the different OUs with different certificate profiles.</li>
</ol>
</p>
<strong>LDAP Search Publisher</strong>
<p>
The LDAP Search Publisher works by searching the LDAP for existing entries using a user defined search filter. 
If no entries exist in the LDAP when searching for an entry, one is created just like in the regular LDAP Publisher.
</p><p>
The search filter is defined in the two fields under "LDAP search settings":
<ul>
<li>Suffix base DN of LDAP Search - the base for your search filter.</li>
<li>LDAP filter of the search - your LDAP filter.</li>
</ul>
If you build your search filter on DN components, you also have to select thos components as 'LDAP location fields'.
</p>
<p>
The best example of such a search filter is if base is "dc=primekey,dc=se" and filter is "uid=$USERNAME".
The search done by ejbca will be equal to the search:<br></br>
ldapsearch -x -b "dc=primekey,dc=se" "(uid=$USERNAME)"
</p><p>
$USERNAME is replaced by the EJBCA username of the user that has had a new certificate just generated.
Other variables apart from $USERNAME is $EMAIL, $UID, $CN, $O, $OU and $C where these values are taken from the certificate DN.
</p><p>
When a certificate is generated for say user "ldap" EJBCA will perform the search:<br></br>
ldapsearch -x -b "dc=primekey,dc=se" "(uid=ldap)"
</p><p>
The certificate generated for ldap will be published in the object returned by the search. 
This is very useful if you want to publish certificates to an LDAP directory where your users already exists, such as an email directory.
The DN in the LDAP does not have to match the DN in the certificates at all.
</p>
<p>
If more than one entry matches the search, the first returned search result will be used.
</p>
</subsubsection>

<subsubsection name="Publishing to Active Directory">
<p>
When configuring Active Directory LDAP, Bind DN for the users are usually,
cn=user,cn=Users,dc=domain-component1,dc=domain-component2.
<br></br>
For example: cn=Philip Vendil,cn=Users,dc=primekey,dc=se for the domain
primekey.se
</p><p>
If your DN is like "cn=Ejbca1,0=MyOrg,c=SE" 
<br></br>
and your base DN is like "DC=Security,DC=Software,DC=MyOrg".
<br></br>
The publisher for AD should have base DN like
<br></br>
"cn=Users,dc=Security,dc=Software,dc=MyOrg"
</p><p>
For Login DN you should use the full ldap name, for example:
<br></br>
"CN=Administrator,CN=Users,dc=primekey,dc=se"
</p><p>
In order to connect to AD though SSL you should issue a LDAP SSL P12
to the domain controller. According to 
<a href="http://support.microsoft.com/default.aspx?scid=kb;en-us;321051&amp;sd=tech">
MS Article ID 321051</a>
</p><p>
The same certificate is used for both the AD and global catalogue (GC).
Remember to add the CA certificate to the machine that stores trusted root
certificates.
</p><p>
To publish a CRL to Active Directory use a Base DN similar to
</p>
<source>
CN=somename,CN=CDP,CN=Public Key Services,CN=Services,CN=Configuration,DC=somemachine,DC=primekey,DC=se
</source>
<p>
and the "CRL Distribution Point" in the certificate should point to
</p>
<source>
ldap:///CN=Test%20MS%20SC%20Logon%20CA%20v1,CN=somename,CN=CDP,CN=Public%20Key%20Services,CN=Services,
CN=Configuration,DC=somemachine,DC=primekey,DC=se?certificateRevocationList?base?objectClass=cRLDistributionPoint
</source>
</subsubsection>

<subsubsection name="Constructing the DN for an entity to be published">
<p>
The DN to be published is constructed from the certificate DN of the entity to be published.
But if the publisher requires a DN object that is not a part of the certificate DN then the DN defined for entity might be used instead.
</p><p>
The DN of the entity (user or CA) could have more objects than the certificate if "Use a Subset of Subject DN" is defined in the used certificate profile.
</p><p>
The "LDAP Publisher" and the "LDAP Search Publisher" tries the DN of the entity when the certificate DN is missing an object needed in the publishing DN
</p>
</subsubsection>

<subsubsection name="What EJBCA stores/creates/modifies">
<p>
Apart from the DN in the entry a number of attributes are also stored, some
are required by schema, some are optional. EJBCA find attributes in the certificate, if it is an
OU (organizational unit) in the certificate EJBCA uses that to populate the OU attribute in the LDAP
entry.
</p><p>
When updating an entry that already exists EJBCA uses replace on the
existing attributes, so if an email attributes already exists and EJBCA finds an email address in
the certificate, the email attribute in ldap is replaced with the email address from the certificate.
</p><p>
Note that attributes are only replaced/updated if the flag "Modify Existing Users" in the Publisher is active. 
The certificate attribute is always updated though.
<br/>
Attributes that are part of the DN, i.e. that reflects the location of the entry in LDAP is not modified, since this 
is usually not allowed.
</p><p>
The attributes that EJBCA creates or replaces are:
</p>
<ul>
<li>cn (common name)</li>
<li>l (locality)</li>
<li>ou (organizational unit)</li>
<li>sn (surname)</li>
<li>gn (givenname)</li>
<li>st (state)</li>
<li>o (organization)</li>
<li>uid (user id)</li>
<li>initials</li>
<li>title</li>
<li>serialnumber - If we have selected to use the SN (serialNUmber DN field) in 'Ldap Location fields', we will also add it as an attribute.</li>
</ul>
</subsubsection>

</subsection>

<subsection name="Configure OpenLDAP">
<p>
The objectclass 'inetOrgPerson' is used by default to store certificates.
</p><p>
Example:
</p>
<source>
dn: cn=Mike Jackson,ou=people,dc=company,dc=com
objectclass: top
objectclass: person
objectclass: organizationalPerson
objectclass: inetOrgPerson
cn: Mike Jackson
sn: Jackson
userCertificate;binary::
</source>
<p>
CAs are published in the form:
</p>
<source>
dn: cn=ejbca,dc=jackson,dc=net
objectClass: top
objectClass: applicationProcess
objectClass: certificationAuthority
cn: ejbca
cACertificate;binary:
certificateRevocationList;binary:
authorityRevocationList;binary:
</source>
<p>
To configure OpenLDAP (version 2.2.5) to include the 'inetOrgPerson' you
must add the following lines to slapd.conf. This is already the default in recent releases:
</p>
<source>
include         /etc/ldap/schema/cosine.schema
include         /etc/ldap/schema/inetorgperson.schema
</source>
<p>
Don't forget to add the top object by creating an LDIF file (org.ldif):
</p>
<source>
dn: o=AnaTom,c=SE
objectclass: dcObject
objectclass: organization
o: AnaTom
dc: AnaTom

dn: cn=Admin,o=AnaTom,c=SE
objectclass: organizationalRole
cn: Admin
</source>
<p>
And using the command:
</p>
<source>
ldapadd -x -D "cn=Admin,o=AnaTom,c=SE" -W -f org.ldif
</source>
<p>
Check what you have in the LDAP by:
</p>
<source>
ldapsearch -x -b 'o=AnaTom,c=SE' '(objectclass=*)'
</source>

<subsubsection name="Configure SSL">
<p>
Create a user in ejbca (this example is for adding a user with the cli
interface, adding a user with the admin-GUI works just as fine).
In the mail ejbca directory type (use simply 'ra' on windows):
</p>
<source>
bin/ejbca.sh ra addendentity ldap foo123 "C=SE,O=Foo,CN=ldap" null ManagementCA null 1 PEM SERVER
bin/ejbca.sh ra setclearpwd ldap foo123
</source>
<p>
Where foo123 is the ldap users password, C=SE... is the users DN and
ManagementCA is the name you chose for your CA. The user type is end-user (1), keystore type is PEM, and
if using the admin-GUI check 'use batch').
Batch generate the PEM keystore:
</p>
<source>
bin/ejbca.sh batch
</source>
<p>
Copy the resulting files p12/pem/ldap.pem, p12/pem/ldap-CA.pem and
p12/pem/ldap-Key.pem to your LDAP server. In this example the slapd.conf is located in
/etc/ldap so we copy the files to that directory. 
Protect theses files so they are only readable by the LDAP server.

Add the following to your slapd.conf:
</p>
<source>
# Use SSL
TLSCipherSuite HIGH:MEDIUM:+SSLv3
TLSCertificateFile /etc/ldap/ldap.pem
TLSCertificateKeyFile /etc/ldap/ldap-Key.pem
TLSCACertificateFile /etc/ldap/ldap-CA.pem
</source>
<p>
Restart slapd:
</p>
<source>
./slapd -h "ldap:/// ldaps:///"
</source>
<p>
and check that it is running with 'ps -ef|grep slapd'.
</p><p>
On SuSE, if using the builtin OpenLDAP you have to enable ldaps in
/etc/sysconfig/openldap:
</p>
<source>
OPENLDAP_START_LDAPS="yes"
</source>
<p>
and then run
</p>
<source>
SuSEconfig
</source>
<p>
and then
</p>
<source>
rcldap start
</source>
<p>
Configure your LDAP publisher in EJBCA to use SSL by checking the checkbox
'Use SSL', the port should change to port 636.
</p><p>
Note! The CA certificate of the (root)CA used to sign the ldap server
certificate must be present in the java trust cert store 
($JAVA_HOME/jre/lib/security/cacerts).
Otherwise you will have to add it using something like:
First get the CA cert:
</p>
<source>
bin/ejbca.sh ca getcacert MyCA myca.der -der
</source>
<p>
Then add it to the java trust store:
</p>
<source>
keytool -import -trustcacert -alias MyCA -keystore $JAVA_HOME/jre/lib/security/cacerts -storepass changeit -file myca.der
</source>
<p>
You have to re-start JBoss after adding anything to the java trust store.
</p>
<p>
A guide for configuring OpenLDAP on Solaris can be found at
<a href="http://www.bolthole.com/solaris/LDAP.html">bolthole.com</a>
</p>
</subsubsection>

<subsubsection name="Sample Ubuntu installation">
<source>
- sudo apt-get install slapd ldap-utils
- sudo dpkg-reconfigure slapd
  Configure slapd with your domain and admin password (primekey.se in this case).
- sudo /etc/init.d/slapd restart
- 'ps -ef|grep slap' 
  should show a slapd running
- ldapsearch -x -b 'dc=primekey,dc=se' '(objectclass=*)'
  To look at the results
- slapcat -l backup.ldif
  Make backup
- slapadd -l backup.ldif
- /etc/init.d/slapd restart
  Restore backup
</source>
<p>
Command to add new LDAP nodes:  
</p>
<source>
- ldapadd -x -D "cn=admin,dc=PrimeKey,dc=com" -W -f primekey.ldif
  where primekey.ldif is:

dn: dc=PrimeKey,dc=com
dc: PrimeKey
objectclass: dcObject
objectclass: organization
o: PrimeKey Solutions AB
description: Parent Object for PrimeKey LDAP Directory

dn: ou=Standard,dc=PrimeKey,dc=com
ou: Standard
objectClass: top
objectClass: organizationalUnit
description: Parent Object for all Standard Certificates

dn: ou=High,dc=PrimeKey,dc=com
ou: High
objectClass: top
objectClass: organizationalUnit
description: Parent Object for all High Certificates
</source>
</subsubsection>
</subsection>

<subsection name="OpenDJ">
<p><a href="http://opendj.forgerock.org/">OpenDJ</a> is a modern, standards compliant, java based, LDAP server that is easy to set up and use. It also comes with GUI tools to manage and query.
</p>
<subsubsection name="Installing OpenDJ">
<p>This install guide uses OpenDJ 2.5.0 as an example, but other versions should worksimilarly.
<ul>
<li>unzip OpenDJ-2.5.0-Xpress1.zip</li>
<li>cd OpenDJ-2.5.0-Xpress1</li>
<li>./setup</li>
<ul>
<li>This launches graphical setup, you can run 'setup --cli' to install without GUI.</li>
<li>Use default Root User DN: cn=Directory Manager</li>
<li>Directory Base DN: dc=example,dc=com)</li>
<li>If you want to be able to run OpenDJ on the same server as JBoss/EJBCA, choose another port for management, i.e. 5555 instead of 4444.</li>
</ul>
<li>You can end by starting Launch Control Panel, or you can start it later with bin/control-panel.</li>
</ul>
A EJBCA publisher for a default installation is then configured with:
<ul>
<li>Base DN: dc=example,dc=com</li>
<li>Administrator: cn=Directory Manager</li>
</ul> 
</p>
</subsubsection>
<p>
The graphical LDAP browser is accessible from the Control Panel->Manage Entries.
You can start/stop OpenDJ from within the Control Panel or with bin/start-ds and stop-ds.
</p>
<p>Management tasks such as creating new attributes and object types are easy to do in the Control Panel GUI.
</p><p>
OpenDJ listens to port 1389 by default, but it also occupies other ports stopping it from running on the same server as JBoss.
<br/>
If you want to change the management port (default 4444) after installation you can edit confif/config.ldif and config/tools.properties.
</p>

<subsubsection name="Configure SSL/TLS">
<p>How to configure SSL/TLS with OpenDJ is well described in the <a href="http://opendj.forgerock.org/doc/admin-guide/index/chap-listeners.html">OpenDJ documentation</a>.</p>
<p>If you run setup using the command line (--cli) you will be prompted with TLS questions, having the possibility to set up TLS directly.</p>
</subsubsection>

</subsection>

<subsection name="Custom schemas">
<p>See doc/ldapschema for files with custom schemas and attribute types to add to your LDAP schema.</p>
<subsubsection name="Certificate serial number">
<p>This is an attribute and a schema extension to allow storage of certificate serial number in the inetOrgPerson LDAP object, for end user entries.
This is done by adding an extension to inetOrgPerson called inetOrgPersonWithCertSerno with a new optional attribute called certificateSerialNumber.
</p>
<p>Once you have installed the new schema in the LDAP server you use it by configuring the LDAP publisher with:
<ul>
<li>User Object Class: top;person;organizationalPerson;inetOrgPerson;inetOrgPersonWithCertSerno</li>
</ul>
instead of the befault value:
<ul>
<li>User Object Class: top;person;organizationalPerson;inetOrgPerson</li>
</ul>
The certificateSerialNumber attribute will then automatically be added/modified when publishing to LDAP.
</p>
</subsubsection>
<subsubsection name="Extra device schema">
<p>
To store certificates for devices (e.g. routers, toasters etc) in LDAP it
is no really suitable standard object class. inetOrgPerson requires surnames
etc, and the device objectclass does not include a certificate attribute.
</p><p>
Mike Jackson has kindly contributed additional objects that extend the
standard device class with a certificate attribute. 
The ejbcaDevice uses object ids from PrimeKey Solutions AB.
</p>
</subsubsection>
</subsection>

<subsubsection name="Installation">
<p>
For the Netscape/SUN servers, on UNIX, copy the 85ejbca.ldif file into:
</p>
<source>
/usr/netscape/servers/slapd-hostname/config/schema/
</source>
<p>
and restart the LDAP server.
</p><p>
For OpenLDAP, copy the ejbca.schema file into, e.g.:
</p>
<source>
/etc/ldap/schema/
</source>
<p>
and edit slapd.conf to add the following line:
</p>
<source>
include /etc/ldap/schema/ejbca.schema
</source>
<p>
then restart the server.
</p>
</subsubsection>

<subsection name="Custom publishers">
<subsubsection name="Developing a custom publisher">
<p>
If your setup makes it very complex to configure multiple certificate
profiles and multiple publishers you might consider writing a custom publisher that
handles things directly according to your needs.
</p><p>
Look in the directory src/java/org/ejbca/core/model/ca/publishers for more
information about writing your own solution. There is an empty custom publisher called
DummyCustomPublisher.java that can be extended. Custom publishers are deployed
in the same way as <a href="#Writing Customized Services">custom services</a>, i.e.
in a Jar with a special meta-data file. For example:
</p>
<source>
# Example file. Should be named META-INF/services/org.ejbca.core.model.ca.publisher.ICustomPublisher
com.example.ejbca.MyCustomPublisher
com.example.ejbca.AnotherCustomPublisher
</source>
<p>
Additionally you can have your publisher implement org.ejbca.core.model.ca.publisher.CustomPublisherUiSupport
to make the configuration more user-friendly in the AdminGUI.
</p>
</subsubsection>
<subsubsection name="Publishing with an external application">
<p>
A lightweight alternative to developing a new custom publisher for exporting CRLs,
certificates and revokations is to use the General Purpose Custom Publisher (GPCP).
This makes it possible to export DER-encoded CRLs, certificates and/or revokations with
a simple script (using scp or similar). The GPCP creates a temporary file and
executes the script with the full pathname to the temporary file as an argument.
</p><p>
It's possible to let the publisher ignore an error in the execution of a script by
altering the publishers properties. By default, the publisher detects both output to
standard error and a non-zero errorlevel set by the script.
</p><p>
To start using the GPCP, select "Edit Publishers" in the Administration GUI. Add a
publisher "GPCP" and then "Edit" the same. Choose 
</p>
<ul>
<li>Publisher type: General Purpose Custom Publisher</li>
<li>Properties: </li>
<ul>
<li>Full pathname of X publishing script: For example "/fullpathname/exportscript.sh"</li>
<li>Fail X publishing on script error code: Will treat the publishing as unsuccessful if the script returns with a non-zero error code.</li>
<li>Fail X publishing on output to stderr: Will treat the publishing as unsuccessful if the script writes anything to standard error.</li>
<li>Calculate Delta CRL locally: Described below.</li>
</ul>
</ul>
<p>
and click "Save and Test Connection" to save the entered information and validate
that the specified applications exist. Select "Edit Certificate Authorities" in
the Administration GUI and select "GPCP" as your new CRL publisher. Click "Save". 
</p>
<p>
<ul>
<li>Test CRL publishing by selecting "Basic Functions" in the Administration GUI and
click "Create CRL".</li>
<li>Test certificate publishing by selecting "Edit Certificate Authorities" in the
Administration GUI, select a CA, click "Edit" and then "Republish CA Certificates".</li>
</ul>
</p>
<p>
More advanced scripts or applications have the ability to use the additional argument
<ul>
<li>cert.application fulltempfilepathname x509type certificateDN issuerDN certHexSerialNumber</li>
<li>revoke.application fulltempfilepathname x509reason certificateDN issuerDN certHexSerialNumber</li>
</ul>
Depending on application, the GeneralPurposeCustomPublisher can calculate whether a CRL is a delta CRL. 
Set the parameter crl.calclulateDeltaCrlLocally to true in order to do this, or false if you wish to check this in an external script (or not at all). 
The result of this check, if run, will be last in the argument list to the script.
</p>
<p>An example linux script for certificate publishing could look like:</p>
<source>
#!/usr/bin/env bash

echo $* >> /home/user/publisherlog.txt

cp $1 /home/user/cert.crt
</source>
</subsubsection>

<subsubsection name="Publisher for sampling of issued certificates">
<p>
One custom publisher called CertificateSamplerCustomerPublisher can be used to 
store published certificates to a configured directory. Different sampling methods
can be specified per certificate profile, either storing every certificate, no 
certificate or randomly with a configured probability.
</p>
<p>
To use the CertificateSamplerCustomerPublisher, select "Edit Publishers" in the Administration GUI, create a new publisher and edit it.
</p>
<ul>
<li>Publisher type: Custom Publisher</li>
<li>Class Path: org.ejbca.core.model.ca.publisher.CertificateSamplerCustomPublisher</li>
<li>Properties of Custom Publisher: 
</li>
</ul>
<source>
outputfolder=/tmp/sampledcertificates/
default.samplingmethod=SAMPLE_ALL
profileid.2234644354.samplingmethod=SAMPLE_NONE
profileid.1645141026.samplingmethod=SAMPLE_PROBABILISTIC
profileid.1645141026.pvalue=0.25
</source>
<p>
and click "Save and Test Connection" to save the entered information and validate
that the entered configuration is correct. Select the publisher in the relevant 
certificate profiles.
</p>
<p>
In the example above the certificate profile with id 2234644354 will not have any certificates stored. The profile with id 1645141026 will have about 25% of the certificates stored and for all other profiles all certificates will be sampled.
</p>
</subsubsection>

<subsubsection name="Customer specific publisher for a PKD-like catalog">
<p>
The CustomerLdapPublisher1 publishes end entity (Document Signer) certificates 
and (CSCA) CRLs according to a customer specific schema based on the schema 
defined by ICAO for uploading to the PKD but with some customer-specific 
extensions added.
</p>
<p>
Extra attributes are added including checksums of the uploaded objects as well 
as a feature for putting some log entries in the catalog.
</p>
<p>
To use the CustomerLdapPublisher1 select "Edit Publishers" in the Administration GUI, create a new publisher and edit it.
</p>
<ul>
<li>Publisher type: Custom Publisher</li>
<li>Class Path: - Specify class path manually -<br/>
org.ejbca.core.model.ca.publisher.custpubl1.CustomerLdapPublisher1</li>
<li>Properties of Custom Publisher: 
</li>
</ul>
<source>
hostnames=localhost
port=1636
basedn=dc=example,dc=com
logindn=cn=Directory Manager
loginpassword=foo123
usessl=true

# Optional properties:
logconnectiontests=true
connectiontimeout=5000
readtimeout=30000
storetimeout=60000
</source>
<p>
Click "Save and Test Connection" to save the entered information and validate
that the entered configuration is correct. Select the publisher in the 
DS certificate profiles and the CSCA.
</p>
<p>
In the example above logconnectiontests equals true which means that a click on 
the "Save and test connection" button will cause an log entry to be added to the 
catalog. Notice that in this case if health check checks the publishers an log 
entry will also be inserted for every health check run.
</p>
</subsubsection>

<subsubsection name="Cert Safe publisher for a HTTPS server (Enterprise only)">
<p>
The CertSafePublisher publishes certificate issuance and life cycle events 
(revoke and unrevoke) to a HTTPS server. The HTTPS request body is a JSON 
object with the fields: "status", "revocationReason" and "pem".
</p>
<p>Example of the JSON object:</p>
<source>
{                                                                       
	"status": "revoked",                                              
	"revocationReason": "keyComprimise",                             
	"pem": "-----BEGIN CERTIFICATE-----\n                             
	MIIDWTCCAkGgAwIBAgIIAZmQ+6dVVfgwDQYJKoZIhvcNAQEFBQAwOzEVMBMGA1UE\n
	AwwMTWFuYWdlbWVudENBMRUwEwYDVQQKDAxFSkJDQSBTYW1wbGUxCzAJBgNVBAYT\n
    	AlNFMB4XDTE0MDMwNDEwNTEyM1oXDTE2MDMwMzEwNTEyM1owETEPMA0GA1UEAwwG\n
	c3NsZm9vMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA2nqbOm3ocTTm\n
    	jU49UgP7ugnhg427zHaPdJjWuMt1ZopVzF/46EEsHIfxyGL59J3otgMEXXBJgJwC\n
    	QuZgtqfByAgKIWvrgcxBhvkCe6NRjNAJv0DPaxsEJRqpQEFxV3Eo24eOpN+mxWIm\n
    	6h3N3vTgaaDBQTQMvcb3MndJDWte4+HoBwMtuJdfRapIjcCIkyfiNJKkS4NMvYGw\n
    	G+lrReq4Za0Qhyqejjf4BB+QdE7xetZAtck9HAUlM28/zUuilPNeyftK7lR1Qcyp\n
    	MxIYo6YI2mDbSDre7pr21srZB5lBdOP3dAb5B5MFZ7d4qqljygEb0HuUXedqu4pj\n
    	8e4VNtv7EwIDAQABo4GKMIGHMB0GA1UdDgQWBBR3QlV5l7AvnfNN7D6sILhjMNHs\n
    	LTAMBgNVHRMBAf8EAjAAMB8GA1UdIwQYMBaAFMIAelgt0T0LdOBNNFKBKb5rcu4V\n
    	MA4GA1UdDwEB/wQEAwIF4DAnBgNVHSUEIDAeBggrBgEFBQcDAQYIKwYBBQUHAwIG\n
    	CCsGAQUFBwMEMA0GCSqGSIb3DQEBBQUAA4IBAQADfEI0DgJVBHe63YCC8AhLo+VX\n
    	Fudi97WmCJGfHMx42HaaQvHtIvvpCw8TUZ08k49gUv+qtRlznaKFQb02DjbWgyeY\n
    	TKuCwueiXhMIb7i4Af1+cMFrajBGOYrjYkbGGOwfyN8KcOrQxQk30vBf47DGRtX8\n
    	80fV12f1NWng1KD3ye7VcTnFQTkbwvZAT2aDQorqND8c7Pn8dEpPNnpP67EsLIvH\n
    	biLb4qeaMa0pr21cE2LMV7ZhdyNbziiITB2oNsrdLIcKeTGKqmGSLDec6N0DPnmb\n
    	NlJNaBcs77G2JSJfh908HEtaVqH+u5cKElV3pRSBbS9Z6DcAlwaC64G6tKs0\n    
    	-----END CERTIFICATE-----"                                        
}
</source>
<p>
The "revocationReason" is optional.
</p>
<p>
To use the Cert Safe Publisher, select "Edit Publishers" in the Administration GUI, create a new publisher and edit it.
</p>
<ul>
<li>Publisher type: CertSafe Publisher</li>
<li>Class Path (not editable): <br/>
org.ejbca.core.model.ca.publisher.CertSafePublisher</li>
<li>Properties of the publisher: 
</li>
<ul>
<li>CertSafe Server URL: https://HOST:PORT/RELATIVE_PATH, for example https://certsafe.host.domain/PrimeKey/certificates.</li>
<li>Authentication Key Binding for Connection: Name of the Authentication Key Binding used to authenticate (TLS) against the CertSafe server.</li>
<li>HTTPS connection timeout: connection timeout (default 10s)</li>
</ul></ul>
<p>
An Authentication Key Binding token should be created to specify the parameters used to establish connection 
with the HTTPS server. For instructions on how to create an Authentication Key Binding, see 
<a href="userguide.html#Managing Internal Key Bindings">Managing Internal Key Bindings</a>
</p>
<p>
Click "Save and Test Connection" to save the entered information and validate
that the entered configuration is correct. Select the publisher in the 
certificate profiles.
</p>
<p>
If an error occures in the server, EJBCA can expect an error message sent inside a JSON object with the 
keyword "error". The error message will be visible in the log file. 
</p>
<p>Example of the error JSON object:</p>
<source>
{                                                                       
	"error": "An error message from the server.",                                              
}
</source>
<p>In order to avoid that certificates go missing in the CertSafe server if publishing fails (network down etc), it's recommended to configure a Publish Queue process service, as described below.
</p>
</subsubsection>

</subsection>

<subsection name="Publisher Queue and failures">
<p>To achieve robust publishing there is a publisher queue. When a publisher fails the published data is stored in a 
separate table in the database, the PublisherQueueData. This queue can then be processed by a service (see <i>Publisher Queue Process Service</i> in the <a href="#Services%20Framework">Services Framework</a> section).
</p>
<p>
Publishers can also be configured not to publish directly at all, but to store everything in the queue, which is later processed.
The benefit of this approach is that publishing is instant. When issuing certificates the CA does not have to wait for all publishers to 
finish. If there are many publishers this might delay the issuing process slightly.
</p>
<p>
Publisher Settings:
</p>
<ul>
<li>'Current length' - displays the number of new entries in the queue in the intervals &lt;1 min, 1-10 min, 10-60 min and &gt;60 min.</li>
<li>'No direct publishing, only use queue' - when enabled, the publisher does not try to publish directly but instead pushes the 
update to the queue for later processing by a Publish Queue Process Service.</li>
<li>'Keep successfully published items in database' - when enabled items stored in the publisher queue will not be removed when real 
publishing has been done, status will merely be changed from PENDING to SUCCESS.</li>
<li>'Use queue for CRLs' - determines if the publisher queue should handle CRLs or not for this publisher.</li>
<li>'Use queue for certificates' - determines if the publisher queue should handle certificates or not for this publisher.</li>
</ul>
</subsection>

</section>

<section name="Internationalization">
<p>
To customize EJBCA admin GUI for your languages special characters you will probably have to 
change the default page encoding in 'web.contentencoding' (in conf/web.properties file) 
to for example ISO-8859-1 instead of the default UTF-8.
</p><p>
Displaying, receiving, decoding and storing different char sets is rather complicated and the 
architecture is multilayered. There are the web browser, application server, database and 
operating system, all working together.
If you change to UFT-8 to handle your char set, you must probably also specify that the database 
connection should use UTF-8.
For MySQL this can be done in the <i>connection-url</i> in your datasource description 
(APPSRV_HOME/server/default/deploy/ejbca-ds.xml):
jdbc:mysql://yourhost/ejbca?characterEncoding=UTF-8
</p><p>
You will also want to configure the database, for example in my.cnf, to use UTF-8.
</p><p>
You also want to configure your machine to use the locale you are using, otherwise some encoding/decoding to the database
may get mixed up and throw a lot of errors (java XML decoding). 
For example in SUSE this is done with 'yast' and in Debian it is done with 'dpkg-reconfigure locales'.
</p><p>
For some languages (for example Chinese) the java scripts in the admin GUI will fail to recognize
the characters when doing checks for allowed characters in DN etc.
The easiest way to resolve this is to go into the file: 
<br></br>
src/adminweb/ejbcajslib.js
<br></br>
And change all methods 'checkfield*()' to always return true directly.
</p><p>
If you can't get you national characters to work with the Admin GUI, you can try using the CLI instead
(bin/ejbca.sh ra addendentity ...). That usually works.
</p>
<p>
To make everything work perfect you MAY have to also configure the encoding of URIs according to your settings in
the application server. This is done automatically for JBoss using the 'web.contentencoding' in conf/web.properties.
</p>

<subsection name="Adding a new language to the admin GUI">
<p>
Java uses unicode internally, so the things that needs to be taken care of are:
<ol>
<li>Make sure your system locale is set correctly, so Java will recognize input of your nations language. 
If Java does not automatically recognize your locale you might need to specify it as options to Java during
startup (i.e. in JBoss and cmd line commands such as ejbca.sh).
java -Duser.language=2-char-language-code -Duser.region=2-char-country-code
example for Swedish: java -Duser.language=sv -Duser.region=SE
</li>
<li>Your database must also recognize the locale so it does not strip down to plain ascii. 
This is database and JDBC-driver dependent.</li>
</ol>
</p><p>
The Admin GUI is meant to support multiple languages through language files
in modules/admin-gui/resources/languages. In order to add a language you should do the following:
<ol>
<li>Rename the language file you have created to
languagefile.<em>languagecode</em>.properties, where <em>languagecode</em> is the 2-letter language code (ISO 639-1),
e.g. 'zh' for Chinese, and place it in the 'modules/admin-gui/resources/languages' directory.
</li>
<li>Edit conf/web.properties (create with conf/web.properties.sample as template if you don't have one).
Change 'web.availablelanguages' and add your language code to the value. i.e.:
<source>web.availablelanguages=en,bs,de,es,fr,it,ja,pt,sv,uk,zh</source>
</li>
<li>You may have to change the default page encoding in 'web.contentencoding' to for example ISO-8859-1
instead of the default UTF-8.
</li>
<li>Clean and re-deploy ejbca with 'ant clean' followed by 'ant deploy'. 
Restart JBoss and your browser after this.
</li>
</ol>
</p><p>
Now it should be possible to select 'zh' in the system configuration as default language 
and in the administrator preferences page. 
The language will be changed when the administrator go to a web page.
</p></subsection>
<subsection name="Internal Internationalization">
<p>
It's also possible to translate internal log comments, some exception messages and approval notifications.
This is done separately in it's own resource files since this is done internally in the core application
and not in the web-layer. 
</p><p>
The language used internally is configured in the conf/cesecore.properties file by setting the properties
intresources.preferredlanguage and intresources.secondarylanguage to the language you want to use.
The letters should be the same as the xx name in the intresources.xx.properties files in the src/intresources 
directory. The secondary resource file is used if the resource isn't found in the preferred language.
This is a global setting that cannot be overridden by administrators own settings in the web-layer.
</p>
</subsection>

</section>

<section name="Custom DN and altName oids">
<p>
EJBCA supports custom (your own) OIDs in DN components.
</p><p>
In order to add such a DN you can simply call the DN for example: CN=MyCommonName,1.1.1.1=MyCustomOid,C=SE
<br/>
Where 1.1.1.1 is your custom OID.
</p>
<p>
Custom OIDs are always encoded as UTF8String in the DN.
</p>
<p>
To get support for custom OIDs in the Admin GUI you must edit the file src/java/profilemappings.properties and add your new
OID in the end. Just follow the example in the file, and you will get the possibility to add you oid in the End Entity Profile, 
and following that also when adding new users.
If you edit profilemappings.properties, you should also add an entry in src/adminweb/languages/languagefile.XX.properties (where XX is you language).
Otherwise your new field will be displayed as the key that you entered (which is probably ok also) in the admin-GUI. The new field you must add in the language file is
the last field in profilemappings.properties, i.e. the LanguageConstant.
</p><p>
EJBCA will by default put unknown OIDs in the end so the DN will probably be displayed as: CN=MyCommonName,C=SE,1.1.1.1=MyCustomOid 
(if looking at the asn1 coding, different application display in a different order regardless of the asn1 coding).
<br/>
If you need a particular order of DN components, you can add a file 'dncomponents.properties' in the directory ejbca/src/java. 
There is a file called dncomponents.properties.sample in the distribution as a starting point (it shows the default ordering in EJBCA). 
You custom oid must be placed in the right place in that file, and all components from the sample file should be included, or you will get 
strange behaviour.
<br/>
Using the dncomponents.properties file is only needed if you need to control the ASN.1 ordering of DN elements.
<br/>
After updating dncomponents.properties you need to run 'ant clean' before re-deploying EJBCA.
</p>
<p>
A word of caution:
<br/>If you use custom OIDs, they better not become standard ones later on, because if the underlying ASN.1 library in EJBCA starts to 
know the OIDs as standard ones, things will be renamed in the database and you will have to do a database migration.
Also you must keep track of dncomponents.properties when upgrading EJBCA.
</p><p>
Stick to the standard is my advice!
</p>
<p>
Having all these customizations off-course requires some maintenance on your part, so don't forget your customizations when upgrading EJBCA to a new version.
<br/>
Check RELEASE_NOTES for important changes!
</p>
<subsection name="altNames">
<p>
Adding custom OIDs in altNames works the same way as for DN.
When a custom OID is used the altName string in the database will be for example "rfc822Name=foo@bar.com, 1.1.1.1=foobar".
<br/>
A Custom OID is always added as OtherName using a simple UTF8String. See <a href="http://www.ietf.org/rfc/rfc3280.txt">RFC3280</a> for definition of the OtherName altName.
<br/>
The OtherName consists of:
<ul>
<li>The custom oid</li>
<li>An UTF8String with the value</li>
</ul>
</p>
</subsection>
</section>
<section name="Custom Certificate Extensions">
<p>
From EJBCA 3.4 it is possible to add customized certificate extensions to certificates.
Simple extensions only containing a static value can be added by simply editing a property file, these are called
"basic certificate extension". It is also possible to generate advanced certificate extension by
implementing a simple Java interface.
</p>
<subsection name="Configuring Custom Certificate Extensions">
<p>
Certificate extensions are configured in the file 'src/java/certextensions.properties'.
All extensions should have a id ranging from 1 up to 255, the number order is important.
</p>
The following properties must be set for each extension (all beginning with idN.)
<ul>
<li>oid : The unique OID of the extension (Required)
</li>
<li>classpath : Full class name of the CertificateExtension implementation class. (Required)
</li>
<li>displayname : Display name of the extension in the 'Edit Certificate Profile' page (Required)
</li>
<li>used : Defines if the extensions should be used or be disabled. (Required)
</li>
<li>translatable : If the display name should be translated in the language resources. (Required)
</li>
<li>critical : Defines if the extension should be marked as critical in the certificate. (Required)
</li>
<li>property.'property' : It is possible to define properties to the actual implementation of the CertificateExtension, for example does the BasicCerticateExtension require the properties 'encoding' and 'value' to be set.
</li>
</ul>
<p>
After the file is configured rebuild and deploy EJBCA.
</p><p>
After extensions have been added it is possible to select them for a certificate profile
in the 'Edit Certificate Profile' page.
</p>
</subsection>
<subsection name="Basic Certificate Extension">
<p>
In order to create a Basic Certificate Extension you set the "classpath" property to org.cesecore.certificates.certificate.certextensions.BasicCertificateExtension
and specify the properties idX.property.encoding and idX.property.value 
(idX.property.value is optionally if idX.property.dynamic=true).
See the following table for the available encodings and how their value is interpreted:
</p>
<ul>
<li>DERBITSTRING : A String containing the characters '0' and '1'.
</li>
<li>DERINTEGER : A String containing digits only in decimal digits.
</li>
<li>DEROCTETSTRING : A String containing hex data representation.
</li>
<li>DERBOOLEAN : The string 'true' or 'false'.
</li>
<li>DERPRINTABLESTRING : A string containing valid printable string characters (a-z, 0-9).
</li>
<li>DERUTF8STRING : A string in UTF-8 format.
</li>
<li>DERIA5STRING : An ASN.1 IA5String containing valid printable string characters (a-z, 0-9).
</li>
<li>DERNULL : Value isn't used, an empty value.
</li>
<li>DEROBJECT : The hex encoded DER value of the extensions. You can use this to create any extension with sequences etc.
</li>
<li>RAW : The hex encoded byte array value of the extensions. You can supply any data hex encoded to be used as the extension value bytes.
</li>
</ul>
<p>Examples of certificate extensions that you can configure with the BasicCertificateExtension are given in 'src/java/certextensions.properties'.
</p>
<ul>
<li>MS application policies
</li> 
<li>NetscapeCertType
</li>
<li>NetscapeComment
</li>
<li>NetscapeCARevocationURL
</li>
<li>NetscapeRevocationURL
</li>
<li>...
</li>
</ul>
<p>If the the property idX.property.dynamic is configured to true the extension value may be taken from extension data supplied with the end entity. See <a href="userguide.html#Custom%20certificate%20extension%20data">Custom certificate extension data</a> for how this can be added from admin web.</p>
</subsection>
<subsection name="Implementing an Advanced Certificate Extension">
<p>
To create an advanced extension it is required to create a Java class extending
the CertificateExtension abstract class. One method getValue is required and
the current user data, CA and certificate profile is sent to the extension in order
to generate dynamic extensions.
</p><p>
If your advanced extension needs to return a byte array that is not necessarly 
an ASN.1 structure it is possible to override the getValueEncoded method as this 
is the method EJBCA will call when adding the extension to the certificate. See 
BasicCertificateExtension.java for an example of this special case.
</p><p>
In addition to static values defined as properties in certextensions.properties 
it is also possible to get values from the extension data in the end entity's 
extended information store. A good choice is to use the extension oid as a 
prefix to the key of the property to associate the value with this extension.
</p><p>
Here is an example of a simple advanced extension. To add this extension to EJBCA
create properties for it in certextensions.properties and make sure the full class
name is set as its "classpath" property, also make sure the class is accessible on 
the classpath and redeploy.
</p>
<source>
public class SomeAdvancedCertificateExtension extends CertificateExtension {

    private static String PROPERTY_SOMEPROPERTY = "someproperty";

    /**
     * The main method that should return a byte[] with the ASN.1 encoded data to be put in the extension valud
     * using the input data (optional) or defined properties (optional)
     * 
     * @see org.cesecore.certificates.certificate.certextensions.CertificateExtension#getValueEncoded
     */
    @Override
    public byte[] getValueEncoded(EndEntityInformation userData, CA ca, CertificateProfile certProfile, PublicKey userPublicKey, 
        PublicKey caPublicKey, CertificateValidity val ) 
        throws CertificateExtentionConfigurationException, CertificateExtensionException {
        try {
            // Optionally get dynamic values for this extension
            //String dynamicValue = userData.getExtendedinformation().getExtensionData(getOID() + ".someotherproperty");
            String value = getProperties().getProperty("FOO");
            DERPrintableString asn1value = new DERPrintableString(value);
            return asn1value.toASN1Primitive().getEncoded();
        } catch (IOException e) {
            throw new CertificateExtensionException("Error constructing certificate extension SomeAdvancedCertificateExtension.", e);
        }
    }

    /**
     * @deprecated use getValueEncoded instead.
     */
    public ASN1Encodable getValue(EndEntityInformation userData, CA ca, CertificateProfile certProfile, PublicKey userPublicKey, PublicKey caPublicKey, CertificateValidity val)
    throws CertificateExtensionException, CertificateExtentionConfigurationException {
        throw new UnsupportedOperationException("Use getValueEncoded instead");
    }
}
</source>
</subsection>
</section>

<section name="Logging">
<subsection name="Security Audit log vs System log">
<p>A PKI system have two different type of log:
</p>
<ul>
<li>Security Audit Log  - Use for PKI auditors to audit important security PKI events that the system performed.</li>
<li>System Log - Used to monitor daily operations in the system, debug and track down errors etc.</li>
</ul>
<p>
The Security Audit Log is specified in detail what it does log, and it does not log other things. 
The Security Audit log logs important events such as "Certificate issued", "Certificate Profile edited", "Administrator accessed resource".
One of the most important aspects to consider is that the Security Audit log does <strong>not</strong> log things that do not happen. 
Things that do not happen are for example invalid requests that the system rejects, becuase the PKI system did not perform any important
auditable event.
</p>
<p>
The System Log logs all events that are interesting to monitor, such as rejecting invalid requests, reading profiles etc.
</p>
<p>
The main purpose of the Security Audit Log is to provide information to an auditor, and the auditor wants to know what the system has done, what certificates were issued etc, 
but is not so interested in what the system did not do.
</p>
<p>
The Security Audit Log is stored in the database and the System Log is stroed in log files. By default the System Log also contains the Security Audit Log, but this can be configured.
</p>
</subsection>
<subsection name="Security Audit Log">
<p>
The are two different logging devices available for official security audit events (creation of certificate etc).
What log devices to use, can be configured in conf/cesecore.properties.
</p>
<p>
These devices should not be confused with the info/debug output that is sent to Log4J directly.
You can find more information on how to configure Log4J in doc/howto/log4j.txt.
</p>
<p>
It is recommended to only allow new log-posts to the database-tables. More information on this can be found in doc/howto/HOWTO-database.txt.
</p>
<subsubsection name="Services, Modules, Events and Status">
<p>
The security audit events are divided into Services, Modules, Events according to from where it originates.
The full list of the different Service, Module and Event types and a short explanation for each type can be found in
<a href="logtypes/index.html" target="_blank">JavaDoc format of the API</a>.
Since EJBCA is build around the CESeCore project, to see all possible event types that EJBCA can generate both
<a href="logtypes/org/cesecore/audit/enums/EventTypes.html" target="_blank">EventTypes</a> and
<a href="logtypes/org/ejbca/core/ejb/audit/enums/EjbcaEventTypes.html" target="_blank">EjbcaEventTypes</a> in the API doc needs to be considered.
</p>
<p>
An example of how such an event would look like in the server log using the Log4jDevice is the event that the application is starting:
<pre>
... INFO  [Log4jDevice] 2015-03-20 12:47:51+01:00;EJBCA_STARTING;SUCCESS;SERVICE;EJBCA;StartServicesServlet.init;;hostname;;msg=Init, EJBCA 6.3.1Alpha (working copy) startup.
</pre>
and the same kind of event using IntegrityProtectedDevice that writes the log entry to the database:
<pre>
mysql> select * from AuditRecordData where eventType='EJBCA_STARTING' ... \G
               pk: 24861ebf7f00010106e5a024d82c694d
additionalDetails: ...  Init, EJBCA 6.3.1Alpha (working copy) startup.  ...
        authToken: StartServicesServlet.init
         customId: NULL
      eventStatus: SUCCESS
        eventType: EJBCA_STARTING
           module: SERVICE
           nodeId: hostname
    rowProtection: 1:2:123:4d2f6...
       rowVersion: 0
    searchDetail1: hostname
    searchDetail2: NULL
   sequenceNumber: 17640195
          service: EJBCA
        timeStamp: 1426205614754
</pre>

This should be interpreted as the following:
<ul>
<li>Service is EJBCA (not shown in the Admin GUI) : the event originates from the part of the application that not part of the core shared with other projects.</li>
<li>Module is SERVICE: this event was generated from a module in EJBCA that is responsible for background services.</li>
<li>Event is EJBCA_STARTING: the application EJBCA is starting up.</li>
<li>Status (named "Outcome" in the Admin GUI) is SUCCESS: in the context of the event, this should be interpreted as no error were detected during the EJBCA startup.</li>
<li>Additionally there is an event specific message with additional information telling us (in this case) the version of EJBCA that was started.</li>
</ul>
Also note that the time in the log entry itself is the time of the event and might differ from the time when this was written to the server log.
</p>
</subsubsection>
<subsubsection name="Log4JLogDevice">
<p>
Appends the information from the offical event to the console or file. This is
the same target where all the other info/debug output is sent to. There are no
protection from alteration and events sent to this device cannot be fetched
back to EJBCA for display in the Admin GUI.
</p>
<p>
You can find information about configuring log4j on JBoss in the EJBCA <a href="http://wiki.ejbca.org/ejbca-install#toc5">wiki</a>.
</p>
</subsubsection>
<subsubsection name="IntegrityProtectedDevice (EJBCA Enterprise only)">
<p>
The integrity protected log device stores audit record in the AuditRecordData table in the database. 
The record can be protected using either HMAC or digital signatures. See conf/cesecore.properties for configuration options.
See <a href="security.html#Database%20integrity%20protection">Database integrity protection</a> for more information.
</p>
</subsubsection>
<subsubsection name="OldLogDevice">
<p>
The old log device, as it was called in EJBCA 4.0 is no longer available.</p>
<p>
From EJBCA 5.0 the LogEntryData table is no longer used for audit log. The existing log entries can be exported
using by using a small export CLI. Configure conf/database.properties with (if not done already)
<code>
database.url=...
database.username=...
database.password=...
</code>
then build with
<code>
$ ant oldlogexport-cli
</code>
This will create the CLI in "dist/oldlogexport-cli/". Referr the README file in this directory
for further instructions on how to run it.
</p>
<p>
OldLogDevice stores log-events in the database. Viewed events can
be exported from the Admin GUI.
</p>
</subsubsection>
</subsection>
<subsection name="System Log">
<p>The system log is logged using Log4J, and has several different levels of log. You can configure which log level is actually logged.
</p>
<ul>
<li>ERROR - Errors that should cause the IT staff to look into the system. It could be fatal so the system stopped working.</li>
<li>WARNING - Warnings about misconfiguration. The system is still working, but functionality could be degraded.</li>
<li>INFO - Informational messages that are interesting for monitoring purposes and statistic purposes.</li>
<li>DEBUG - Debug information useful to see details of what is happening in the system.</li>
<li>TRACE - Trace information that can be useful to track down bugs or small missconfigurations. Very rich output showing detailed trace of what happpens in the system code.</li>
</ul>
<p>
Configuration of the System log depends on what application server you are using. See the <a href="installation.html">installation</a> section for information about your application server.
There are a few places where it is configured:
</p>
<ul>
<li>$APPSRV_HOME/server/default/conf/jboss-log4j.xml - For JBoss 5</li>
<li>conf/log4j-(appserver-name).xml - For JBoss 6, Glassfish etc</li>
</ul>
<p>In general log4j configuraton to log different levels of EJBCA events can be done like this:
</p>
<source>
&lt;category name="org.ejbca"&gt;
   &lt;priority value="INFO"/&gt;
&lt;/category&gt;

&lt;category name="org.cesecore"&gt;
   &lt;priority value="INFO"/&gt;
&lt;/category&gt;

&lt;root&gt;
   &lt;priority value="ERROR"/&gt;
   &lt;appender-ref ref="FILE"/&gt;
&lt;/root&gt;
</source>
<p>
This will log EJBCA (and CESeCore) event of INFO level, while only logging other types of events (such as JBoss/Hibernate etc) only at ERROR level.
</p>    
</subsection>
</section>

<section name="Command Line Interfaces">
<p>There are four types of command line interfaces (CLI) in EJBCA.
<ul>
<li>The Local CLI that can only be run on the CA machine.</li>
<li>ClientToolBox with commands that can be run remotely, for example the Web Service CLI.</li>
<li>The Local Database CLI , which provides direct access to a local database.</li>
<li>The Validation/Conformance Check Tool </li>
</ul>
</p>
<subsection name="Client Toolbox">
<p><a href="userguide.html#EJBCA%20client%20toolbox">ClientToolBox</a> is a set of tools that are built as a stand alone package, which can be put on any machine and run independently of EJBCA.
If contains among other things a very rich <a href="#Configuring%20Web%20Services%20CLI">Web Service CLI</a>.
</p>
</subsection>
<subsection name="Local Command line interface">
<p>
The local CLI can be run directly on the CA machine, and contains many functions that can be used in scripts, or come to rescue when your admin certificate has expired or you have
accidentally revoked your admin privileges for the admin GUI.</p>
<p>
EJBCA have command line interfaces (CLI) to both the CA and RA, and some other operations.
</p>
<p>
The best documentation for the cli can be found by running it.
<source>
bin/ejbca.sh
bin/ejbca.sh ca
bin/ejbca.sh ra
...
</source>
this will give a list of all available cli commands. To find out which options are available for a specific command, simply run 
the command with no options:
<source>
bin/ejbca.sh ra addendentity
</source>
This will give documentation about available options. 
To access the usage information for some commands, that does not take parameters, the option '-?' can normally be provided.
</p>

<subsubsection name="Return Codes">
<p>Since EJBCA 6.2.0 the local CLI uses return codes, to faciliate scripting. Currently, these are:
<ul>
<li>0 - Normal exit</li>
<li>1 - Functional failure, command was inputed correctly but failed for some other reason</li>
<li>2 - Authentication failure</li>
<li>3 - CLI failure, command failed due to incorrect parameter use.</li>
</ul>
</p>
</subsubsection>

<subsubsection name="Local CLI Authentication">
<p>By default, the CLI authenticates using a standard user defined in ejbca.properties. Disabling this user on the server will lead 
to all CLI operations demanding authentication in the form of the following flags appended to the argument list:</p>
<source>
-u &lt;username&gt; -p
</source>
<p>which will cause the console to prompt for the password. If instead the password should be included in the command line (such as)
	from a script, it can be specified using the following flags:</p>
<source>
-u &lt;username&gt; --clipassword=&lt;password&gt;
</source>
<p>You can also specify that the password is provided as the first line in a file, which can be useful for scripting. It can be specified prepending 'file:' to the password:</p>
<source>
-u &lt;username&gt; --clipassword=file:&lt;filename&gt;
</source>
<p>Where <i>filename</i> is a file, for example /tmp/pwd.txt, containing the password as a single line.</p>
<p>An example CLI command to list CAs can look like:</p>
<source>
bin/ejbca.sh ca listcas -u ejbca --clipassword=file:/tmp/pwd.txt
</source>
<p>Command line users are authenticated from the existing list of End Entities, and are granted the same rights.
You can find the default CLI user in the 'Super Administrator Role' under 'Administrator Roles' after a default install or upgrade.</p>
<p>
<b>Warning:</b> Deleting this user or revoking all it's privileges makes it impossible to use the CLI for any operation that requires administrator rights including 
renewing the Super Administrator certificate! Please, make sure to renew the administrator certificates using the Admin Web 
before they expire!
</p>
</subsubsection>

<subsubsection name="Disabling the Command Line Interface">
<p>
It is possible to completely disable the command line interface to prevent someone from running the operations that require authorization.
</p>
<p>
The setting is located in the admin web under System Functions &gt; System Configuration and the checkbox 
"Enable Command Line Interface Access". By unchecking it operations requiring authorization can not be performed from the command 
line interface.
</p>
<p>
Using this option, in contrast to disabling the CLI users privileges in 'Administrator Roles', makes it possible to easily switch having the CLI enabled or disabled as 
long as you have access to the Admin GUI.
</p>
<p>
<b>Warning:</b> Disabling this makes it impossible to use the CLI for any operation that requires administrator rights including 
renewing the Super Administrator certificate! Please, make sure to renew the administrator certificates using the Admin Web 
before they expire!
</p>
<p>
<b>Note:</b> After changing this property you may need to click the Clear All Caches button or run the CLI command:</p>
<source>
bin/ejbca.sh clearcache -all
</source>
</subsubsection>

</subsection>

<subsection name="Local Database CLI (EJBCA Enterprise only)">
<p>You can build and run the local database CLI with the commands:
</p>
<source>
ant ejbca-db-cli
cd dist/ejbca-db-cli
./run.sh</source>
 <p>The cli contains command that directly accesses a database, export, import, copy, verify audit log and OCSP monitoring. 
 Run the command to get a description about all available commands.</p>
</subsection>

<subsection name="Validation/Conformance Check Tool (EJBCA Enterprise only)">
<p>
The <a href="userguide.html#EJBCA%20Validation/Conformance%20Tool">Validation/Conformance Tool</a> is a tool for running tests on issued certificates or OCSP responses to see that they match the configured criteria.
</p>x
</subsection>
</section>

<section name="Backup and Restore">
<p>EJBCA is an enterprise software designed to operate in a high avaialbility and high performance environment.
Backup of EJBCA is essential for most organizations, and EJBCA is designed to make backup easy.
Backing up of EJBCA consists of static and dynamic data. Static data does not change during normal operations, and only needs to be backed up when changed. 
Dynamic data is the data that is changed during daily operations. All dynamic data is stored in the database. 
</p>
<ul>
<li>Dynamic data that needs to be backed up regularly:</li>
<ol>
<li>Database contents.</li>
</ol>
<li>Static data that only needs to be backed up when changed:</li>
<ol>
<li>EJBCA program files.</li>
<li>EJBCA configuration (ejbca/conf).</li>
<li>Admin and SSL keystores (ejbca/p12).</li>
</ol>
</ul>

<subsection name="Backup and Restore CLI">
<p>EJBCA provides a command line interface (CLI) for backup and restore operations. This is a simple CLI that shows the principles and the data that needs to be backed up.
The CLI provides integrity protected backup, with verification during restore. This is often needed, in some form, in certified (CWA, Common Criteria, etc) installations.
</p>
<note>
The CLI is not suitable for use in very large or high volume installations. In those cases we recommnd using database native backup tools as recommended by your database.
</note>
<note>
Access control on the local OS is out of the scope for EJBCA. Users with access to the OS (and database passwords etc) can access the backup and restore scripts. 
To enforce role separation set appropriate file system privileges on all files. 
</note>
<p>
Run backup and restore with the commands:
</p>
<source>
cd bin/backup
./backup.sh
./restore.sh
</source>
</subsection>
</section>

<section name="High Availability (HA), a.k.a Clustering">
<p>
EJBCA is designed to work well in a clustered, high availability configuration. The key to EJBCA high availability is to have a HA database, since all EJBCA nodes shares the same database.
The process of setting up EJBCA in a HA setup is:
<ol>
<li>Install a HA database. The process for this differs between databases, consult your database documentation/vendor.</li>
<li>Install EJBCA on one EJBCA application node and perform all needed configuration.</li>
<li>Deploy EJBCA with the exact same configuration on other application nodes.</li>
<li>If you are using HSMs, connect one HSM with the same (duplicated) keys on all EJBCA application nodes. Alternatively set up a HA HSM configuration according to your vendors instructions.</li> 
</ol>
When setup you can connect to any of the EJBCA application nodes, and use load balancers to failover and/or spread the load between the different EJBCA application nodes.
</p>
<p>A note of caution. Setting up and managing a fully HA database can be very difficult and/or expensive. You may consider different variants of HA databases, such as replication with manual or automatic failover. 
The possibilities are virtually unlimited, only your requirements and imagination can decide what type of configuration works best for you.
</p><p>
The upgrade EJBCA without downtime, you can make use of a few properties to enforce backwards compatibility during node upgrades. See doc/UPGRADE for all version you upgrade between for details.
</p>
</section>

<section name="Monitoring and healthcheck">
<p>In EJBCA there exists a health check service that can be used for health monitoring. 
It is also useful for cluster, as it can be checked by load balancers to determine if a node should be active in the cluster (healthy) 
or taken out of the cluster (unhealthy). 
</p><p>
The servlet is located in the URL: http://localhost:8080/ejbca/publicweb/healthcheck/ejbcahealth
and is configured using conf/ejbca.properties.
</p><p>
The following configuration parameters may be set to configure authorization and what the service checks:
</p>
<ul>
<li>healthcheck.amountfreemem, default: '1' - The number of Mb of memory that must be free.</li>
<li>healthcheck.dbquery, default: 'select 1' - Parameter indicating the string that should be used to do a minimal check that the database is working.</li>
<li>healthcheck.authorizedips, default: '127.0.0.1' - Specifies which remote IPs that may call this healthcheck servlet. Use ';' between multiple IPs.</li>
<li>healthcheck.catokensigntest; default: 'false' - if the check of CA tokens should actually perform a signature test on the CA token, or it should only see if the token status is active.</li>
<li>healthcheck.publisherconnections, default: 'false' - Defines if test connections agains all configured publisers should be performed.</li>
</ul>
<p>By editing a maintenance file on the server, you can make the service return an error message stating that the server is down for mainenance.
This is very useful in a cluster when you can take cluster nodes in and out of rotation by editing a simple text file.
</p>
<ul>
<li>healthcheck.maintenancefile, default: not set - location of file containing information about maintenance.</li>
<li>healthcheck.maintenancepropertyname, default: DOWN_FOR_MAINTENANCE - the healthcheck.maintenancefile should contain a single line like this 'DOWN_FOR_MAINTENANCE=true'.</li>
</ul>
<p>The following parameters configure what message or HTTP error code the health service returns.
</p> 
<ul>
<li>healthcheck.okmessage, default: 'ALLOK' - Text string used to say that every thing is ok with this node.</li>
<li>healthcheck.sendservererror, default: 'true' - if a HTTP errorcode 500 should be sent in case of error.</li>
<li>healthcheck.customerrormessage, default: null - Set this parameter if you want a static error message instead of one generated by the HealthChecker.</li>
</ul>
<p>
If an error is detected one or several of the following error messages is reported.
</p>
<ul>
<li>"MEM: Error Virtual Memory is about to run out, currently free memory : number" - The JVM is about to run out of memory.</li>
<li>"DB: Error creating connection to database" - JDBC Connection to the database failed, this might occur if DB craches or network is down.</li>
<li>"CA: Error CA Token is disconnected: CAName" - This is a sign of hardware problems with one or several of the hard ca tokens in the node.</li>
<li>"MAINT: DOWN_FOR_MAINTENANCE" - This is reported when the healthcheck.maintenancefile is used and the node is set to be off line.</li>
<li>"Error when testing the connection with publisher: PublisherName" - This is reported when a test connection to one of the publishers failed.</li>
</ul>
<note>To be fully Common Criteria compliant, a different key for signature tests than certificate signing should be used in the CA's HSM token
configuration (the "testKey" alias should point to a key with no other uses). 
</note>
</section>

<section name="Reference manual">
<p>
All configuration options, JNDI names etc is configured through the use of properties files in conf/*.properties file.
You can copy the .sample files to respective .properties files and configures. Most options are documented in the .samples files. 
</p>

<subsection name="Other Configuration">
<p>
To change ports (default public http=8080, public https=8442, private https=8443) you must edit 
conf/web.properties. Change the properties httpserver.pubhttp, httpserver.pubhttps and httpserver.privhttps.
After making the change, run 'ant deploy', 'ant web-configure', and re-start the application server.
</p></subsection>

<subsection name="Asn1Dump">
<p>
You can make an asn1 dump of a certificate in order to study the asn1 produced:
</p>
<source>
bin/ejbca.sh asn1dump &lt;filename-of-pem-encoded-certs or filename-of-der-encoded-asn1&gt;
Ex: bin/ejbca.sh asn1dump managementca.pem
</source>
</subsection>

<subsection name="Batch creation of certificates">
<p>
Certificates can be created batch-wise with EJBCA. The class
org.ejbca.ui.cli.batch.BatchMakeP12 creates keystore files for
all users designated as NEW or FAILED in the local RA database. 
To be able to batch generate certificates, the users must be registered 
with clear text passwords. To set a clear text password for a user use
</p>
<source>
bin/ejbca.sh ra setclearpwd username password
bin/ejbca.sh ra setendentitystatus username 10
</source>
<p>
The same is accomplished in the Admin-GUI by checking the checkbox 'Batch generation' when adding the user.
</p>
<p>
To generate keystore files for all users with status NEW or FAILED, run 
</p>
<source>
bin/ejbca.sh batch 
</source>
<p>
This will generate files for users if their clear text passwords are NOT null.
</p><p>
Without arguments 'batch' generates keystore files for all NEW or FAILED users.
To generate a keystore file for a specific user, enter command
</p>
<source>
bin/ejbca.sh batch username
</source>
<p>
Generated keystore files are stored in a subdirectory (to the
current directory) called 'p12'. If the directory does not exist, 
it will be created.
Make sure this directory is WELL protected, since the
information contained in keystore files are secret (private keys).
The format of keystores generated, PKCS12, JKS or PEM, is defined when adding the 
user in the database (using 'bin/ejbca.sh ra addendentity' or the admin-GUI).
</p></subsection>

<subsection name="Fetching certificates and CRLs">
<p>
Certificates and CRLs can be fetched through the public web-interface. 
They can also be fetched directly from
 the 'CertificateStoreSession' session bean or using the command 
 'bin/ejbca.sh ca getcrl'
</p></subsection>

<subsection name="Other deployment scenarios">
<p>
EJBCA can be run with servlets and EJBs or only with EJBs. The
servlets are only a publicly available front-end to the beans. 
If the CA is deployed integrated in another JEE application, 
this front-end may not be needed.
</p></subsection>

</section>

<section name="Customizing EJBCA">
<p>
You can change any part of EJBCA to better suit your specific needs.
</p>
<subsection name="Handling changes in a separate tree (EJBCA >= 3.5)">
<p>
You can keep your personal modifications of EJBCA in a separate tree. Set the location
of your personal modifications in conf/custom.properties or use the default location
'$EJBCA_HOME/../ejbca-custom'. Your modifications will automatically overwrite any
existing file(s) found in the EJBCA_HOME-directory or its subdirectories before
executing an 'ant'-command. A sample, conf/custom.properties.sample, is provided. 
</p>
<p>
Example usage: <br />
You have a working set of configuration files and database from the latest
stable release, and want to try the latest trunk snapshot.
<ul>
<li>Backup your database</li>
<li>Copy $EJBCA_HOME/conf/ to $EJBCA_HOME/../ejbca-custom/conf/</li>
<li>Copy $EJBCA_HOME/p12/ to $EJBCA_HOME/../ejbca-custom/p12/</li>
<li>Copy $EJBCA_HOME/src/java/*.properties to $EJBCA_HOME/../ejbca-custom/src/java/*.properties</li>
</ul>
You can now remove the entire $EJBCA_HOME-directory and replace it with the a fresh snapshot from
the trunk. Restore the database and all the config and generated keys will be restored to $EJBCA_HOME
next time you run "ant deploy" etc.
</p>
<p>
Please note that
<ul>
<li>there is no way to recover overwritten files, so you have to manually restore
files if needed.</li>
<li>ant will not be able to detect if your changes are incompatible with newer
versions of EJBCA. Always use 'diff' on the different versions to see if any file
you override is affected.</li>
<li>contributed new features or improvements that many would benefit from is greatly
appreciated by the community and makes your maintenance easier</li>
</ul>
</p>
</subsection>
<subsection name="Adding your own public web-pages">
<p>
The public web-pages are written in JSP and can be found under modules/publicweb-gui/resources/.
Modify the pages (directly or by using a separate tree), rebuild and redeploy. The
changes should show on http://<i>ejbcahost</i>:8080/ejbca.
</p>
</subsection>
<subsection name="Plug-in interfaces">
<p>There are several plug-in interfaces where you can extend functionality using your own classes:
</p>
<ul>
<li><a href="#Custom%20publishers">Publishers</a>.</li>
<li><a href="#Writing%20Customized%20Services">Services</a>.</li>
<li><a href="#Framework%20for%20External%20User%20Data%20Sources">External User Data Sources</a>.</li>
<li><a href="#Custom%20Certificate%20Extensions">Custom Certificate Extensions</a>.</li>
<li><a href="#Email%20notifications">Custom email notification recipients</a>.</li>
</ul>
<p>
And of course, since it is open source you can modify anything you like, or use any of the interfaces and create your own add-ons.
See below for how to easily manage such add-ons and plugins.
</p>
</subsection>

<subsection name="EJBCA plugin build system">
<p>
In case you (for example) want to extend the RA functionality considerably, possibly including additional
database tables as well, you may consider using the EJBCA plugin scheme which provides custom
applications with the core EJBCA environment data. In the directory src/samples/plugins you will find
a couple of complete demo plugins that can be added to an existing EJBCA installation
without any configuration. See the src/samples/plugins/README file for details.
Also see conf/plugins/plugin.properties.sample for instructions how to layout and configure your plugins.
</p>
<p>Plugins are built and packaged together with the rest of the EJBCA components into the "ejbca.ear" file.</p>
</subsection>

<subsection name="Adding your own rules to regulate the values of End Entity Fields">
<p>
It is possible to define a set of rules to control the format of the End Entity fields. For example, it is possible to ensure that 
the subject DN serial number is always a number of six digits, or should always end with the letter 'N'.
</p>
<p>
Setting such rules is done by implementing the static function org.ejbca.core.model.ra.FieldValidator.validate(). In this function,
you can define a rule that is applicable to a specific field in a specific End Entity profile. Should the field value not match
the rule, a CustomFieldException should be thrown and the error message you set in the exception will be shown as the error message
in the GUI. This rule will be checked each time an end entity is added or changed, whether is was added or changed by the GUI or otherwise.
</p>
<p>
To avoid losing these rules when updating the EJBCA version, the new FieldValidator class should be stored in a ejbca-custom catalog. 
Please see the "Handling changes in a separate tree" section above.
</p>
</subsection>
</section>

<section name="Using the demo servlet">
<p>
It is a demo servlet that will accept any incoming post, create a user with a unique username, and instantly
send back a certificate. The entity- and certificate profiles used are sent as parameters in the post.

To set up the demo servlet:
</p>
<ol>
<li>Find out the CA id of the CA you want to use for signing of the demo certificates. Use the Admin GUI or 'bin/ejbca.sh ca listcas' to find the integer value that is the CA id.</li>
<li>Configure the CA id in src/java/org/ejbca/ui/web/pub/DemoCertReqServlet.java, it's the parameter DEFAULT_DEMOCAID.</li>
<li>Edit src/publicweb/publicweb/WEB-INF/web.xml and uncomment the two sections for the demo servlet.</li>
<li>If using UTF-8 to display the web-page containing the demo form to the users, change ISO-8859-1 to UTF-8 for the env-entry 'contentEncoding'. Otherwise national characters in names will be encoded/displayed incorrectly in the certificates.</li>
<li>Deploy with 'ant deploy'.</li>
<li>Create an end entity profile and a certificate profile that should be used for the demo certificates.</li>
<li>Create a demo apply page containing something similar to the sample form below for Firefox. There are some sample scripts under modules/publicweb-gui/resources/.</li>
</ol>
<source>
&lt;form name="demoreq" action="http://127.0.0.1:8080/ejbca/democertreq" method="post">
  Please fill out the form and click &lt;b>Enroll&lt;/b> to receive your certificate.
  Read our &lt;a href="http://www.primekey.se/primekey/en/Demo.html">privacy policy&lt;/a>.&lt;br>
  &lt;input name="certificateprofile" value="DemoCertProfile" type="hidden">
  &lt;input name="entityprofile" value="DemoEntityProfile" type="hidden">&lt;br>
  &lt;br>
  Full name:
  &lt;input name="user" value="C=SE,O=PrimeKey Solutions AB,OU=Demo,CN=" size="25" maxlength="60" class="input" type="text">
  &lt;p align="left"> E-mail:
  &lt;input name="email" size="25" maxlength="60" class="input" type="text">
  &lt;input name="includeemail" value="true" type="hidden">
  &lt;/p>
  &lt;p align="left"> Choose key length from the list below. The default is recommended in most cases. &lt;br>
  &lt;br>
  &lt;keygen type="hidden" name="keygen" value="challenge">
  &lt;/p>&lt;p align="left">
  &lt;input value="Enroll" name="submit" type="submit">
&lt;/form>
</source>
<p>
You can use some hidden fields and some java script to for example only ask for a name, and concatenate it with a hidden partial DN to produce
a full dn for the 'user' parameter. Use your imagination!
</p>
</section>

<section name="Samples">
<p>
A collection of samples are available in the directory src/java/org/ejbca/samples/ and doc/samples/. You can also look for classes with "Dummy" in the name.
</p></section>

<section name="Troubleshooting">
<p>
<ul>
<li>To find cause and description of errors look in the JBoss server log. For JBoss 5 this is located in server/default/log/server.log. For JBoss 7/EAP 6 it is located in standalone/log.</li>
<li>If this does not display enough information, enable DEBUG logging according to the Log4J configuration described above and check the log file.</li>
<li>Don't get intimidated by long stack-traces. Try to look for the message text and additional clues on lines starting with "Casued by:"</li>
<li>Check the documentation. Double-check so everything really is configured the way it should and that you did not skip any step that didn't seem important.</li>
<li>Try to reproduce this in a test environment with full DEBUG logging.</li>
<li>Find out under what circumstances this occurs: seemingly spontanious or as a response to a certain set of actions or input</li>
<li>Search for a solution. Perhaps someone else has had this problem and discussed it somewhere?</li>
<li>Use support forums or mailing list to get help (provide full context, environment, the relevant logs, steps taken and what you are trying to accomplish)</li>
<li>File a bug report in the issue tracker</li>
</ul>
Also note that you can get professional support from <a href="http://www.primekey.se/Services/Support/">PrimeKey</a>.
</p>
</section>

<section name="Character limitations">
<p>
Since the Admin GUI still uses some JSP and EJBCA at some occasions uses string concatenation
to build SQL querys, we have to ban some characters to avoid XSS-attacks and SQL-injections:
</p>
<code>
\"  \n \r \\ ; ! \0 % ` &lt; &gt; ? $ ~
</code>
<p>
(\n is newline, \r is carriage return, \\ is backslash, \0 is null)
</p><p>
These characters will be replaced by /. ',' can be escaped ,'\,'.
The current JavaScrips used in Admin GUI might also limit you ability to use any UTF-8 character. 
</p>
<p>org.cesecore.util.StringTools contains the full list of characters banned for different purposes.</p>
</section>

<section name="Code signing">
<p>
Being able to verify the integrity of a release or deployed EAR-archive might be
required for some setups. Currently both ant targets "ziprelease" and "ca.ear"
(invoked from "deploy" and the default target) supports jar-signing
with the "jarsigner" command included with Java. Note that you still could remove
files from a signed archive without anyone noticing since the files are signed
individually. To create a signed ziprelease of EJBCA:
</p>
<source>
ant ziprelease -Dejbca.zipversion=x_y_z -Dsignjar.keystore=p12/releasesigner.jks -Dsignjar.keystorealias=releasesigner -Dsignjar.keystorepass=foo123
</source>
<p>
The certificate used for the signature must have key usage "Digital Signature"
and extended key usage "Code Signing". The signed archive can be verified using
the "jarsigner" command and the CA-certificate. This example will output any
unsigned file or file with a bad signature: 
</p>
<source>
$ jarsigner -verify -keystore p12/truststore.jks -verbose ../ejbca_x_y_z.zip | grep -v "^smk" | grep -v "^ *0"

      246809 Tue Oct 21 13:28:48 CEST 2008 META-INF/MANIFEST.MF
      246930 Tue Oct 21 13:28:48 CEST 2008 META-INF/RELEASES.SF
        1859 Tue Oct 21 13:28:48 CEST 2008 META-INF/RELEASES.RSA

  s = signature was verified 
  m = entry is listed in manifest
  k = at least one certificate was found in keystore
  i = at least one certificate was found in identity scope

jar verified.
</source>
<p>
OpenSSL can be used to sign and verify an entire archive, but requires the
public key from the signing certificate:
</p>
<source>
$ openssl dgst -sha1 -sign p12/pem/releasesigner-Key.pem -out ../ejbca_x_y_z.zip.SHA1withRSA ../ejbca_x_y_z.zip
$ openssl x509 -inform pem -in p12/pem/releasesigner.pem -pubkey -noout > p12/pem/releasesigner-Pub.pem
$ openssl dgst -sha1 -verify p12/pem/releasesigner-Pub.pem -signature ../ejbca_x_y_z.zip.SHA1withRSA ../ejbca_x_y_z.zip
Verified OK
</source>
</section>

<section name="Maximizing performance">
<p>Normally in a PKI extreme performance is not really an issue. A default installation of EJBCA can easily issue tenths of certificates per second, 
which is more than enough even for very large installations. 
For OCSP it is more important, but OCSP is also more light weight so the default performance there is hundreds of requests per second. </p>
<p>In more specialized PKI installations there can however be the need to issue hundreds of certificates per second. Therefore we provide a small list of
configuration items that can maximize performance of EJBCA to issue more than 100 certificates per second (depending on hardware etc).</p>
<ul>
<li>Disable logging to database in cesecore.properties, only use Log4jLogDevice. This removes a database insert and gives a big boost.</li>
<li>Configure Log4j to log only to file, not console, and use only INFO or ERROR logging, not DEBUG. This can give a small improvement.</li>
<li>Disable use of CertReqHistory in CA configuration. This removes a database insert and gives a big boost.</li>
<li>Disable finishUser in CA configuration. Verify that this is ok first by reading the documentation for this feature. This can save a database read and update.</li>
<li>Enable all caches in cache.properties. If you cache indefinately you can use the cli command 'bin/ejbca.sh clearcache' if configuration changes are made. This can give a small improvement. See also info about the <a href="#Clear%20All%20Caches">clear all caches button</a>.</li>
<li>Do not enforce any uniqueness (keys, DN, Subject DN SerialNumber) in CA configuration. This will ensure no extra selects are made and can give a small improvement.</li>
<li>Minimize the number of indexes in the database, only use the ones that are absolutely needed. This makes inserts in the database a bit faster and can give additonal 10%.</li>
<li>Use the native JBoss connectors for http and https. This can give an additional 10%.</li>
<li>If you have a lot of certificates (>100M) it might be a good idea to use a separate table for the storage of the encoded certificates. See the database.useSeparateCertificateTable property in ./conf/database.properties.sample</li>
</ul>
<subsection name="Throw away CA">
<p>EJBCA have a configurable function going by the name of "throw away CA". This is an option where EJBCA simply functions as a high speed certificate factory, issuing certificates but not storing any trace of them in the local database.
</p><p>Using the throw away CA option naturally comes with many limitations,  unless taken care of in another way external to EJBCA.
</p>
<ul>
<li>You can not search for issued certificates.</li>
<li>You can not revoke certificates, and thus not use CRLs or OCSP.</li>
<li>You can not enable some limitations such as <a href="userguide.html#Enforce%20unique%20DN">Enforce unique DN</a> or <a href="userguide.html#Enforce%20unique%20public%20keys">Enforce unique public keys</a>.</li>
</ul>
<p>If these limitations are acceptable you can gain some benefits by using the throw away CA option:</p>
<ul>
<li>Maximum performance since no database queries are done. Enable to maximum caching and EJBCA will not make a single call to the database.</li>
<li>Minimal storage requirements. Since no issued certificates are stored in the database only EJBCA configuration needs storage.</li>
</ul>
</subsection>
<subsection name="Clear All Caches">
<p>This button is located under <i>System Configuration</i> and is used to clear the global configuration cache, end entity profile cache, certificate profile cache, log configuration cache, authorization cache and CA cache on all the 
nodes in this cluster. In order for this to work, the operation system should be configured to map the names of the nodes to their IP addresses (i.e. DNS or hosts file). The configuration should be done on all 
the nodes in the cluster. See also <a href="#Maximizing%20performance">maximizing performance</a> for information about caching.
<br/>Pressing this button sends a http request to the ClearCacheServlet on all the nodes in the "Nodes in Cluster" list. Only other nodes that are in the "Nodes in Cluster" list are allowed to call the ClearCacheServlet. Authorization is based on caller's IP address.
</p><p>
On startup of EJBCA each node adds its hostname to the "Nodes in Cluster" list. The list can also be manually edited on the System Configuration page.
</p>
</subsection>
</section>

</body>
</document>
