This Howto was contributed by James A. Rome. This howto is not updated with the frequency of the regular
documentation on ejbca.org, so it may get outdated. This howto is mainly written for EJBCA 3.2.x.
You configuration and platform probably differs from James's so don't follow this guide by the word, 
unless you have an identical environment.

-----
How to create a new and upgraded clone of your CA on SUSE 10.1
James A. Rome
Oak Ridge National Laboratory
jar@ornl.gov

I had SuSE 9.1 on my existing CA and need to upgrade to SUSE 10.1. This requires a clean install 
for success, so the technique is to create a "shadow" copy of the existing CA, but with upgraded 
components. Then these can quickly be moved to the upgraded CA.

The items that must be transferred and upgraded in my installation are:
OpenLDAP
mySQL
EJBCA
Tomcat
JBoss
Tripwire
syslog to remote server
RSA SecurID logins
Java - latest sdk

Install SUSE 10.1 on the shadow machine. Be sure to install OpenLDAP, mySQL, and Tomcat.
In addition, install all the ant extensions or the EJBCA build will not work.
Patch everything during the install process, and after you install any new software from the 
distribution disks.

When you create a user account for yourself, "check receive system mail" and uncheck "automatic login".
----------------------------------------------------------
Add any required disclaimer/warning to /etc/motd
-----------------------------------------------------------
In Yast2, set up the mail transfer agent
-----------------------------------------------------------
Configure the NTP client in Yast2/Network Services
-----------------------------------------------------------
Turn off ssh V1
------------------------------------------------------------
in /etc/ssh, edit ssh_config and sshd_config. Replace the commented out "Protocol 2,1" with
Protocol 2
and run SuSEconfig

---------------------------------------------------------------------
Install and configure Java
---------------------------------------------------------------------------------------------
Download the latest Sun Java sdk. The SUSE ones are old. Install it in /usr/java (the default).
Link it to /usr/java/java
in /etc/skel, edit .bashrc to add
export JAVA_HOME=/usr/java/java
or better yet, put this into /etc/profile.local

The right way to set the system paths is to use update-alternatives.
Go to /etc/alternatives
antlr                   java_sdk_sun_exports            jre_1.4.2_exports
hibernate_jdbc_cache    jaxp_parser_impl                jre_1.5.0
HowTo.txt               jaxp_transform_impl             jre_1.5.0_exports
java                    jce_1.4.2_sun_local_policy      jre_sun
java.1                  jce_1.4.2_sun_us_export_policy  jre_sun_exports
javac                   jce_1.5.0_sun_local_policy      servlet
java_sdk_1.5.0          jce_1.5.0_sun_us_export_policy  subdomain_parser
java_sdk_1.5.0_exports  jmxri                           updateJava.sh
java_sdk_sun            jre_1.4.2

For java, do the following as root:
update-alternatives --verbose --install /usr/bin/java java /usr/java/java/bin/java 2000 \
       --slave /usr/share/man/man1/java.1 java.1 /usr/local/lib/jdk/man/man1/java.1
and then

update-alternatives --verbose --install /usr/bin/javac javac /usr/java/java/bin/javac 2000

Then do 
update-alternatives --config java
and pick the new distribution. Do the same thing for javac.

Put /usr/java/java/bin into your PATH so that you can run things like keytool.

Visit your existing CA and get the CA PEM key.

jardell:~ # cd /usr/java/java/jre/lib/security
jardell:/usr/java/java/jre/lib/security # keytool -import  -trustcacerts -keystore cacerts -alias SensorNetCA -file /home/jar/keys/SensorNetCA.pem
Enter keystore password:  changeit
Owner: C=US, O=Oak Ridge National Laboratory, CN=SensorNetCA
Issuer: C=US, O=Oak Ridge National Laboratory, CN=SensorNetCA
Serial number: 5009b025ca7e49a0
Valid from: Tue Sep 14 10:14:11 EDT 2004 until: Fri Sep 12 10:24:11 EDT 2014
Certificate fingerprints:
         MD5:  D7:42:0F:92:DB:30:1D:74:2F:23:9E:B5:5A:F9:1B:4A
         SHA1: C7:ED:EC:61:6F:A0:29:41:6B:AE:4E:8D:9E:7A:AC:7B:9B:47:5B:1D
Trust this certificate? [no]:  yes
Certificate was added to keystore


Then change your keystore password!

jardell:/usr/java/java/jre/lib/security # keytool -storepasswd -keystore cacerts -new <your_password>

Finally, from the sdk download site, get the high-strength java cryptography extension and put then into 
/usr/java/java/jre/lib/security
jardell:/usr/java/java/jre/lib/security # cp /home/jar/download/jce/*.jar .
jardell:/usr/java/java/jre/lib/security # ls
.   US_export_policy.jar  java.policy    javaws.policy
..  cacerts               java.security  local_policy.jar

Now your Java is ready to go!

-----------------------------------------------------------------------
Install JBoss
-----------------------------------------------------------------------------
Download the latest JBoss distribution.

Unzip JBoss into /opt/jboss (or where ever you want to put it)

Use Yast2 to greate a group for jboss.

Use Yast2 to create a system user jboss with a home directory in /opt/jboss. 
You will have to click the set Filter tab to get a choice for system users.
Disable user login. Go into the Details tab to select the home directory 
and to add jboss to the jboss group.

jardell:/opt # chown -R jboss:jboss jboss

Edit /opt/jboss/bin/jboss_init_suse.sh:

Change
#define the script to use to start jboss
JBOSSSH=${JBOSSSH:-"$JBOSS_HOME/bin/run.sh -c all"}
to
#define the script to use to start jboss
JBOSSSH=${JBOSSSH:-"$JBOSS_HOME/bin/run.sh -c default

Set JBOSS_HOME and the path to java.
Define where you want the console log to be placed.
Be sure this directory exists and is owned by jboss with group jboss.

Copy the script to the startup directory
jardell:/opt/jboss/bin # cp jboss_init_suse.sh /etc/init.d/jboss

Link it to a startup rc command:
jardell:/etc/init.d # ln -s /etc/init.d/jboss /usr/sbin/rcjboss

Put the startup script in the correct init levels:
jardell:/etc/init.d # insserv jboss

--------------------------------------------------------------
Configure mysql (part 1)
--------------------------------------------------------------
jardell:/etc/init.d # insserv mysql
jardell:/etc/init.d # rcmysql start
Creating/Updating MySQL privilege database...
Installing all prepared tables
Fill help tables
PLEASE REMEMBER TO SET A PASSWORD FOR THE MySQL root USER !
To do so, start the server, then issue the following commands (keep quotes):
/usr/bin/mysqladmin -u root password 'new-password'
/usr/bin/mysqladmin -u root -h jardell.ornl.gov password 'new-password'
See the manual for more instructions.
You cannot use characters like '$" in the password. This screwed me several times.
http://dev.mysql.com/doc/refman/5.0/en/resetting-permissions.html

Obtain the mysql Java connector at
http://dev.mysql.com/downloads/connector/j/3.0.html
Put mysql-connector-java-3.1.12-bin.jar in
/opt/jboss/server/default/lib
If you are using tomcat separately, it also needs to be put into
TOMCAT_HOME/common/lib

You need to get a copy of mysqlcc that will work with the new password hash.
It is labeled as mysqlcc-0.9.4 beta. The site I found it at is no longer there :-(

(mysqlcc-0.9.4-linux-glibc23.tar.gz) is the version to get

=> Using mysql-administrator, create an ejbca database by selecting Catalogs, and
right-clicking in the bottom Schema panel to Create a New Schema. Call it ejbca.
=> Using mysql-administrator, add a user ejbca by selecting User Administration
and right-clicking the bottom User Accounts panel.
=> Click @localhost under ejbca to ungray the Schema Privileges Tab and give all privileges to ejbca
for the ejbca database.

---------------------------------------------------------------
Configuring and Securing JBoss
---------------------------------------------------------------

Secure JBoss: http://wiki.jboss.org/wiki/Wiki.jsp?page=SecureJBoss
Be sure to set the password in
jboss/server/default/deploy/management/console-mgr.sar/web-console.war/WEB-INF/classes/web-console-users.properties

Move any application files you need to the JBoss directory tree.

Configure mail: Edit jboss/default/deploy/mail-service.xml
At a minimum, set your "mail.smtp.host" and "mail.from" fields

Deploy jboss, and see if it works with no errors in the console log file.
go to http://localhost:8080 and see that the jboss admin tools are protected!

Edit JBOSS_HOME/server/default/deploy/jbossweb-tomcat55.sar/conf/web.xml
and set the default directory listing to false
    <init-param>
       <param-name>listings</param-name>
       <param-value>false</param-value>
    </init-param>


---------------------------------------------------------------
Configuring OpenLDAP
---------------------------------------------------------------
=> Copy the keys from the old server to the new one and put into
/etc/openldap/keys
=> Edit /etc/openldap/slapd.conf to turn on ssl and logging:
Add:
loglevel 296
# TLS options for slapd
# Use SSL
TLSCipherSuite HIGH:MEDIUM:+SSLv3
TLSCertificateFile /etc/openldap/keys/ldap.sensornet.gov.pem
TLSCertificateKeyFile /etc/openldap/keys/ldap.sensornet.gov-Key.pem
TLSCACertificateFile /etc/openldap/keys/ldap.sensornet.gov-CA.pem
...

# Misc security settings
password-hash	{SSHA}

#######################################################################
# bdb database definitions
#######################################################################

database	bdb
suffix		"dc=sensornet,dc=gov"
checkpoint      1024    5
cachesize       10000
rootdn		"cn=LDAP_Manager,dc=sensornet,dc=gov"
# Cleartext passwords, especially for the rootdn, should
# be avoid.  See slappasswd(8) and slapd.conf(5) for details.
# Use of strong authentication encouraged.
rootpw		Your_password_hash
# The database directory MUST exist prior to running slapd AND 
# should only be accessible by the slapd and slap tools.
# Mode 700 recommended.

# Files should be created rw for the owner ONLY
mode	0600
directory	/var/lib/ldap
# Indices to maintain
index   cn,sn,o pres,eq,sub
index	objectClass	eq
----------
=> Also, edit /etc/sysconfig/openldap:
#
OPENLDAP_START_LDAPS="yes"

and as root, run SuSEconfig
jardell:/etc/sysconfig # SuSEconfig


=> Set the LDAP server to start at boot time:
ca:/etc/openldap # cd /etc/init.d
ca:/etc/init.d # insserv ldap
ca:/etc/init.d # rcldap start
Starting ldap-server                                                 done

=> You need to add your LDAP tree to the ldap server. The easiest way to do this is to export
the old tree to an ldif file and then import it. I use LDAP Browser to do the export.
http://www-unix.mcs.anl.gov/~gawor/ldap/

=> Then add the LDIF entries to the server:
jar@jardell:~/jardell> ldapadd -x -D "cn=LDAP_Manager,dc=sensornet,dc=gov" -W -f jardell.ldif


-----------------------------------------------------------------------------------------
Setting up a separate Tomcat
-----------------------------------------------------------------------------------------
I have a separate Tomcat running outside of JBoss to handle authorization requests.

=> Put the keys in the location referred to in server.xml
=> Edit server.xml
    <Resource name="jdbc/jardell.gov" auth="Container" type="javax.sql.DataSource"
         maxActive="100" maxIdle="30" maxWait="10000"
         username="ejbca" password="your_db_pwd" driverClassName="com.mysql.jdbc.Driver"
         url="jdbc:mysql://jardell.gov:3306/policy?autoReconnect=true"/>
  </GlobalNamingResources>
  
  
      <!-- Define a SSL HTTP/1.1 Connector on port 18443 -->
     
      <Connector port="18443" 
                 maxThreads="150" minSpareThreads="25" maxSpareThreads="75"
                 enableLookups="false" disableUploadTimeout="true"
                 acceptCount="100" scheme="https" secure="true"
  	       keystoreFile="/srv/www/tomcat/bin/tomcat.jks"
                 keystorePass="your_pwd" 
                 clientAuth="true" sslProtocol="TLS" />
  
  Change the connector port and comment out the non-ssl server.
  
  	   <Context path="/functionlistmanager" docBase="functionlistmanager"
  		debug="5" reloadable="true" crossConnect="true">
  	       <Resource name="jdbc/jardell.gov" auth="Container" type="javax.sql.DataSource"
          	   maxActive="100" maxIdle="30" maxWait="10000"
          	   username="ejbca" password="your_db_pwd" driverClassName="com.mysql.jdbc.Driver"
          	   url="jdbc:mysql://jardell.gov:3306/policy?autoReconnect=true"/>
  	   </Context>	
  	   <Context path="/policyengine" docBase="policyengine"
  		debug="5"  reloadable="true" crossConnect="true" >
     		<Resource name="jdbc/jardell.gov" auth="Container" type="javax.sql.DataSource"
        	   maxActive="100" maxIdle="30" maxWait="10000"
        	   username="ejbca" password="your_db_pwd" driverClassName="com.mysql.jdbc.Driver"
        	   url="jdbc:mysql://jardell.gov:3306/policy?autoReconnect=true"/>
  	  </Context>
   </Host>
   
   => Copy the webapp war files to the webapps directory of the new tomcat. You may have to change
   the web.xml files to point to your new installation

---------------------------------------------------------------------------------------------
Transfer the mysql database
---------------------------------------------------------------------------------------------
=> In the old database, make a backup:
jar@jardell:~> mysqldump -u root -p  ejbca > ejbca.sql

=> Move it to the new installation
=> Use something like mysql-administrator to make an ejbca user (described above).
Import it with:
 mysql -u ejbca -pyour_ejbca-pwd ejbca < ejbca.sql

Export and import any other tables you need to transfer.

Also, open the ejbca database and issue the following commands:

ALTER TABLE crldata MODIFY base64Crl longtext NULL DEFAULT NULL;
ALTER TABLE hardtokenprofiledata MODIFY data longtext NULL DEFAULT NULL;
 
--------------------------------------------------------------------------
Setting up SecurID login
---------------------------------------------------------------------------
It doesn't look like RSA supports SuSE 10.1, but the release for SLES9 works.  
Download the latest client software from their site.
See:

	http://www.rsasecurity.com/node.asp?id=1177
Basically you just follow the instructions in our ftp area at:

	ftp://sws1.ornl.gov/unix/local/securid/linux/INSTALL
================================================
 SuSE 9.1, 9.2
================================================
   # Edit /etc/ssh/sshd_config and change:

OLD:  #UsePrivilegeSeparation yes
OLD:  #ChallengeResponseAuthentication=no
OLD:  #PubkeyAuthentication yes
OLD:  #RSAAuthentication yes
OLD:  #UsePAM no

NEW:  UsePrivilegeSeparation no
NEW:  ChallengeResponseAuthentication yes
NEW:  PubkeyAuthentication no
NEW:  RSAAuthentication no
NEW:  UsePAM yes


   # Restart the ssh daemon

rcsshd restart


   # Add PAM support for ssh service

cd /etc/pam.d
cp -p sshd sshd.dist
vi sshd 

   # Add as the first line
auth    required        pam_securid.so

   # Comment out the second line
#auth     required       pam_unix2.so   # set_secrpc


==================
10.0, 10.1
================================================
Use the software from RSA's web site.  You'll need the sdconf.rec
file from your ACE server.

To test, replace required with sufficient
In /etc/pam.d/sshd:
%PAM-1.0
auth required   pam_securid.so
#auth required  pam_unix2.so # set_secrpc
auth required   pam_nologin.so
auth required   pam_env.so
account required        pam_unix2.so
account required        pam_nologin.so
password required       pam_pwcheck.so
password required       pam_unix2.so    use_first_pass use_authtok
session required        pam_unix2.so    none       # trace or debug
session required        pam_limits.so
# Enable the following line to get resmgr support for
# ssh sessions (see /usr/share/doc/packages/resmgr/README.SuSE)
#session  optional      pam_resmgr.so fake_ttyname

-----------------------------------------------------------------------------
EJBCA
-------------------------------------------------------------------------------
This is the advice I received from Tomas Gustavsson:
You should be able to go directly from 3.0 to 3.2, because there were no 
database changes between 3.0 and 3.1. It has not been tested by us though.
You will have to merge quite a lot of changes to you ejbca.properties 
file, because that needs to be in a 3.2 state before doing the upgrade.

In the doc/UPGRADE file for 3.2 there is also description for upgrading 
from 3.0 to 3.1, here I would recommend to to the 'Optional database 
migration' in the end before upgrading to 3.2. After this the procedure 
to go from 3.0 to 3.2 should be the same as when going from 3.1 to 3.2.

Issues in ejbca.properties:
-----------------------
In my old setup, the database is named ejbca. But in ecjba.properties it is:
# jndi name of the datasource to use in deployment descriptors of ejbs.
# default: EjbcaDS
datasource.jndi-name=EjbcaDS

This was the correct default for me.

The database name is in the attribute:
#database.url=jdbc:mysql://127.0.0.1:3306/ejbca

-----
You must not do an 'ant install' on the new machine just copy things:
0. Copy the p12 directory
1. Install plain JBoss on the new machine
2. Copy MySQL data files to the new machine (described above)
3. Unpack the new EJBCA files and create/edit ejbca.properties
4. Customize any EJBCA pages for your organization. Add any required security disclaimers.
   Static pages go into src/publicweb/root. For example, my PKI help pages which are posted on
   the EJBCA site. (http://www.ejbca.org/howto.html)
5. Do NOT do ant install - this would make a new admin CA
6. Do 'ant deploywithjbossservices' (as user jboss) on the new machine with JBoss off.
   If you just do 'ant deploy' the CRLs will not update.
7. Start JBoss, if ejbca.properties is done correctly you will not get a lot of errors
8. Do 'ant upgrade'  
After doing ant deploywithjbossservices
I was unable to get 'ant upgrade' to work, so I did it by hand:
-----
delete from LogConfigurationData;
delete from LogEntryData;
delete from CertReqHistoryData;
alter table UserData modify extendedInformationData LONGTEXT; (if NOT using MySQL, see src/upgrade/31_32 for commands for your specific database)
-----

> But, in the new install, I do not get any ejbca messages in
> /var/log/jboss/jboss.log that says my access was denied. Should I be
> getting them? Has the location of the ehbca logs changed?

This depends how you installed and configured your JBoss server. If you are unpacking a 
default installation of JBoss the log is in JBOSS_HOME/server/default/log/server.log.

> But I did notice that there are 3 SensorNetCAAdmin certificates (all
> valid). So far as I know, I only have one. But I think I made 2 other
> people administrators, so they may be for them.

> What field do you use to join the certificates to the users?

You can create several certificates for every user/admin. The fingerprint in the CertificateData 
points to an entry in UserData, so this joins the certificate to the user.
Perhaps it's easiest if you just generate a new certificate for your superadmin.

By typing:
bin/ejbca.sh ra setendentitystatus superadmin 10
bin/ejbca.sh ra setclearpwd superadmin password
bin/ejbca.sh batch

You will get a new superadmin.p12 generated that you can import in your browser.
---------------------------------
SECURITY ISSUE:
After EJBCA is installed (or whenever you do 'ant deploy', change
JBOSS_HOME/server/default/deploy/jbossweb-tomcat55.sar/server.xml to mode 600
JBOSS_HOME/server/default/deploy/ejbca-ds.xml to mode 600

-----------------------------------

=====================================
Other security tasks:

I install tripwire on all my machines. 
tripwire-2.3.1-179.3.i586.rpm
works nicely on SUSE 10.x
However, I was unable to use the built-in mailing of daily reports, so I
user sendmail to do this in a small shell script and added that to cron.
---------
/usr/sbin/runtw.sh:
#!/bin/sh
/usr/sbin/tripwire -m c | mail -r sender@yoursite.org -s "Tripwire Report from your_ca_machine" addr1@yoursite.org addr2@yoursite.org

----------
# crontab entry for root at 8 pm each day
20 20 * * * /usr/sbin/runtw.sh

=========================================
Send your syslogs to a remote syslog server using syslog-ng;

edit /etc/syslog-ng/syslog-ng.conf.in  (NOT syslog-ng.conf!!)

At the end, put:

## ORNL syslog server
destination d_syslog { udp("your.syslog.server.ip"); };
   filter f_ornl { level(emerg..crit)  or
                       ( facility(auth,local2) and level(emerg..debug) ) or
                       ( facility(kern) and level(emerg..warning) ) or
                       ( facility(local1) and level(emerg..info) ); };
   log { source(src); filter(f_ornl); destination(d_syslog); };

and run (as root)
SuSEconfig
which creates the syslog-ng.conf file.

